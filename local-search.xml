<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SPDK介绍</title>
    <link href="/2024/04/11/SPDK%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/04/11/SPDK%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="SPDK介绍"><a href="#SPDK介绍" class="headerlink" title="SPDK介绍"></a>SPDK介绍</h1><p>SPDK是Intel针对NVMe SSD开源的高性能存储框架，它能够减低IO路径上软件栈所占用的耗时占比，从而尽可能发挥出硬件设备的性能。</p><p>硬件处理数据的占比在整个IO路径中越来也少，软件处理开销占比越来越高，传统的驱动方式成为了IO性能无法继续提升的罪魁祸首，SPDK由此应运而生。</p><p>SPDK的主要特征</p><ul><li><strong>用户态驱动程序：</strong> SPDK 是一个完全在用户态运行的存储栈，通过绕过操作系统内核和传统的存储协议栈，直接在用户态处理存储操作，从而提高了存储系统的性能和效率。</li><li><strong>Bdev（块设备）抽象层：</strong> SPDK 提供了一个灵活的块设备抽象层，允许应用程序轻松管理和操作不同类型的块设备，如NVMe SSD、RAM Disk等。它提供了丰富的API和功能，使开发者能够快速开发高性能的存储应用程序。</li><li><strong>轮询：</strong>在传统的I/O模型中，应用程序提交读写请求后进入睡眠状态，一旦I/O完成，中断就会将其唤醒。轮询的工作方式则不同，应用程序提交读写请求后继续执行其他工作，以一定的时间间隔回头检查I/O是否已经完成。这种方式避免了中断带来的延迟和开销，并使得应用程序提高了I/O效率。</li></ul><h2 id="SPDK基础知识"><a href="#SPDK基础知识" class="headerlink" title="SPDK基础知识"></a>SPDK基础知识</h2><p>为什么要分配大页？</p><p>原理：dpdk大页内存原理</p><ul><li>所有大页以及大页表都以共享内存存放在<strong>共享内存</strong>中，永远都不会因为内存不足而导致被交换到磁盘swap分区中</li><li>由于所有进程都共享一个大页表，减少了页表的开销，无形中减少了内存空间的占用， 使得系统支持更多的进程同时运行</li><li>减轻TLB的压力</li><li>减轻查内存的压力</li></ul><p>目前 Linux 常用的 HugePages 大小为 2MB 和 1GB。</p><h2 id="SPDK架构"><a href="#SPDK架构" class="headerlink" title="SPDK架构"></a>SPDK架构</h2><p><img src="../images/SPDK%E4%BB%8B%E7%BB%8D/image-20240322111127433.png" alt="image-20240322111127433"></p><p>如上图，是SPDK的整体架构，从下至上，最底层是最核心的用户态NVMe驱动，这是SPDK的基石；</p><p>再往上一层是基于用户态驱动程序构建的存储服务，这部分主要是统一抽象的块设备层，包含了用户空间块设备语义的抽象和多个不同后端存储实现；</p><p>在块设备之上，SPDK提供了标准存储协议的实现，使得SPDK可以为通用存储客户端提供高性能的存储服务。</p><p>除此之外，SPDK还包含了用于管理运行环境、不同层内的管理开发工具，方便开发者的日常开发测试；为了适配更多的使用环境，SPDK也集成了不同的社区组件、如用户空间TCP/IP协议栈VPP、KV存储引擎RocksDB、缓存加速框架OCF等。</p><h3 id="驱动层"><a href="#驱动层" class="headerlink" title="驱动层"></a>驱动层</h3><p><img src="../images/SPDK%E4%BB%8B%E7%BB%8D/image-20240325212439022.png" alt="image-20240325212439022"></p><p>用户态驱动是SPDK构建其他服务的基础，主要实现了基于PCIe的NVMe协议，用于在用户态驱动NVMe SSD，也实现了NVMe-over-Fabric(NVMe-oF)用于连接网络的NVMe设备，其中Fabric在SPDK中支持RDMA和TCP两种实现方式；驱动层还包含了其他两类驱动，Virtio用于加速虚拟机IO，I/OAT是通过提高数据拷贝效率的IO加速引擎。</p><h3 id="存储服务层"><a href="#存储服务层" class="headerlink" title="存储服务层"></a>存储服务层</h3><p><img src="../images/SPDK%E4%BB%8B%E7%BB%8D/image-20240325213359730.png" alt="image-20240325213359730"></p><p>存储服务层主要在用户空间对块设备语义进行了统一封装抽象，并开发了不同的实现，用于支持不同的后端存储，比如NVMe bdev支持SPDK NVMe驱动管理本地NVMe SSD或则使用NVMe-oF连接远端服务器的NVMe SSD，Ceph RBD用于对接Ceph块存储，AIO和uring等则使用不同的IO模型管理内核块设备；有一类bdev被称为vbdev，它们基于原本的bdev之上实现了一定的功能，比如逻辑卷管理、分区表、缓存加速等，对于更上层的应用来说，它们还是属于bdev。</p><p>bdev本身并没有任何元数据，服务重启需要手动或则使用配置文件重新进行配置，blobstore则是基于bdev之上的具有持久化元数据的存储引擎，如果bdev具有持久化能力，则blobstore能够在掉电后进行恢复，blobstore将整个bdev分成blob进行管理，支持对blob进行创建、删除、写入、读取、快照、克隆、flatten等操作；blobfs则是基于blobstore实现的简易文件系统，一个文件会对应一个blob，本身不兼容POSIX语义，目前的只能对文件进行追加写，不能修改，主要用于和RocksDB进行集成用于作为高性能的KV存储。</p><h3 id="存储协议层"><a href="#存储协议层" class="headerlink" title="存储协议层"></a>存储协议层</h3><p><img src="../images/SPDK%E4%BB%8B%E7%BB%8D/image-20240326091725821.png" alt="image-20240326091725821"></p><p>SPDK在存储协议层主要实现了基于网络的块存储协议，将bdev暴露到网络中供其他服务进行使用，除了支持NVMe-oF协议之外，还支持iSCSI、nbd等协议；由于bdev层屏蔽掉了后端存储的实现，所以可以按需使用不同的协议将bdev进行暴露，如将Ceph RBD暴露成NVMe设备给客户端使用。</p><h2 id="应用编程框架"><a href="#应用编程框架" class="headerlink" title="应用编程框架"></a>应用编程框架</h2><p><img src="../images/SPDK%E4%BB%8B%E7%BB%8D/image-20240326092620002.png" alt="image-20240326092620002"></p><p>SPDK应用在启动的时候，可以指定线程数量，用掩码的方式进行标识，标识在哪几个指定的CPU核上运行，如上图所示，一个核就会运行一个线程，SPDK把它称为reactor。</p><p>SPDK实现了各类子系统、应用服务在调用spdk_app_start方法启动时，除了会按模型初始化线程外，还会对注册的各个子系统进行初始化。下图是SPDK支持的子系统以及子系统间的依赖关系，在SPDK框架中bdev也是作为一个子系统存在，用于提供通用的用户态块存储抽象，和内核的通用块层类似，它会屏蔽底层模块(Module)具体的实现，对外提供统一的接口，当然，对底层模块要求也是需要实现对应的API。</p><p><img src="../images/SPDK%E4%BB%8B%E7%BB%8D/image-20240326094217675.png" alt="image-20240326094217675"></p>]]></content>
    
    
    <categories>
      
      <category>存储研究</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SPDK使用vhost</title>
    <link href="/2024/04/11/SPDK%E4%BD%BF%E7%94%A8vhost/"/>
    <url>/2024/04/11/SPDK%E4%BD%BF%E7%94%A8vhost/</url>
    
    <content type="html"><![CDATA[<h1 id="SPDK使用vhost"><a href="#SPDK使用vhost" class="headerlink" title="SPDK使用vhost"></a>SPDK使用vhost</h1><h2 id="SPDK-vhost工作机制"><a href="#SPDK-vhost工作机制" class="headerlink" title="SPDK vhost工作机制"></a>SPDK vhost工作机制</h2><p><img src="/images/SPDK%E4%BD%BF%E7%94%A8vhost/image-20240416101340921.png" alt="image-20240416101340921"></p><p>vhost target以进程的形式在本地计算机提供存储服务，</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://rootw.github.io/2018/05/SPDK-all/">https://rootw.github.io/2018/05/SPDK-all/</a>   </p><p><a href="https://blog.csdn.net/anyegongjuezjd/article/details/136123555">浅析SPDK技术：vhost</a></p>]]></content>
    
    
    <categories>
      
      <category>存储研究</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建SPDK和fio环境</title>
    <link href="/2024/03/15/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/03/15/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="fio"><a href="#fio" class="headerlink" title="fio"></a>fio</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里使用github的安装方式，方便管理</p><p>使用内网的github网站</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://gitcode.com/axboe/fio.git<br></code></pre></td></tr></table></figure><p>接着在fio的目录下运行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install libaio-dev<br>sudo apt-get install gcc<br>sudo ./configure<br>sudo make install<br>fio -v<br></code></pre></td></tr></table></figure><p>可以看到fio的版本(这里的版本是<code>fio-3.36-38-g06c4</code>)</p><p>fio的官方使用手册<a href="https://fio.readthedocs.io/en/latest/fio_doc.html">https://fio.readthedocs.io/en/latest/fio_doc.html</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>主要使用.fio文件进行测试</p><h3 id="测试psync"><a href="#测试psync" class="headerlink" title="测试psync"></a>测试psync</h3><p>.fio文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[global]<br>thread=1<br>group_reporting=1<br>ioengine=psync<br>direct=1<br>verify=0<br>size=16384<br>time_based=1<br>rw=randwrite<br>runtime=10<br>bs=16K<br>iodepth=64<br>filename=/dev/nvme1n1p1<br>[test]<br>stonewall<br>description=&quot;variable bs&quot;<br>bs=16K<br><br></code></pre></td></tr></table></figure><p>测试命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">path_to_fio/fio u_path/psync.fio<br></code></pre></td></tr></table></figure><p>测试结果</p><img src="/images/搭建SPDK和fio环境/image-20240315210452247.png" alt="image-20240315210452247"  /><h3 id="测试libaio"><a href="#测试libaio" class="headerlink" title="测试libaio"></a>测试libaio</h3><p>只需要把上面的<code>psync</code>换成<code>libaio</code>就可以了</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240315210748428.png" alt="image-20240315210748428"></p><p>效果有一点点提升</p><h1 id="SPDK"><a href="#SPDK" class="headerlink" title="SPDK"></a>SPDK</h1><h2 id="安装SPDK"><a href="#安装SPDK" class="headerlink" title="安装SPDK"></a>安装SPDK</h2><p>先查看我们系统的环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/version<br>Linux version 5.4.0-144-generic (buildd@lcy02-amd64-069) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #161~18.04.1-Ubuntu SMP Fri Feb 10 15:55:22 UTC 2023<br></code></pre></td></tr></table></figure><p>然后从github下载spdk，如果遇到了网络问题，可以手动修改github的dns映射，参考<a href="https://www.cnblogs.com/melodyjerry/p/13031571.html">https://www.cnblogs.com/melodyjerry/p/13031571.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/spdk/spdk</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> spdk</span><br><span class="hljs-meta">#</span><span class="bash"> 安装子模块.</span><br><span class="hljs-meta">$</span><span class="bash"> git submodule update --init</span><br><span class="hljs-meta">#</span><span class="bash">如果安装的慢，可以将.gitmodules文件中的路径改成国内镜像的：hub.fastgit.org(只能用作镜像，不可访问)</span><br><span class="hljs-meta">#</span><span class="bash"> 安装依赖。有可能需要给pip换源，最好使用清华源</span><br><span class="hljs-meta">$</span><span class="bash"> sudo ./scripts/pkgdep.sh</span><br><span class="hljs-meta">#</span><span class="bash">编译</span><br><span class="hljs-meta">$</span><span class="bash"> ./configure</span><br><span class="hljs-meta">$</span><span class="bash"> make</span><br></code></pre></td></tr></table></figure><p>安装依赖的时候报错</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">无法定位软件包 libfuse3-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p>安装的spdk版本出错，应该安装22.05</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --branch v22.05.x https://github.com/spdk/spdk.git<br></code></pre></td></tr></table></figure><p>==应该在可以翻墙的Linux系统中安装。连子组件安装完之后一起上传到服务器。==</p><p>为了方便操作，我们使用vscode连接远程的服务器.注意，Host的命名不能加括号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Host 14#内网<br>    HostName 192.168.xxx.xxx<br>    User username<br></code></pre></td></tr></table></figure><h2 id="SPDK结合FIO测试磁盘性能"><a href="#SPDK结合FIO测试磁盘性能" class="headerlink" title="SPDK结合FIO测试磁盘性能"></a>SPDK结合FIO测试磁盘性能</h2><p>安装完SPDK和fio之后，需要配置SPDK使用fio</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --with-fio=/home/fio --with-ocf<br>make<br></code></pre></td></tr></table></figure><p>make之后，就可以看到在<spdk_repo>/build/fio目录会有下面两个文件，这就是fio_plugin的可执行程序。</p><p>要在 fio 中使用 SPDK fio 插件，请在运行 fio 时使用 LD_PRELOAD 指定插件二进制文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo LD_PRELOAD=&lt;path to spdk&gt;spdk/build/fio/spdk_bdev ./fio/fio ./test_files/example_spdk_bdev.fio<br></code></pre></td></tr></table></figure><p>SPDK提供两种形态的fio_plugin：</p><ul><li>基于裸盘NVMe的0fio_plugin，其特点为I/O通过SPDK用户态驱动直接访问裸盘，常用于评估SPDK用户态驱动在裸盘上的性能。</li><li>基于bdev的fio_plugin，其特点为I/O测试基于SPDK块设备bdev之上，所有I/O经由块设备层bdev，再传送至裸盘设备。常用于评估SPDK块设备bdev的性能。</li></ul><h3 id="初始化NVMe-SSD"><a href="#初始化NVMe-SSD" class="headerlink" title="初始化NVMe SSD"></a>初始化NVMe SSD</h3><p>在运行SPDK应用程序之前，必须分配一些较大的页面，并且必须从本机内核驱动程序解绑定任何NVMe和I/OAT设备。SPDK包含一个脚本，可以在Linux上自动执行这个过程。这个脚本应该作为根运行。它只需要在系统上运行一次。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo scripts/setup.sh<br></code></pre></td></tr></table></figure><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240321155635222.png" alt="image-20240321155635222"></p><p>但是发现我们的两个nvme设备都在使用，没有办法绑定。并且使用lsblk的时候可以看出来对磁盘进行分区了，所以需要对该磁盘进行初始化</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240321221737551.png" alt="image-20240321221737551"></p><p>先使用fdisk删除分区。然后使用nvme-cli相关命令初始化nvme ssd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nvme format /dev/nvme1n1<br></code></pre></td></tr></table></figure><p>再运行上面的绑定命令，出现类似结果则绑定成功。再使用<code>lsblk</code>就不会看到结果了</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240322093108395.png" alt="image-20240322093108395"></p><p>绑定之后，在spdk的路径运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ./build/examples/hello_world<br></code></pre></td></tr></table></figure><p>结果如下</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240322093927566.png" alt="image-20240322093927566"></p><p>成功</p><h3 id="基于NVMe的fio-plugin"><a href="#基于NVMe的fio-plugin" class="headerlink" title="基于NVMe的fio_plugin"></a>基于NVMe的fio_plugin</h3><p>在 fio 配置文件中设置 ioengine=spdk（请参阅 github.com/spdk/spdk/tree/v22.05.x/examples/nvme/fio_plugin 目录下的 example_config.fio）</p><p>.fio文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[global]<br>ioengine=spdk<br>thread=1<br>group_reporting=1<br>direct=1<br>verify=0<br>time_based=1<br>ramp_time=0<br>runtime=2<br>iodepth=128<br>size=16384<br>rw=randrw<br><br>[test]<br>numjobs=1<br>filename=trtype=PCIe traddr=0000.05.00.0 ns=1<br></code></pre></td></tr></table></figure><p>运行命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">LD_PRELOAD=&lt;path to spdk&gt;spdk/build/fio/spdk_nvme fio example_spdk_nvme.fio<br></code></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240322102259191.png" alt="image-20240322102259191"></p><h3 id="基于bdev的fio-plugin"><a href="#基于bdev的fio-plugin" class="headerlink" title="基于bdev的fio_plugin"></a>基于bdev的fio_plugin</h3><p>具体的使用方式可以看github.com/spdk/spdk/tree/v22.05.x/examples/bdev/fio_plugin这里的readme</p><p>基于bdev的fio_plugin是将I/O在SPDK块设备bdev之上进行发送。而基于裸盘的fio_plugin，I/O是直接到裸盘上进行处理。两者最大的差别在于I/O是否经过bdev这一层。因此，基于bdev的fio_plugin能够很好的评估SPDK块设备层bdev的性能。其编译安装与裸盘的fio_plugin完全相同。也需要将盘从原始驱动中解除。</p><p>使用下面的命令自动监测，生成bdev.json</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scripts/gen_nvme.sh --json-with-subsystems &gt; /tmp/bdev.json<br></code></pre></td></tr></table></figure><p>如下所示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;subsystems&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;subsystem&quot;</span>: <span class="hljs-string">&quot;bdev&quot;</span>,<br>            <span class="hljs-attr">&quot;config&quot;</span>: [<br>                &#123;<br>                <span class="hljs-attr">&quot;method&quot;</span>: <span class="hljs-string">&quot;bdev_nvme_attach_controller&quot;</span>,<br>                <span class="hljs-attr">&quot;params&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;trtype&quot;</span>: <span class="hljs-string">&quot;PCIe&quot;</span>,<br>                    <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;Nvme1&quot;</span>,<br>                    <span class="hljs-attr">&quot;traddr&quot;</span>:<span class="hljs-string">&quot;0000:05:00.0&quot;</span><br>                    &#125;<br>                &#125;<br>            ]<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>.fio文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[global]<br>ioengine=spdk_bdev<br>spdk_json_conf=/tmp/bdev.json<br>thread=1<br>group_reporting=1<br>direct=1<br>verify=0<br>time_based=1<br>ramp_time=0<br>runtime=10<br>iodepth=64<br>size=16384<br>rw=randwrite<br><br>[test]<br>bs=16k<br>filename=Nvme1n1<br></code></pre></td></tr></table></figure><p><strong>注意 Nvme0是指controller，而Nvme0n1才是指bdev，在Linux kernel中亦是如此，而非SPDK限定</strong></p><p>运行命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">LD_PRELOAD=&lt;path to spdk&gt;spdk/build/fio/spdk_bdev fio example_spdk_bdev.fio<br></code></pre></td></tr></table></figure><p>结果如下</p><img src="/images/搭建SPDK和fio环境/image-20240322150518070.png" alt="image-20240322150518070"  /><h3 id="使用fio运行自己定义的工作负载"><a href="#使用fio运行自己定义的工作负载" class="headerlink" title="使用fio运行自己定义的工作负载"></a>使用fio运行自己定义的工作负载</h3><p>参考链接<a href="https://fio.readthedocs.io/en/latest/fio_doc.html#cmdoption-arg-read_iolog">https://fio.readthedocs.io/en/latest/fio_doc.html#cmdoption-arg-read_iolog</a></p><p>==<strong>write_iolog</strong>=str==可以将fio中执行一次的流量写入到对应的文件中</p><p>==<strong>read_iolog</strong>=str==可以去读对应的流量文件然后执行。注意，一定要把时间线往后拉，这样才能都执行完</p><p>这两个参数都可以在.fio配置文件中直接实现</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fio</span> version <span class="hljs-number">3</span> iolog<br><span class="hljs-attribute">2</span> Nvme<span class="hljs-number">1</span>n<span class="hljs-number">1</span> add<br><span class="hljs-attribute">872</span> Nvme<span class="hljs-number">1</span>n<span class="hljs-number">1</span> open<br><span class="hljs-attribute">878</span> Nvme<span class="hljs-number">1</span>n<span class="hljs-number">1</span> write <span class="hljs-number">0</span> <span class="hljs-number">16384</span><br><span class="hljs-attribute">888</span> Nvme<span class="hljs-number">1</span>n<span class="hljs-number">1</span> write <span class="hljs-number">0</span> <span class="hljs-number">16384</span><br><span class="hljs-attribute">891</span> Nvme<span class="hljs-number">1</span>n<span class="hljs-number">1</span> write <span class="hljs-number">0</span> <span class="hljs-number">16384</span><br><span class="hljs-attribute">10001677</span> Nvme<span class="hljs-number">1</span>n<span class="hljs-number">1</span> close<br></code></pre></td></tr></table></figure><p>这是流文件格式，分别对应 <code>timestamp(μs) filename action offset length(Byte)</code></p><h3 id="收集fio执行的每段结果并输出"><a href="#收集fio执行的每段结果并输出" class="headerlink" title="收集fio执行的每段结果并输出"></a>收集fio执行的每段结果并输出</h3><p>在命令行中使用三个参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">-output=../test_files/output #指定输出的具体文件<br>-output-format=json #指定输出的格式<br>-status-interval=1 #指定输出的时间间隔<br></code></pre></td></tr></table></figure><p>但是我们使用fio官方文档中的 ==Measurements and reporting==模块进行信息收集</p><p>在.fio配置文件中加入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">write_bw_log=./test_files/foo<br>write_lat_log=./test_files/foo<br>log_avg_msec=10<br></code></pre></td></tr></table></figure><p>每隔10ms收集一次数据</p><p>为了比较使用trace文件方式和fio本身生成流量方式的区别。首先设置.fio配置文件为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[global]<br>ioengine=spdk_bdev<br>spdk_json_conf=/home/dell6/szb/NVMe/fio/test_files/bdev.json<br>thread=1<br>group_reporting=1<br>direct=1<br>verify=0<br>time_based=1<br>ramp_time=0<br>runtime=5<br>iodepth=64<br>size=16384<br>rw=randwrite<br>write_bw_log=./test_files/foo<br>write_lat_log=./test_files/foo<br>log_avg_msec=10<br>write_iolog=./test_files/iolog1.txt<br><br>[test]<br>bs=16k<br>filename=Nvme1n1<br></code></pre></td></tr></table></figure><p>运行结果如下图</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240323185108469.png" alt="image-20240323185108469"></p><p>同时还会生成相关的统计数据文件</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240323183452664.png" alt="image-20240323183452664"></p><p>每个值的意义见链接<a href="https://fio.readthedocs.io/en/latest/fio_doc.html#log-file-formats">https://fio.readthedocs.io/en/latest/fio_doc.html#log-file-formats</a></p><p>然后将write改成read再试一次</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240323185130498.png" alt="image-20240323185130498"></p><p>结果近似，并且多次只运行trace文件也是有误差的。</p><h2 id="SPDK日志输出"><a href="#SPDK日志输出" class="headerlink" title="SPDK日志输出"></a>SPDK日志输出</h2><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="多租户相同发送速率竞争同一块磁盘"><a href="#多租户相同发送速率竞争同一块磁盘" class="headerlink" title="多租户相同发送速率竞争同一块磁盘"></a>多租户相同发送速率竞争同一块磁盘</h2><p>使用基于bdev的fio_plugin测试。因为我们修改的其实是bdev块设备的调度策略。我们使用fio运行我们自己负载。</p><p>我们自己生成流量数据，然后在.fio中使用参数<code>read_iolog=./test_files/iolog.trace</code>可以读取自己的流量数据。通过设置<code>runtime</code>的值可以防止段错误，即还有命令在跑但是程序结束的问题</p><h3 id="16KB的数据"><a href="#16KB的数据" class="headerlink" title="16KB的数据"></a>16KB的数据</h3><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240324211128634.png" alt="image-20240324211128634"></p><p>差距有点大，再试一下4KB的数据。</p><h3 id="4KB的数据"><a href="#4KB的数据" class="headerlink" title="4KB的数据"></a>4KB的数据</h3><p>设置iosize=4KB，基准测试中配置如下,iops的值是79.5K。为了让3个流都能被完全服务，所以在生成流量的时候，iosize设置为4KB，时间间隔是1000/26.5=38μs  发送速率是103MBps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[global]<br>ioengine=spdk_bdev<br>spdk_json_conf=/home/dell6/szb/NVMe/fio/test_files/bdev.json<br>thread=1<br>group_reporting=0<br>direct=1<br>verify=0<br>time_based=1<br>ramp_time=0<br>runtime=10<br>iodepth=1<br>bs=4k<br>size=4k<br>rw=randwrite<br>[test1]<br>numjobs=1<br>filename=Nvme1n1<br></code></pre></td></tr></table></figure><p>通过设置多个job区域，实现多线程竞争的模式</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240325105430535.png" alt="image-20240325105430535"></p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240325105457953.png" alt="image-20240325105457953"></p><h2 id="多租户不同发送速率竞争同一块磁盘"><a href="#多租户不同发送速率竞争同一块磁盘" class="headerlink" title="多租户不同发送速率竞争同一块磁盘"></a>多租户不同发送速率竞争同一块磁盘</h2><h3 id="4KB数据"><a href="#4KB数据" class="headerlink" title="4KB数据"></a>4KB数据</h3><p>经过上面的判断，设置三个任务，其中一个任务在150000条之后把时间间隔改为20μs(4Kiolog_2.trace)，提高发送速率为195MBps</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240325152824718.png" alt="image-20240325152824718"></p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240325153007846.png" alt="image-20240325153007846"></p><p>下面两幅图是对bdev的QoS进行限制(300MBps)之后的操作。</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240416155937214.png" alt="image-20240416155937214"></p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240416155956892.png" alt="image-20240416155956892"></p><h2 id="SPDK-QoS机制实现对租户服务速率的限制"><a href="#SPDK-QoS机制实现对租户服务速率的限制" class="headerlink" title="SPDK QoS机制实现对租户服务速率的限制"></a>SPDK QoS机制实现对租户服务速率的限制</h2><p>SPDK有自己的QoS实现机制。但是spdk qos做在bdev层，是面向块设备的qos，不是面向客户端的qos。</p><p>可以自己生成多个虚拟的块设备，然后再使用QoS机制。</p><h3 id="SPDK-QoS的使用"><a href="#SPDK-QoS的使用" class="headerlink" title="SPDK QoS的使用"></a>SPDK QoS的使用</h3><p>json文件的使用就很好地替代了rpc的配置方式。</p><p>作为bdev.json文件中的一部分。以json的格式运行。详情见<a href="https://spdk.io/doc/jsonrpc.html">https://spdk.io/doc/jsonrpc.html</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;subsystems&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;subsystem&quot;</span>: <span class="hljs-string">&quot;bdev&quot;</span>,<br>      <span class="hljs-attr">&quot;config&quot;</span>: [<br>        &#123;<br>          <span class="hljs-attr">&quot;method&quot;</span>: <span class="hljs-string">&quot;bdev_nvme_attach_controller&quot;</span>,<br>          <span class="hljs-attr">&quot;params&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;trtype&quot;</span>: <span class="hljs-string">&quot;PCIe&quot;</span>,<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Nvme1&quot;</span>,<br>            <span class="hljs-attr">&quot;traddr&quot;</span>: <span class="hljs-string">&quot;0000:05:00.0&quot;</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;method&quot;</span>: <span class="hljs-string">&quot;bdev_set_qos_limit&quot;</span>,<br>          <span class="hljs-attr">&quot;params&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Nvme1n1&quot;</span>,<br>            <span class="hljs-attr">&quot;rw_mbytes_per_sec&quot;</span>: <span class="hljs-number">300</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在fio中使用rate限制"><a href="#在fio中使用rate限制" class="headerlink" title="在fio中使用rate限制"></a>在fio中使用rate限制</h3><p>将每个job的rate设置为了100，但是不管用</p><h3 id="在json配置文件中使用bdev-split-create"><a href="#在json配置文件中使用bdev-split-create" class="headerlink" title="在json配置文件中使用bdev_split_create"></a>在json配置文件中使用bdev_split_create</h3><p>但是一上来不知道怎么使用，所以先用rpc生成分区，然后在将rpc操作转换为json。</p><p>最后的json文件如下所示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;subsystems&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;subsystem&quot;</span>: <span class="hljs-string">&quot;bdev&quot;</span>,<br>      <span class="hljs-attr">&quot;config&quot;</span>: [<br>        &#123;<br>          <span class="hljs-attr">&quot;method&quot;</span>: <span class="hljs-string">&quot;bdev_nvme_attach_controller&quot;</span>,<br>          <span class="hljs-attr">&quot;params&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;trtype&quot;</span>: <span class="hljs-string">&quot;PCIe&quot;</span>,<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Nvme1&quot;</span>,<br>            <span class="hljs-attr">&quot;traddr&quot;</span>: <span class="hljs-string">&quot;0000:05:00.0&quot;</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;method&quot;</span>: <span class="hljs-string">&quot;bdev_split_create&quot;</span>,<br>          <span class="hljs-attr">&quot;params&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;base_bdev&quot;</span>: <span class="hljs-string">&quot;Nvme1n1&quot;</span>,<br>            <span class="hljs-attr">&quot;split_count&quot;</span>: <span class="hljs-number">3</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;method&quot;</span>: <span class="hljs-string">&quot;bdev_set_qos_limit&quot;</span>,<br>          <span class="hljs-attr">&quot;params&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Nvme1n1p0&quot;</span>,<br>            <span class="hljs-attr">&quot;rw_mbytes_per_sec&quot;</span>: <span class="hljs-number">100</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;method&quot;</span>: <span class="hljs-string">&quot;bdev_set_qos_limit&quot;</span>,<br>          <span class="hljs-attr">&quot;params&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Nvme1n1p1&quot;</span>,<br>            <span class="hljs-attr">&quot;rw_mbytes_per_sec&quot;</span>: <span class="hljs-number">100</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;method&quot;</span>: <span class="hljs-string">&quot;bdev_set_qos_limit&quot;</span>,<br>          <span class="hljs-attr">&quot;params&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Nvme1n1p2&quot;</span>,<br>            <span class="hljs-attr">&quot;rw_mbytes_per_sec&quot;</span>: <span class="hljs-number">100</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，同时也要修改fio中trace文件对应的device name。fio文件的具体内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">[global]<br>ioengine=spdk_bdev<br>spdk_json_conf=/home/dell6/szb/NVMe/fio/test_files/bdev.json<br>thread=1<br>group_reporting=0<br>direct=1<br>verify=0<br>time_based=1<br>ramp_time=0<br>runtime=10<br>iodepth=1<br>bs=4k<br>size=4k<br>rw=randwrite<br>write_bw_log=./test_files/three4<br>write_lat_log=./test_files/three4<br>log_avg_msec=10<br><br><br>[test1]<br>numjobs=1<br>filename=Nvme1n1p0<br>read_iolog=./test_files/4Kiologp0.trace<br>[test2]<br>numjobs=1<br>filename=Nvme1n1p1<br>read_iolog=./test_files/4Kiologp1.trace<br>[test3]<br>numjobs=1<br>filename=Nvme1n1p2<br>read_iolog=./test_files/4Kiologp2.trace<br></code></pre></td></tr></table></figure><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240416173944439.png" alt="image-20240416173944439"></p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240416174115082.png" alt="image-20240416174115082"></p><h2 id="在使用fio的路径中修改SPDK源码，实现简单的漏桶控制"><a href="#在使用fio的路径中修改SPDK源码，实现简单的漏桶控制" class="headerlink" title="在使用fio的路径中修改SPDK源码，实现简单的漏桶控制"></a>在使用fio的路径中修改SPDK源码，实现简单的漏桶控制</h2><p>问题：是把算法实现在<code>lib/bdev</code>还是实现在<code>lib/nvme</code>?</p><p><img src="/images/%E6%90%AD%E5%BB%BASPDK%E5%92%8Cfio%E7%8E%AF%E5%A2%83/image-20240328210403556.png" alt="image-20240328210403556"></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>==从fio开始分析,bdev==</p><p>关于spdk在bdev层的流程可以看<a href="https://rootw.github.io/2018/05/SPDK-ioanalyze/">https://rootw.github.io/2018/05/SPDK-ioanalyze/</a></p><p>在<code>./spdk/examples/bdev/fio_plugin/fio_plugin.c</code>中找到每个租户(thread)创建的过程，</p><p><code>spdk_fio_init_thread()</code>函数创建spdk_thread，创建的线程数比作业数目多1。调用的是<code>./spdk/lib/thread/thread.c</code>中的<code>spdk_thread_create()</code>函数，创建thread。为了调试，每次修改，应该同时对<code>fio_plugin</code>和<code>thread</code>进行重make。<code>spdk_fio_bdev_open</code>调用了作业数目的次数。</p><p><code>./spdk/lib/bdev</code> 每调用一次<code>spdk_fio_bdev_open()</code>都会调用<code>bdev_open()</code>.</p><p>通过<code>bdev_channel_get_io()</code>获取<code>bdev_io</code>，然后调用<code>bdev_io_submit()</code>，该函数的调用次数比请求的总次数多三次。但是因为我们的请求都是写，所以<code>bdev_write_blocks_with_md()</code>该函数调用的次数和请求的数目是一致的。</p><p>io channel是一个线程强相关对象，不同的线程对应不同的channel，。request必须在关联的I/Ochannel上提交。</p><p><code>fio_plugin.c</code>中的<code>spdk_fio_queue()</code>用于提交IO request</p><p>==根据NVMe执行过程分析==</p><p>在<code>nvme_ctrlr.c</code>中找到<code>nvme_ctrlr_proc_add_io_qpair()</code>，被调用的次数和线程数目一致</p><p><code>nvme_qpair_submit_request()</code>负责从把request放到qpair中。</p><h3 id="在bdev层进行token对每个thread进行速率限制"><a href="#在bdev层进行token对每个thread进行速率限制" class="headerlink" title="在bdev层进行token对每个thread进行速率限制"></a>在bdev层进行token对每个thread进行速率限制</h3><p>首先在<code>./spdk/lib/bdev</code>中创建 <code>resource_schedule.c</code>文件,该文件中完成速率控制的函数。然后在。<code>./include/spdk/bdev.h</code>中创建<code>shceduler</code>结构体。</p><p>该结构体中包括请求排队队列，和一些相关的参数。并且C语言中没有实现map。</p><p>给<code>spdk_thread</code>中加入 void*指针，指向scheduler，每个线程绑定一个scheduler，每个线程创建之后将scheduler绑定到该线程</p><p>在<code>_bdev_io_submit()</code>中，在记录</p><p><strong>设置三个任务，其中一个任务在150000条之后把时间间隔改为20μs，提高发送速率</strong></p>]]></content>
    
    
    <categories>
      
      <category>存储研究</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PAIO总结</title>
    <link href="/2024/03/14/PAIO%E6%80%BB%E7%BB%93/"/>
    <url>/2024/03/14/PAIO%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="PAIO-General-Portable-I-O-Optimizations-With-Minor-Application-Modifications"><a href="#PAIO-General-Portable-I-O-Optimizations-With-Minor-Application-Modifications" class="headerlink" title="PAIO: General, Portable I/O Optimizations With Minor Application Modifications"></a>PAIO: General, Portable I/O Optimizations With Minor Application Modifications</h1><p>论文原地址<a href="https://www.usenix.org/conference/fast22/presentation/macedo">https://www.usenix.org/conference/fast22/presentation/macedo</a></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>PAIO是一个框架，为不同的应用程序实现<strong>可移植</strong>的I/O策略和<strong>优化</strong>，开发人员只需要对<strong>原始的代码库</strong>进行<strong>少量修改</strong>。主要思路是：如果我们能够在请求流经I/O堆栈的不同层时拦截和区分请求，我们就可以在不显著更改层本身的情况下执行复杂的存储策略。PAIO用到了软件定义存储的思想，构建了数据平面stages(mediate和优化跨层的I/O请求)和控制平面(根据不同的存储策略对各个步骤进行协调和微调)。用两个用例展示了PAIO的性能和适用性。</p><p><strong>第一种</strong>方法将基于行业标准lsm的键值存储的第99百分位延迟提高了4倍。<strong>第二个</strong>是确保共享存储环境下动态的每个应用程序带宽保证</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>以数据为中心的系统已经逐渐成为I/O堆栈的一部分。通常使用存储优化( I/O scheduling, differentiation, and caching)来提高这种系统的性能。但这些优化方式和系统实现紧密耦合，并且由于缺乏全局上下文而可能相互干扰。例如，区分前台和后台I/O以减少尾部延迟等优化方法被广泛应用，然而现在在KVS中实现的方式需要对系统有深刻的理解，并且可移植性很低。类似地，部署在共享基础设施上的应用程序的优化可能由于彼此不了解而发生冲突。</p><blockquote><p>基于基础架构的存储优化存在互相干扰、可移植性差、应用程序冲突的问题</p></blockquote><p>本文认为存在一种更好的方式来实现存储优化。PAIO是一种用户级框架，通过采用软件定义存储(SDS)社区的思想，可以构建可移植且普遍适用的存储优化。<strong>关键思想</strong>是通过拦截和处理应用程序执行的I/O，在应用程序之外实现优化，作为数据平步骤。然后，这些优化由逻辑上集中的管理器(控制平面)控制，该管理器具有防止它们之间相互干扰所必需的全局上下文。PAIO不需要对内核进行修改，同时可以达到修改内核存储优化方法的效果。</p><blockquote><p>关键思想是在数据平面优化每个应用程序的IO，然后在控制平面获取全局状态。</p></blockquote><p>PAIO的实现面临了很多的挑战。为了在应用程序外部执行复杂的I/O优化，PAIO需要在I/O堆栈中向下传播上下文，从高级api向下传播到以较小粒度执行I/O的较低层。它通过结合上下文传播的思想来实现这一点，使应用程序级的信息能够传播到数据平面步骤，只需进行少量的代码更改，而无需修改现有的api。</p><blockquote><p>挑战1是如何把应用程序的信息传播到数据平面</p></blockquote><p>PAIO要求设计新的抽象，允许在用户空间I/O层之间区分和协调I/O请求，同时增强了存储优化的可移植性和易部署性。PAIO主要有四个抽象。<code>enforcement object</code>是一个可编程组件，它将单个用户定义的策略(例如速率限制或调度)应用于传入的I/O请求。PAIO使用<code>context objects</code>来描述和区分请求，并通过<code>channels</code>连接I/O请求、<code>enforcement object</code>和<code>context objects</code>。为了确保独立存储优化之间的协调(例如，公平性，优先级)，具有全局可见性的控制平面通过使用<code>rules</code>对<code>enforcement object</code>进行微调</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">用户空间<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span>层是什么东西，具体有哪些<br></code></pre></td></tr></table></figure><img src="/images/PAIO总结/image-20240315163546597.png" alt="image-20240315163546597" style="zoom:67%;" /><blockquote><p>PAIO主要有四个抽象：enforcement object、context objects、channels、rules</p></blockquote><p>使用上述的新特性和抽象，系统设计人员可以开发定制SDS数据平面步骤。为了演示这一点，我们用下面两个用例验证PAIO。<strong>第一</strong>，在RocksDB中添加了一个步骤，然后演示如何通过编排前台和后台任务来防止延迟峰值。结果表明，与基线RocksDB相比，在不同的工作负载和测试场景(例如，不同的存储设备，有和没有I/O带宽限制)下，启用PAIO的RocksDB将第99百分位延迟提高了4，并且与SILK相比实现了相似的尾延迟性能。这就证明了I/O优化可以更简单、更易移植的实现。<strong>第二</strong>，我们将PAIO应用于TensorFlow，并展示了如何在ABCI超级计算机的真实共享存储场景下实现动态的每个应用程序带宽保证。结果显示使用了PAIO的TensorFlow实例带宽目标都被满足了。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">Software-<span class="hljs-keyword">Defined</span> Storage(SDS)思想主要有什么<br></code></pre></td></tr></table></figure><blockquote><p>PAIO在两个场景下进行了验证</p></blockquote><p>本文贡献如下：</p><ul><li>一个用户级框架，用于构建可编程和动态适应的数据平面步骤</li><li>实现了两个目标：(1)减少LSM KVS中的延迟峰值;(2)在共享存储设置下实现每个应用的带宽保证</li><li>实验结果验证了该方法在综合和真实场景下的性能和适用性</li></ul><h2 id="Motivation-and-Challenges"><a href="#Motivation-and-Challenges" class="headerlink" title="Motivation and Challenges"></a>Motivation and Challenges</h2><p>当前系统内I/O优化的问题</p><h3 id="紧耦合的优化"><a href="#紧耦合的优化" class="headerlink" title="紧耦合的优化"></a>紧耦合的优化</h3><p><strong>问题描述</strong>：大多数I/O优化都是单一用途的，因为它们紧密集成在每个系统的核心中。实现这些优化需要对内核有了解，并熟悉内部代码。这就限制了它们的可维护性和跨系统的可移植性。例如，为了减少RocksDB的尾部延迟峰值，SILK提出了一个I/O调度器来控制前台和后台任务之间的干扰。在RocksDB中实现SILK的优化需要修改很多核心模块的代码。并且SILK也不容易实现在别的KVS(LevelDB,pebble)中。</p><p><strong>解决方案</strong>：解耦优化。I/O优化应该从系统的内部逻辑中分离出来，并转移到专用层，从而在不同的场景中变得普遍适用和可移植。</p><p><strong>挑战</strong>：刚性接口。解耦优化是有代价的，因为没有办法使用系统特定优化中存在的粒度和内部应用程序知识。具体来说，传统的I/O堆栈模型需要通过难以扩展的严格接口进行通信，从而丢弃了可用于对不同粒度级别的请求进行分类和区分的信息。例如，图1是一个由应用程序、KVS和POSIX兼容的文件系统组成的I/O堆栈。从KVS提交的POSIX操作来自不同的工作流，包括前台流(a)和后台流，比如flush(b)和compactions(c)。文件系统只能获取请求的大小和类型，所以无法推断该请求的起源。将SILK I/O调度器实现在文件系统和KVS之间移植性较高。然而，它将是无效的，因为它不能区分前台和后台操作。</p><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240315232733807.png" alt="image-20240315232733807"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">flush和compactions操作是什么样的。前台流和后台流举例子<br>为什么将SILK部署在文件系统之上就会是无效的了<br></code></pre></td></tr></table></figure><blockquote><p>每一层之间的接口调用都是严格的，上下层之间的信息不互通，所以调度的能力有限</p></blockquote><p><strong>解决方案</strong>：信息传播。application级别的信息必须在各个层之间传播，以确保解耦优化能够提供与系统特定优化相同级别的控制和性能。</p><p><strong>挑战</strong>：内核层。如果在内核中实现SILK(文件系统、块层)可以增加它适配的KVS个数，但是也有几个缺点。首先，为了将application的信息传播到每一个层，它需要破坏用户到内核层(即POSIX)和内核内部接口，从而降低可移植性和兼容性。并且内核开发更难。最后，这些优化在绕过内核的存储栈中是无效的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">POSIX是什么<br></code></pre></td></tr></table></figure><p><strong>解决方案</strong>：用户层实现。I/O优化应该只在用户层实现，可以跨不同系统和场景，并且需要简化信息在各层之间的传播</p><h3 id="partial-visibility-局部网格可见"><a href="#partial-visibility-局部网格可见" class="headerlink" title="partial visibility(局部网格可见)"></a>partial visibility(局部网格可见)</h3><p><strong>问题描述</strong>：单独实现的优化会忽略来自其他系统对相同存储资源的竞争。在共享基础设施(云计算、HPC)中，这个问题会导致冲突、I/O竞争以及应用程序和存储后端的性能变化。</p><p><strong>解决方案</strong>：全局控制。优化应该了解周围的环境并协调操作，以确保对I/O工作流和共享资源进行全面控制。</p><blockquote><p>就两个问题。</p><p>第一个问题是如何解耦，增加可移植性，适用性。以及解耦之后信息如何传递</p><p>第二个问题是信息如何在不同的应用程序之间共享</p></blockquote><h2 id="PAIO-in-a-Nutshell"><a href="#PAIO-in-a-Nutshell" class="headerlink" title="PAIO in a Nutshell"></a>PAIO in a Nutshell</h2><p>PAIO是一个框架，使系统设计人员能够构建定制的SDS数据平面步骤。在数据平面步骤中使用的PAIO服务于给定user-level层的workflows，支持对请求进行分类和区分，并根据用户定义的存储策略实施不同的存储机制。此类策略的示例可以简单到限制贪婪租户的速率以实现资源公平，也可以复杂到协调具有不同优先级的工作流以确保持续的尾部延迟。PAIO的设计基于五个核心原则。</p><h4 id="普遍适用性"><a href="#普遍适用性" class="headerlink" title="普遍适用性"></a>普遍适用性</h4><p>为了确保不同I/O层之间的适用性，PAIO的步骤从内部系统逻辑中分离出来。</p><h4 id="可编程构件"><a href="#可编程构件" class="headerlink" title="可编程构件"></a>可编程构件</h4><p>PAIO遵循解耦设计，将I/O机制与管理I/O的策略分开，并提供抽象，用于构建新的存储优化以应用于请求。</p><h4 id="细粒度的I-O控制"><a href="#细粒度的I-O控制" class="headerlink" title="细粒度的I/O控制"></a>细粒度的I/O控制</h4><p>PAIO对不同粒度级别的I/O请求进行分类、区分和强制执行。支持在I/O堆栈上应用一组广泛的策略。</p><h4 id="步骤协调"><a href="#步骤协调" class="headerlink" title="步骤协调"></a>步骤协调</h4><p>为了确保步骤之间能够协调地获取资源，PAIO公开了一个控制接口，使控制平面能够动态地使每个步骤适应新的策略和工作负载变化</p><h4 id="低修改性"><a href="#低修改性" class="headerlink" title="低修改性"></a>低修改性</h4><p>在I/O层上使用PAIO只需要很少的修改</p><h3 id="PAIO中的抽象"><a href="#PAIO中的抽象" class="headerlink" title="PAIO中的抽象"></a>PAIO中的抽象</h3><h4 id="Enforcement-object"><a href="#Enforcement-object" class="headerlink" title="Enforcement object"></a>Enforcement object</h4><p>Enforcement object是一种自包含的、单一用途的机制，它对传入的I/O请求应用自定义I/O逻辑。这种机制的例子包括：性能控制和资源管理(令牌桶和缓存)，数据转换(压缩和加密)，数据管理(数据预取、分层)。该抽象为系统设计人员提供了开发新机制(专门用于特定存储策略)的灵活性和可扩展性。</p><h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><p>Channel是请求流通过的抽象。每一个channel有一个或者多个Enforcement object(对同一组请求应用不同的机制)</p><p>以及将请求映射到要enforced的相应Enforcement object的differentiation rule </p><h4 id="Context-object"><a href="#Context-object" class="headerlink" title="Context object"></a>Context object</h4><p>Context object包括描述请求特征的原信息。它包括一组元素(分类器)l例如流ID(例如thread-ID)，请求类型(例如read, open, put, get)，请求大小和请求context.请求context用于描述请求的附加信息，比如确定其起源、背景等。对于每一个请求，PAIO会生成相关的Context object用于在各自的I/O机制上对请求进行分类、区分和强制执行</p><h4 id="Rule"><a href="#Rule" class="headerlink" title="Rule"></a>Rule</h4><p>在PAIO中，一条rule表示控制数据平面步骤状态的操作。rules由控制平面提交，分为三种类型：housekeeping rules管理内部步骤组织，differentiation rules分类和区分I/O请求，enforcement rules 根据工作负载变化调整enforcement object。</p><h3 id="High-level-Architecture"><a href="#High-level-Architecture" class="headerlink" title="High-level Architecture"></a>High-level Architecture</h3><p>图二展示了PAIO的高层架构。它遵循一种解耦设计，将在外部控制平面实现的策略与在数据平面阶段实现的执行策略的机制分离开来。PAIO的目标是用户级的I/O层。步骤嵌入在层中，拦截所有的I/O请求然后强制执行用户定义的规则。为了达到这个目标，PAIO由四个主要部分组成。</p><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240317195418962.png" alt="image-20240317195418962"></p><h4 id="Stage-interface"><a href="#Stage-interface" class="headerlink" title="Stage interface"></a>Stage interface</h4><p>应用程序通过stage接口进入stage，该接口在提交到下一个I/O层(文件系统)之前将所有请求路由到PAIO。对每一个请求，都会生成一个具有相应I/O分类器的Context object。</p><h4 id="Differentiation-moudle"><a href="#Differentiation-moudle" class="headerlink" title="Differentiation moudle"></a>Differentiation moudle</h4><p>区分模块根据请求的Context object对请求进行分类和区分。为了确保用细粒度来区分请求，我们使仅对层本身可访问的应用程序级信息能够传播到PAIO，从而扩大了可以执行的策略集。</p><h4 id="Enforcement-module"><a href="#Enforcement-module" class="headerlink" title="Enforcement module"></a>Enforcement module</h4><p>该模块负责在请求之间执行真正的I/O策略。它由channel和enforcement object 组成。对于每个请求，模块选择应该处理它的channel和enforcement object 。执行后，请求返回到原始数据路径并提交到下一个I/O层。(文件系统)</p><h4 id="Control-interface"><a href="#Control-interface" class="headerlink" title="Control interface"></a>Control interface</h4><p>PAIo提供了Control interface，允许控制平面(1)通过创建channels、enforcement objects和differentiation rules,来编排stage的生命周期，(2)通过持续监控和微调stage，确保所有政策得到满足。控制平面提供全局可视化，全面地控制所有的stages。暴露此接口允许由现有控制平面管理stages。</p><h3 id="A-Day-in-the-Life-of-a-Request"><a href="#A-Day-in-the-Life-of-a-Request" class="headerlink" title="A Day in the Life of a Request"></a>A Day in the Life of a Request</h3><p>PAIO如何服务一个工作流的。考虑图三所示的I/O堆栈，它由一个应用程序、RocksDB、一个PAIO阶段和一个posix兼容的文件系统组成。并且包含以下规则：限制RocksDB的flush操作速率为X MiB/s。RocksDB的背景流生成flush和compactions任务，在提交给文件系统之前会被转换成多种POSIX请求。flush被转换成write，conmpactions被转换成read和write。</p><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240317202819785.png" alt="image-20240317202819785"></p><p>开始阶段，RocksDB初始化PAIO stage，连接到已经部署的控制平面。控制平面提交 housekeeping rules，以创建一个channel和一个enforcement object，对X MiB的请求进行速率限制(白1)。它还提交区分规则(白2)，以确定stage应该处理哪些请求(基于flush的write)。</p><p>在执行阶段，RocksDB传播创建了给定操作的context(黑0)，并将所有写操作重定向到PAIO(黑1)。通过上一步可以确保旨在PAIO上强制执行写操作，通过使用 黑0 可以将带flush标记的写操作与其他可以由压缩作业触发的写操作区分开来。接下来stage选择要使用的channel，将请求入队，然后选择服务请求的enforcement object(将请求限制在XMiB/s)。执行请求之后，原写操作提交给文件系统。</p><p>控制平面会持续监事和微调数据平面stage。它定期从stage收集为该请求提供服务的吞吐量。根据该测量值，控制平面调整enforcement object来保证flush操作流的速度是X MiB/s，使用新的配置生成enforcement rules。</p><h2 id="I-O-Differentiation"><a href="#I-O-Differentiation" class="headerlink" title="I/O Differentiation"></a>I/O Differentiation</h2><p>PAIO的区分模块提供了在不同粒度级别(即每个工作流、请求类型和请求上下文)对请求进行分类和区分的方法。通过三个步骤区分请求</p><h4 id="Startup-Time"><a href="#Startup-Time" class="headerlink" title="Startup Time"></a>Startup Time</h4><p>开始的时候，用户定义如何区分请求以及谁应该处理每个请求。首先，它通过指定应该使用哪些I/O分类器来区分请求来定义区分的粒度。例如，为了区分每个workflow，PAIO只考虑Context’s workflow id分类器；而为了根据上下文和类型区分请求，它同时使用<em>request context</em>和<em>request type</em>分类器。其次，用户为每个通道设置特定的I/O分类器，以确定给定通道接收的请求集。表1提供了样例，channel1只接收来自flow1的流；channel2只处理background tasks生成的read请求；channel3接收来自flow5的压缩写请求。要生成将请求映射到通道的唯一标识符，可以将分类器连接到字符串或散列到固定大小的令牌中。这个流程可以被控制平面设置，或者在stage创建的时候被配置。</p><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240318092742856.png" alt="image-20240318092742856"></p><h4 id="Execution-time"><a href="#Execution-time" class="headerlink" title="Execution time"></a>Execution time</h4><p>第二阶段区分提交到stage的I/O请求，并将它们路由到要执行的各自通道。由两个步骤组成</p><p>==Channel selection==</p><p>对每一个请求(包含Context object)，PAIO选择必须要服务它的channel。PAIO验证Context的I/O分类器，并将请求映射到要执行的相应channel。这种映射区分过程根据第一阶段的描述完成。</p><p>==Enforcement object selection==</p><p>每一个channel可以包括多个enforcement objects，与channel选择类似，PAIO需要选择合适的object。对于每个请求，channel验证Context的I/O分类器并将请求映射到相应的enforcement object，然后enforcement object将使用它的I/O机制。</p><h4 id="Context-propagation"><a href="#Context-propagation" class="headerlink" title="Context propagation"></a>Context propagation</h4><p>一些I/O分类器(比如workflow id, request type and size)可以通过观察原始I/O请求访问。但是应用层的信息只能传递给提交I/O请求的层。operation context是这类信息的一个例子(如图1)，它允许确定给定请求的来源或上下文(它是前台流还是背景流，flush还是compaction或者其他的)。</p><p>因此，PAIO支持将附加信息从目标层传播到stage。利用了context propagation的技术，该技术使系统能够沿着执行路径传播context，并应用他们来确保对请求的细粒度控制。为了实现这一点，系统对目标层(该层可以访问信息)的数据路径进行测量，并通过进程的地址空间、共享内存或线程局部变量使其对stage可用。这些信息都在创建Context object时被request context 分类器包含。如果不使用此方法传播context,则需要在找到信息的位置和将信息提交到stage之间更改所有核心模块和函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">目标层是什么？<br></code></pre></td></tr></table></figure><p>例如图3的I/O栈，为了确定RocksDB后台工作流提交的POSIX操作的来源，系统设计人员测量了RocksDB负责管理flush或compaction作业(黑0)的关键路径，以捕获它们的上下文。接下来信息被传播到stage interface，在该接口中使用所有的I/O分类器(包括请求上下文)创建Context object，并将其提交到stage。</p><blockquote><p>这里面是在RocksDB中捕获上下文？</p></blockquote><p>请注意，此步骤是可选的，因为对于不需要强制执行附加信息的策略，可以跳过此步骤</p><h2 id="I-O-Enforcement"><a href="#I-O-Enforcement" class="headerlink" title="I/O Enforcement"></a>I/O Enforcement</h2><p>Enforcemnet 模块为开发用于请求的I/O机制提供构建块。它由几个通道组成，每个通道包含一个或多个enforcement object。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">为什么一个channel有多个enforcement <span class="hljs-keyword">object</span>？<br></code></pre></td></tr></table></figure><p>如图3所示，请求被移动到被选择的channel然后放置到SQ(黑3)。对于每个出队的请求，PAIO选择合适的enforcement object(黑4)然后应用其I/O机制(黑5)。相关的I/O机制有令牌桶、缓存、加密方案等等。由于有几种机制可以改变原始请求的状态，例如数据转换(例如，加密、压缩)，在此阶段，enforcement object生成一个Result，该Result封装了请求的更新版本，包括其内容和大小。然后将Result对象返回给stage接口，stage接口对其进行解组、检查并将其路由到原始数据路径(黑6)。这个流程之后，PAIO确保该请求符合具体政策的目标。</p><h4 id="Optimizations"><a href="#Optimizations" class="headerlink" title="Optimizations"></a>Optimizations</h4><p>根据所采用的的策略和机制，PAIO可以仅使用它们的I/O分类器强制执行请求。虽然数据转换直接适用于请求内容，但性能驱动机制(如令牌桶和调度器)只需要强制执行特定的请求元数据(例如，类型、大小、优先级、存储路径)。为了防止增加系统执行的开销，PAIO允许仅在必要时将请求的内容复制到stage的执行路径中.</p><h2 id="PAIO-Interfaces-and-Usage"><a href="#PAIO-Interfaces-and-Usage" class="headerlink" title="PAIO Interfaces and Usage"></a>PAIO Interfaces and Usage</h2><p>现在我们详细介绍PAIO如何与I/O层和控制平面交互，如何在用户级层中集成PAIO，以及如何构建enforcement objects.</p><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><h4 id="Stage-interfaces"><a href="#Stage-interfaces" class="headerlink" title="Stage interfaces"></a>Stage interfaces</h4><p>PAIO提供了一个application的可编程接口，用于在I/O层和PAIO的内部机制中建立联系。如表2描述的，它提供两个功能：paio_init初始化一个stage，连接控制平面和stage内部的管理，同时定义workflows应该被如何处理，enforce拦截来自层的请求，并根据相关的Context object将它们路由到Stage。enforce 请求之后，Stage输出Result，然后层恢复原始路径。</p><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240318143600455.png" alt="image-20240318143600455"></p><h4 id="Control-interface-1"><a href="#Control-interface-1" class="headerlink" title="Control interface"></a>Control interface</h4><p>Stage和控制平面的交互主要由五个调用支持，如图二所示。stage_info会返回stage相关的信息（包括stage identifier和process identifier (PID)）。基于rule的调用用于管理和调优数据平面阶段。Housekeeping rules (hsk_rule) 管理stage的生命周期(例如，创建channel和and enforcement objects)。differentiation rules (dif_rule) 映射请求到channels和enforcement objects。enforcement rules (enf_rule)根据工作负载和策略变化动态调整给定enforcement object(id)的内部状态(s)。控制平面使用collect调用监视stages，它收集所有工作流的关键性能指标(例如，IOPS，带宽)，并可用于调整数据平面stage.</p><p>该接口允许控制平面定义PAIO stage如何处理I/O请求。然而，与数据平面阶段的可靠性相关的问题，以及冲突策略的解决是控制平面的责任[38]，因此与本文是正交的</p><h3 id="Integrating-PAIO-in-User-level-Layers"><a href="#Integrating-PAIO-in-User-level-Layers" class="headerlink" title="Integrating PAIO in User-level Layers"></a>Integrating PAIO in User-level Layers</h3><p>将I/O层移植到使用PAIO阶段可能需要几个步骤。</p><h4 id="Using-PAIO-with-context-propagation"><a href="#Using-PAIO-with-context-propagation" class="headerlink" title="Using PAIO with context propagation"></a>Using PAIO with context propagation</h4><p>为了将stage集中到层中，需要：</p><ol><li>在目标层创建stage，使用paio_init</li><li>检测关键数据路径，其中层级信息是可访问的，并在Context object创建时将其传播到Stage。这可能需要创建额外的数据结构</li><li>创建将与请求一起提交到Stage的Context object。包括workflow id, request type和size，并且传播信息</li><li>对在提交给下一层之前需要在Stage强制执行的I/O操作添加enforce调用。比如，为了enforce给定层的POSIX read 操作，所有read都需要先被提交到PAIO在提交到文件系统</li><li>通过检查从enforce返回的Result对象来验证请求是否成功enforced，并恢复执行路径</li></ol><h4 id="Using-PAIO-transparently"><a href="#Using-PAIO-transparently" class="headerlink" title="Using PAIO transparently"></a>Using PAIO transparently</h4><p>如果不需要context 传播，PAIO stages可以在I/O层(应用层和文件系统)中透明的使用。PAIO公开了面向层的接口(如POSIX)，并使用LD_PRELOAD将顶层的原始接口调用(如应用程序调用的读写calls)替换为在提交给底层之前首先提交给PAIO的接口调用(如文件系统)。每个支持的调用定义了创建Context object，将请求提交到stage，验证Result和调用原始I/O的逻辑。这使得层可以使用PAIO而无需更改任何代码行。</p><h3 id="Building-Enforcement-Objects"><a href="#Building-Enforcement-Objects" class="headerlink" title="Building Enforcement Objects"></a>Building Enforcement Objects</h3><p>PAIO使用简单的API创建enforcement objects。如表2所示</p><ul><li>obj_init：创建具有初始状态的enforcement object，包括其类型和初始配置。</li><li>obj_config：提供调优旋钮，以使用新状态更新enforcement object的内部设置。这使控制平面能够动态地使其适应工作负载变化和新策略。</li><li>obj_enf：实现应用于请求的实际I/O逻辑。在应用完它的逻辑之后会返回Result，其中包含请求(r)的更新版本。它还接收一个Context object(ctx)，该对象用于对I/O请求采取不同的操作</li></ul><p>默认情况下，PAIO保持目标系统的操作逻辑(例如排序，错误处理等)，因为提交给PAIO的enforcement object和操作都遵循同步模型。虽然可以开发成异步的，但是是要保证正确性和容错性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">这里的同步和异步是什么意思<br></code></pre></td></tr></table></figure><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>用了9K行C++代码实现。PAIO针对用户级别的层，允许构建新的stage实现和简单的集成，只需要更改少量代码</p><h3 id="Enforcement-objects"><a href="#Enforcement-objects" class="headerlink" title="Enforcement objects"></a>Enforcement objects</h3><p>实施了两种enforcement object。Noop实现了一种传递机制，该机制将请求的内容复制到Result对象，而不需要进行额外的数据处理。Dynamic rate limiter (DRL) 实现了一个令牌桶来控制I/O工作流的速率和突发性。该令牌桶设置了最大token容量(size)和补充桶的周期(fill period)。桶处理请求的速率以令牌/s表示。调用obj_init的时候，桶的这两个变量会被初始化。调用obj_config的时候，rate(r)会根据介于r和fill period之间的函数改变size的大小。对于每一个请求，obj_enf验证context’s size分类器然后计算消耗的token数量。token不够的话，请求就等待。为了演示PAIO的I/O机制的可移植性和可维护性，我们在由不同层和目标组成的两个用例上应用了DRL对象。</p><h3 id="I-O-cost"><a href="#I-O-cost" class="headerlink" title="I/O cost"></a>I/O cost</h3><p>我们认为请求的成本是恒定的，例如，读或写请求的每个字节代表一个令牌。尽管成本取决于几个因素(例如，工作负载、类型、缓存命中)，但我们不断校准令牌桶，使其速率收敛于策略目标。实验结果显示该方法在场景中很适用，因为桶的速率在与控制平面的少量交互中收敛。确定I/O成本是后续工作。</p><h3 id="Statistics-communication-and-differentiation"><a href="#Statistics-communication-and-differentiation" class="headerlink" title="Statistics, communication, and differentiation"></a>Statistics, communication, and differentiation</h3><p>PAIO在Channel中实现每个工作流统计计数器，以记录截获请求的带宽、操作数量和收集周期之间的平均吞吐量。控制平面与stages的通信是通过UNIX Domain Sockets实现的。为了创建唯一标识符把请求映射到channels和enforcement objects，使用了MurmurHash3哈希方案，该方案将分类器哈希到固定大小的令牌中。</p><h3 id="Context-propagation-1"><a href="#Context-propagation-1" class="headerlink" title="Context propagation"></a>Context propagation</h3><p>为了在每个层中传播信息，使用了共享map，索引是workflow identifier(例如，thread-id)，存储正在提交的请求的Context</p><h3 id="Transparently-intercepting-I-O-calls"><a href="#Transparently-intercepting-I-O-calls" class="headerlink" title="Transparently intercepting I/O calls"></a>Transparently intercepting I/O calls</h3><p>PAIO使用LD_PRELOAD来拦截POSIX调用，并将它们路由到Stage或内核。它支持read和write调用，包括不同的变体(例如，pread，pwrite64)。我们发现，支持这组调用足以执行面向数据的策略。我们将其他调用和接口(例如，KVS，对象存储)的支持推迟到未来的工作中。</p><h3 id="Control-plane"><a href="#Control-plane" class="headerlink" title="Control plane"></a>Control plane</h3><p>我们使用3.6K行代码构建了一个简单但功能齐全的控制平面，用于为本文的两个用例执行策略。策略以控制算法的形式实现。为了校准enforcement objects，除了Stage统计数据外，它还从/proc文件系统收集目标层生成的I/O指标。具体来说，它检查读字节和写字节I/O计数器，这些计数器表示块层读/写出去/进来的字节数，并将它们与阶段统计数据进行比较，以收敛到目标性能目标</p><h2 id="Use-Cases-and-Control-Algorithms"><a href="#Use-Cases-and-Control-Algorithms" class="headerlink" title="Use Cases and Control Algorithms"></a>Use Cases and Control Algorithms</h2><p>我们现在给出两个用例，展示了PAIO对不同应用程序和性能目标的适用性</p><h3 id="Tail-Latency-Control-in-Key-Value-Stores"><a href="#Tail-Latency-Control-in-Key-Value-Stores" class="headerlink" title="Tail Latency Control in Key-Value Stores"></a>Tail Latency Control in Key-Value Stores</h3><p>LSM KVSs(例如RocksDB)使用前台流来参加客户端请求，这些请求以FIFO顺序排队和服务。后台流服务于内部操作，即冲洗和压缩。Flush顺序地写入树的第一层(L0)，只有当有足够的空间时才继续执行。压缩保存在FIFO队列中,等待专用线程池执行。除了低级别压缩(L0 to L1)，这些都可以并行进行。然而，它们的一个常见问题是I/O工作流之间的干扰，从而会导致客户端请求产生延迟峰值。当由于L0 to L1压缩和刷新缓慢或暂停而无法进行刷新时，会出现延迟峰值。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">RocksDB具体的工作流程是什么样子的？ foreground flows和background flows的区别<br></code></pre></td></tr></table></figure><h4 id="SILK"><a href="#SILK" class="headerlink" title="SILK"></a>SILK</h4><p>SILK是一个基于RocksDB的KVS，他通过使用IO调度器来防止这种情况。当客户端负载较低时，为内部操作分配带宽(优先刷新和低级别压缩，因为它们影响客户端延迟)，用低级别压缩抢占高级别压缩。通过下面的控制算法实现，由于这些KVSs被嵌入，KVS I/O带宽被限定在给定的速率(KVSB)。它监控客户端额带宽(Fg)，并将剩余带宽(leftB)分配给内部操作(IB)，IB = KVSB−Fg.SILK使用RocksDB的速率限制器限制IB。Flushes和L0 to L1的压缩具有高优先级，并提供最小的I/O带宽(minB)。高级别压缩优先级较低，并且可以被随时停止。为所有的压缩都共享同一个线程池，所以有可能在某个时候，所有的线程都在处理高级的压缩。因此，SILK会抢占其中一个来执行低级压缩。</p><p>SILK改变了很多RocksDB的内部操作。此外，将这些优化移植到其他同样从中受益的KVS，如LevelDB[21]和pebble[47]，需要深入的系统知识和大量的重新实现工作。</p><h4 id="PAIO"><a href="#PAIO" class="headerlink" title="PAIO"></a>PAIO</h4><p>我们发现可以通过编排I/O workflows来实现这些优化，而不是修改RocksDB引擎。因此我们应用SILK的设计原则如下：PAIO数据平面Stage提供I/O机制，用于对后台流进行优先级排序和速率限制，而控制平面重新实现I/O调度算法来编排Stage。</p><p>Stage会拦截所有RocksDB的 workflows。我们将与文件系统交互的每个RocksDB线程视为一个工作流。Channel通过workflow id进行分类。我们使用RocksDB来传播创建给定操作时的context，即刷新(flush)或压缩(例如，compaction_L0_L1)。监控前台流以收集客户端带宽(Fg)。后台流被路由到由DRL对象组成的通道。Fiushed流单独设置通道。由于具有不同优先级(高和低)的压缩可以流经同一通道，因此每个通道包含两个以不同速率配置的DRL对象。通过request context分类器区分enforcement object，并使用第5节中描述的优化来强制执行请求。PAIO还收集刷新(Fl)、低级别压缩(L0)和高级别压缩(LN)的带宽。</p><p>控制平面实现了SILK调度算法的控制部分(如算法1所示)。它使用一个反馈控制回路执行以下步骤。1. 收集stage的数据，计算盘的剩余带宽(leftB)并分配到内部操作。并给后台流设置了一个最低带宽。并根据优先级分配leftB。如果两个高优先级的任务都正在执行，它会为它们分配相同份额的leftB，同时确保高级压缩保持流动(minB)，防止低级压缩在队列中阻塞。如果只有一个高优先级的任务正在执行，则将left tb分配给它，将minB分配给其他任务。如果没有高优先级的任务正在执行，则将剩余的tb预留给低优先级的任务。然后，它生成并提交enf_rules，以调整每个enforcement object的比率。对于低优先级的压缩，所有DRL对象均分BLN。由于高优先级压缩是顺序执行的，它将BL0分配给各自的对象。比率BFl分配给负责flushes的对象。</p><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240318214126023.png" alt="image-20240318214126023"></p><h4 id="集成到RocksDB"><a href="#集成到RocksDB" class="headerlink" title="集成到RocksDB"></a>集成到RocksDB</h4><p>在RocksDB中集成PAIO只需要添加85个LoC(表3)</p><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240318215234069.png" alt="image-20240318215234069"></p><ol><li>初始化PAIO stage并创建额外的结构来标识每个工作流正在执行的任务(10LoC)</li><li>检测RocksDB的内部线程池，用于标识运行flush和compaction作业的工作流(17LoC)。为了区分压缩操作的高低优先级，我们检测了创建压缩操作的代码。对于每个job，我们验证其级别并使用工作流将要执行的任务(compaction_L0_L1)更新结构(30LoC)。</li><li>根据 workflow id，request type，context和size I/O分类器创建Context.(7LoC)</li><li>提交所有读和写calls到Stage(17LoC)</li><li>Verify the Result of the enforcement(4LoC)</li></ol><h3 id="Per-Application-Bandwidth-Control"><a href="#Per-Application-Bandwidth-Control" class="headerlink" title="Per-Application Bandwidth Control"></a>Per-Application Bandwidth Control</h3><p>ABCI超级计算机是在人工智能和高性能计算工作负载融合的基础上设计的。上面经常运行tensorFlow框架。为了执行TensorFlow作业，用户可以保留一个完整的节点或它的一小部分(即，作业并发执行)。通过Linux的cgroups将节点划分为资源隔离实例。每个实例对CPU内核、内存空间、GPU和本地存储配额具有独占性。但是本地的磁盘带宽还是共享的，每个作业之间会竞争带宽，导致I/O干扰和性能变化。即使块I/O调度器是公平的，也会为所有实例提供相同的服务级别，从而防止分配不同的优先级。</p><p>使用cgroups的块I/O控制器(blkio)允许对每个实例的读写操作进行静态速率限制。但是在ABCI中，一旦速率被设置，就无法动态更改，因为它需要停止作业、调整所有组的速率并重新启动作业，就总体执行时间而言，这是非常昂贵的。所以当一个job停止的时候，就会有带宽浪费。</p><h4 id="PAIO-1"><a href="#PAIO-1" class="headerlink" title="PAIO"></a>PAIO</h4><p>为了解决上述问题，我们使用一个PAIO Stage来在每个实例中实现动态速率限制工作流的机制，同时控制平面实现了比例共享算法，确保所有实例都符合各自的策略。</p><p>我们的用例侧重于模型训练阶段，其中每个实例运行一个tensorflow作业，该作业使用单个工作流从文件系统读取数据集文件。TensorFlow的read 请求被调度到Stage,其中包含一个带有DRL enforcement object的Channel。通过5中描述的优化来强制执行请求。</p><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240318222150329.png" alt="image-20240318222150329"></p><p>控制平面使用一个max-min公平算法来保障每个应用的带宽（如算法2），该算法常用于资源公平策略。总体可用磁盘带宽(MaxB)和每个应用程序的带宽需求(demand)由系统管理员或负责管理不同作业实例资源的机制预先定义。该算法也使用了反馈路径。1. 控制平面从每个活动实例的阶段收集统计信息(1)，以及每个TensorFlow作业生成的带宽(在/proc处收集)。2. 计算每个活动实例的rate(3-10)。如果一个实例的需求低于其公平份额，控制平面将分配其需求。如果实例的需求小于其公平份额，则控制平面分配其需求(4-5)，否则分配公平份额(7)。然后将剩余带宽在实例中分配(9-10)。然后，它在Ii和ratei的函数中校准每个实例的速率，生成要提交到每个阶段的最终规则(11)。然后等待下一个周期被调用。</p><h3 id="集成到tensorFlow"><a href="#集成到tensorFlow" class="headerlink" title="集成到tensorFlow"></a>集成到tensorFlow</h3><p>如表3所示，集成到TensorFlow不需要代码改变。使用LD_PRELOAD来拦截TensorFlow的读写请求，然后重定向到PAIO。所有支持的调用都实现了执行请求所需的逻辑。</p><h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><p>我们的评估旨在证明PAIO的性能，以及它在不同情况下执行政策的能力和可行性。结果显示</p><ul><li>通道数越多，吞吐量越多，延迟越低</li><li>它可用于在具有不同要求的不同 I/O 层上实施策略</li><li>通过该数据平面 Stage传播应用层信息，PAIO 在尾部延迟方面比RocksDB高出4倍，同时支持与SILK类似的控制和性能</li><li>当不需要内部系统知识时，PAIO 可以在不更改应用程序的情况下实施策略。通过具有全局可见性，它可以始终提供每个应用程序的带宽保证，并与静态速率限制方法相比，缩短了总体执行时间。</li></ul><p>==实验设置==</p><img src="./images/PAIO总结/image-20240319000105869.png" alt="image-20240319000105869" style="zoom:67%;" /><h3 id="PAIO-Performance-and-Scalability"><a href="#PAIO-Performance-and-Scalability" class="headerlink" title="PAIO Performance and Scalability"></a>PAIO Performance and Scalability</h3><p>我们开发了一个基准测试，用于模拟向 PAIO  Stage提交请求的应用程序。它通过实例的强制调用在闭环中生成和提交多线程请求，在不同数量的客户端（例如工作流）和请求大小下。请求大小和客户端线程数分别介于 0 – 128KiB 和 1 – 128 之间。每个客户端提交100M的请求。PAIO  Stage配置了不同数量的Channel（与客户端线程的数量相匹配），每个通道都包含一个 Noop enforcement object，该对象将请求的缓冲区复制到result object。所有报告的结果都是至少 10 次运行的平均值，标准偏差保持在 5% 以下。</p><h4 id="IOPS-and-Bandwidth"><a href="#IOPS-and-Bandwidth" class="headerlink" title="IOPS and Bandwidth"></a>IOPS and Bandwidth</h4><img src="./images/PAIO总结/image-20240319001825981.png" alt="image-20240319001825981" style="zoom:67%;" /><p>图 4 描述了相对于单个通道的累积 IOPS 比率。0B代表context-only请求，如第5节所示。标有 ∗ 和 + 的结果分别在配置 A 和 B 下进行。</p><p>对于配置A，在 0B∗ 请求大小下，单个 PAIO 通道的平均吞吐量为 3.05 MOps/s，延迟为 327 ns。由于工作负载受 CPU 限制，因此性能不会线性扩展，因为客户端线程会争用处理时间。在128 channel，实现了97.4MOps/s的累积吞吐量性能提升了31倍。随着请求大小的增加，PAIO 处理的总字节数也会增加。当配置了128个Channel，可以以384GB/s的速率处理 128KB∗大小的请求。对于单channel来说，PAIO处理 1KB∗ 2.1GBps和128KB* 11.7GBps。对于配置B来说，由于是新的内核版本，所以PAIO的吞吐量更高。</p><h4 id="Profiling"><a href="#Profiling" class="headerlink" title="Profiling"></a>Profiling</h4><p>我们测量了主执行路径中出现的每个 PAIO 操作的执行时间。根据硬件配置，上下文对象创建需要 17 到 19 ns，而通道和强制对象选择需要 85 到 89 ns 才能完成（每个）。配置 0B 和 128KiB 请求大小时，obj_enf持续时间范围在 20 ns 到 8.45 μs 之间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">obj_enf的具体操作<br></code></pre></td></tr></table></figure><h4 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h4><p>结果表明，PAIO具有较低的开销，因为它是作为用户空间库提供的，不需要昂贵的上下文切换操作。我们预计开销的主要来源将始终取决于对请求应用的 enforcement object 的类型。对于本文用例中使用的 enforcement object（§9.2 – §9.3），我们没有观察到明显的性能下降。</p><h3 id="Tail-Latency-Control-in-Key-Value-Stores-1"><a href="#Tail-Latency-Control-in-Key-Value-Stores-1" class="headerlink" title="Tail Latency Control in Key-Value Stores"></a>Tail Latency Control in Key-Value Stores</h3><p>现在我们将演示PAIO如何在几种工作负载下实现尾部延迟控制。我们比较了RocksDB,Auto-tuned SILK, PAIO</p><h4 id="System-configuration"><a href="#System-configuration" class="headerlink" title="System configuration"></a>System configuration</h4><p>实验在硬件配置B下使用NVMe SSD。所有系统都按如下方式进行调优。memtable-size的值设置为128MB。使用8个线程服务客户端操作，8个背景线程，1个分给flush，7个分给compactions。内部操作的最低带宽阈值设置为10MBps。为了简化结果，关闭了压缩和提交日志的记录。所有实验均采用db bench基准测试。在SILK测试中，我们将内存使用限制为1GB, I/O带宽限制为200MiB/s。</p><h4 id="Workloads"><a href="#Workloads" class="headerlink" title="Workloads"></a>Workloads</h4><p>我们专注于由突发客户端组成的工作负载，以便更好地模拟生产中的现有服务。客户端请求通过波峰和波谷的组合在一个闭环中发出。初始谷持续300秒，以5kops/s的速度提交操作，并用于执行KVS内部积压。峰值持续100秒，发送速率是20kops/s，后面紧接10秒的5kops谷值。所有数据存储都预加载了100M键值对，使用统一的键分布、8B个键和1024B个值。</p><p>我们使用了读写不同比例的三种工作负载。Mixture负载示常用的YCSB工作负载(工作负载 A)，并提供与Nutanix生产工作负载相似的比率。Read-heavy提供了与Facebook类似的操作比率。为了展示一个全面的测试平台，还包含一个write-heavy工作负载。对于每个系统，工作负载在1小时内执行三次，使用统一的密钥分布。只展示前20min的内容。图5-9描述了所有系统和工作负载的吞吐量和第99百分位延迟。理论客户端的负载以红色虚线表示。平均吞吐量显示为虚线。</p><h4 id="Mixture-workload"><a href="#Mixture-workload" class="headerlink" title="Mixture workload"></a>Mixture workload</h4><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240319094807796.png" alt="image-20240319094807796"></p><p>如图5所示，由于加载阶段的累积积压，所有系统中实现的吞吐量与理论客户机负载不匹配。RocksDB由于持续的flush和低级别的压缩操作，尾部延迟较高。Auto-tuned的吞吐量下降。SILK会周期性经历吞吐量下降。PAIO能提供和SILK类似的平均吞吐量。</p><h4 id="Read-heavy-workload-图6"><a href="#Read-heavy-workload-图6" class="headerlink" title="Read-heavy workload 图6"></a>Read-heavy workload 图6</h4><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240319095452015.png" alt="image-20240319095452015"></p><p>吞吐量方面，所有系统执行相同。在400秒之后，SILK暂停高级别压缩，并实现12毫秒之间的尾部延迟。通过抢占高级压缩并通过与flush相同的线程池为低级压缩提供服务，它可以确保高优先级的任务很少停滞</p><h4 id="Write-heavy-workload-图7"><a href="#Write-heavy-workload-图7" class="headerlink" title="Write-heavy workload 图7"></a>Write-heavy workload 图7</h4><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240319100120781.png" alt="image-20240319100120781"></p><p>写密集型工作负载会产生大量的后台任务积压，导致RocksDB出现高延迟峰值。Auto-tuned限制了所有后台写入，减少了延迟峰值，但在几个时间段内仍然超过5毫秒。SILK暂停高级别压缩，值服务高优先级任务。在PAIO中，由于flush发生得更频繁，控制平面更大幅度地降低了高级压缩的速度，这导致低级压缩在压缩队列中暂时停止，等待执行。PAIO和SILK之间的吞吐量差异是由后者抢占高级压缩来证明的，正如在read-heavy的工作负载中所描述的那样.</p><h4 id="Mixture-workload-without-rate-limiting-图8，9"><a href="#Mixture-workload-without-rate-limiting-图8，9" class="headerlink" title="Mixture workload without rate limiting 图8，9"></a>Mixture workload without rate limiting 图8，9</h4><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240319101127469.png" alt="image-20240319101127469"></p><p>该实验中，KVS可以获得设备的所有带宽。设置KVSB参数值接近设备的限制。Auto-tuned的结果和图5相似。</p><p>图8中，由于累积的积压，所有系统的吞吐量性能都很差，平均为7.46 kops/s (RocksDB)， 7.52 kops/s (SILK)和8.88 kops/s (PAIO)。在加载阶段，直到完成累积的积压(0.400秒)，RocksDB经历了长时间的高尾部延迟，峰值为111毫秒。之后，它观察到由于持续刷新和低级别压缩而产生的延迟峰值，其值在15 - 60毫秒之间。SILK和PAIO表现出更持久的延迟性能，在整个观察期内从未超过25毫秒。吞吐量方面，两个系统都观察到由于累积的积压而周期性下降。PAIO恢复得更快。因为PAIO不能抢占压缩，所以它为低优先级的压缩保留了更多的带宽(比SILK多)，从而确保高优先级的任务不必等待执行。因此，PAIO采用主动方法将带宽分配给压缩，而SILK采用被动方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">累积积压为什么会导致吞吐量下降<br></code></pre></td></tr></table></figure><p>图9显示了在NVMe中的结果。所有系统的吞吐量表现都很好。RocksDB遵循与理论客户端负载相似的性能曲线。原因有两个，首先，它在初始谷期间完成所有累积的积压(以高尾部延迟为代价)，这在剩余执行中得到了积极的反映(即没有观察到明显的性能损失)。其次，由于NVMe设备比SSD设备具有更高的吞吐量性能和并行性，因此RocksDB实现了更持久的性能。在初始谷之后，RocksDB观察到由于频繁刷新和低级别压缩，延迟峰值在7 - 15毫秒之间。与前面的结果类似，两个系统都会经历周期性的吞吐量下降。</p><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>我们证明，通过微小的代码更改，PAIO在尾部延迟方面的性能比RocksDB高出最多4倍，并且能够实现与SILK相似的控制和性能，而后者需要对原始代码库进行深入的重构。</p><h3 id="Per-Application-Bandwidth-Control-1"><a href="#Per-Application-Bandwidth-Control-1" class="headerlink" title="Per-Application Bandwidth Control"></a>Per-Application Bandwidth Control</h3><p>现在我们将演示在共享存储场景下，PAIO如何确保每个应用程序的带宽保证。我们的设置是由ABCI超级计算机的需求驱动的</p><h4 id="System-configuration-1"><a href="#System-configuration-1" class="headerlink" title="System configuration"></a>System configuration</h4><p>使用硬件配置A。每个实例使用专用GPU和数据集运行，其内存限制为32GB。磁盘总带宽限制为1GiB/s。在任何时候，一个节点最多执行四个实例，在CPU、GPU和RAM方面具有相同的资源共享。每个实例执行一个TensorFlow作业，分配一个带宽策略，并执行给定数量的训练epoch。实例1到实例4的带宽保证值分别为150、200、300和350 MiB/s，并分别执行6、5、5、4个训练周期。</p><h4 id="setups"><a href="#setups" class="headerlink" title="setups"></a>setups</h4><p>实验在三种设置下进行。Baseline表示ABCI超级计算机支持的当前设置;所有实例在没有带宽保证的情况下执行。Blkio使用Blkio[2]强制带宽限制。在PAIO中，每个实例执行一个动态执行指定带宽目标的PAIO Stage。图10描述了每个设置中所有实例每隔1秒的I/O带宽。实验包括七个阶段，每个阶段标记一个实例开始或完成其执行</p><p><img src="/images/PAIO%E6%80%BB%E7%BB%93/image-20240319111125457.png" alt="image-20240319111125457"></p><h4 id="Baseline"><a href="#Baseline" class="headerlink" title="Baseline"></a>Baseline</h4><p>实验在52min之内完成。一直均分</p><h4 id="Blkio"><a href="#Blkio" class="headerlink" title="Blkio"></a>Blkio</h4><p>95min之内完成。不能动态地提供可用的磁盘带宽，从而导致更长的执行周期</p><h4 id="PAIO-2"><a href="#PAIO-2" class="headerlink" title="PAIO"></a>PAIO</h4><p>56min之内完成。可以共享剩余带宽。</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><p>==SDS systems==</p><p>所有系统都针对特定的I/O层，因为它们的设计与它们所应用的软件堆栈的体系结构和特性紧密耦合并受其驱动。相比之下，PAIO从特定的软件堆栈分解，使开发人员能够构建适用于不同用户级层的定制数据平面阶段，而无需对代码进行微小更改。我们通过在两个不同的I/O层(第8节)上集成PAIO来演示这一点。以前的工作也无法执行8.1中展示的策略，因为它们不提供上下文传播，从而抑制了更细粒度的请求区分(即前台任务、高优先级任务和低优先级后台任务)。此外，这些也不适合实现8.2中展示的策略，因为像[31,52,54]这样的解决方案不能在需要裸机访问资源的场景下使用，例如HPC基础设施和裸机云服务器。</p><p>==Context propagation==</p><p>==Storage QoS==</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>D2FQ总结</title>
    <link href="/2024/03/13/D2FQ%E6%80%BB%E7%BB%93/"/>
    <url>/2024/03/13/D2FQ%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="D2FQ-Device-Direct-Fair-Queueing-for-NVMe-SSDs"><a href="#D2FQ-Device-Direct-Fair-Queueing-for-NVMe-SSDs" class="headerlink" title="D2FQ: Device-Direct Fair Queueing for NVMe SSDs"></a>D2FQ: Device-Direct Fair Queueing for NVMe SSDs</h1>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Aequitas总结</title>
    <link href="/2024/03/13/Aequitas%E6%80%BB%E7%BB%93/"/>
    <url>/2024/03/13/Aequitas%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Aequitas-Admission-Control-for-Performance-Critical-RPCs-in-Datacenters"><a href="#Aequitas-Admission-Control-for-Performance-Critical-RPCs-in-Datacenters" class="headerlink" title="Aequitas: Admission Control for Performance-Critical RPCs in Datacenters"></a>Aequitas: Admission Control for Performance-Critical RPCs in Datacenters</h1><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p><img src="/images/Aequitas%E6%80%BB%E7%BB%93/image-20240313184932130.png" alt="image-20240313184932130"></p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Aequitas在RPC层实现，上层是应用程序，下层是网络层或者传输层。与拥塞控制算法不冲突。并且利用商品交换机中的WFQ。</p><p>应用程序发出RPC的时候注释优先级，并将该优先级类映射到请求的QoS类。<u>每当一个RPC完成之后，Aequitas计算它的RNL然后反馈到admission control algorithm。之后对比RNL的SLO目标和RNL的真实值，algorithm会为RPC运行时所在的QoS调整每个destination-host允许的流量</u>。admission control在所有主机之间以完全分布式的方式执行。</p><p>Aequitas使用admit probability来确定RPC是否应该在该QoS级别或者降级到较低的QoS级别。降级信息被显式通知回应用程序，作为调整其RPC优先级的提示</p><h2 id="计算分析-网络验算"><a href="#计算分析-网络验算" class="headerlink" title="计算分析 网络验算"></a>计算分析 网络验算</h2><p>RPC网络延迟由带宽和排队延迟决定。本节提供了一个理论特征，该理论指导Aequitas的设计：，通过控制WFQ实现的各自QoS上允许的流量来控制跨优先级类的RPC网络延迟从而提供差异化的slo。</p><h3 id="WFQ-带宽和排队延迟分析"><a href="#WFQ-带宽和排队延迟分析" class="headerlink" title="WFQ 带宽和排队延迟分析"></a>WFQ 带宽和排队延迟分析</h3><p>WFQ能够帮助维持RNL SLOs.</p><p><img src="/images/Aequitas%E6%80%BB%E7%BB%93/image-20240313185519732.png" alt="image-20240313185519732">代表N个QoS，和WFQs的权重一一对应。每个QoS的最低保障提交率是$g_i$.$g_i={\frac{\phi_i}{\sum_j\phi_i}r}$，假设i越小，WFQ的权重越大。如果对QoS类的瞬时需求低于$g_i$，那么该QoS类对应的流不会受到排队延迟干扰。相应地，当其他QoS类的总需求低于其带宽份额时，某个QoS类的带宽份额可能会超过上述速率。</p><p>延迟的QoS可以描述为一个关于其自身队列长度的函数，独立于其他QoS级别的队列长度和请求到达情况。当发送方受到漏桶速率限制器约束时，计算最坏情况下的排队延迟是可行的。在此基础上，我们使用网络演算概念来计算QoS类中给定不同利用率水平的延迟界。定义QoS类i的到达速率是$a_i$，所有QoS类的到达速率总和是a.</p><p><img src="/images/Aequitas总结/image-20240313191731202.png" alt="image-20240313191731202" style="zoom:70%;" />我们的分析显示了QoS-mix在过载情况下如何影响WFQ的每个qos延迟界.定义$QoS_i-share$为QoS-mix中的第i个元素。该分析可以为给定的QoS-mix提供延迟边界，但是封闭形式的方程仅限于两个QoS级别。</p><p>假定x是QoS-mix中的$QoS_h-share$,其值是$a_h/a$.那么$QoS_l-share$的值就是1-x. $QoS_h:QoS_l$是${\phi}:1$​。如下图所示，将整个发送周期定义为一个时间单位。流量用突发参数ρ表示，是下图中黑色曲线的斜率，ρ大于1。为了稳定，存在一个空闲阶段，使得该周期内的平均负载μ小于1.0。因此，延迟界可以表示为周期的一个分数;根据定义，到达的流量可以在单个时间段内被消耗。我们把它表示为标准化延迟界。其中ρ和μ的值是关于r的标准化</p><img src="/images/Aequitas总结/image-20240313192817280.png" alt="image-20240313192817280" style="zoom:67%;" /><img src="/images/Aequitas总结/image-20240313193156494.png" alt="image-20240313193156494" style="zoom:50%;" /><p>x的不同子域产生不同的到达曲线，从而产生不同的延迟界表示。例如x在到达某个值之前，$QoS_h$的延迟为0。$QoS_h$排队延迟的公式推算如下。</p><img src="/images/Aequitas总结/image-20240313195054253.png" alt="image-20240313195054253" style="zoom:67%;" /><p>图8绘制了2-QoS场景中每个QoS级别的理论最坏情况延迟。从上述表述中可以得出两个主要结论：QoS-mix会影响每个QoS的排队延迟。在QoSh一定的份额上，可以观察到优先级翻转，即QoSh中的排队延迟高于QoSl</p><img src="/images/Aequitas总结/image-20240313195222847.png" alt="image-20240313195222847" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>B站存储开发</title>
    <link href="/2024/03/12/B%E7%AB%99%E5%AD%98%E5%82%A8%E5%BC%80%E5%8F%91/"/>
    <url>/2024/03/12/B%E7%AB%99%E5%AD%98%E5%82%A8%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="存储体系介绍"><a href="#存储体系介绍" class="headerlink" title="存储体系介绍"></a>存储体系介绍</h1><p>从事存储领域的工作可搜索词汇：spdk,ceph,rocksdb,nvme</p><h2 id="自上而下的存储栈"><a href="#自上而下的存储栈" class="headerlink" title="自上而下的存储栈"></a>自上而下的存储栈</h2><p><img src="/images/B%E7%AB%99%E5%AD%98%E5%82%A8%E5%BC%80%E5%8F%91/image-20240312210534587.png" alt="image-20240312210534587"></p><h1 id="存储开发三部曲，内核文件系统实现"><a href="#存储开发三部曲，内核文件系统实现" class="headerlink" title="存储开发三部曲，内核文件系统实现"></a>存储开发三部曲，内核文件系统实现</h1><h2 id="如何自己写一个文件系统"><a href="#如何自己写一个文件系统" class="headerlink" title="如何自己写一个文件系统"></a>如何自己写一个文件系统</h2><p>因为不能直接用read或者write命令往磁盘中写内容，所以需要文件系统</p><h3 id="方法1-构建一个磁盘"><a href="#方法1-构建一个磁盘" class="headerlink" title="方法1  构建一个磁盘"></a>方法1  构建一个磁盘</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dd if=/dev/zero of=test.img bs=1M count=50<br></code></pre></td></tr></table></figure><p>IMG是镜像文件。test.img和普通磁盘一样。</p><p>Linux dd 命令用于读取、转换并输出数据。</p><p><img src="/images/B%E7%AB%99%E5%AD%98%E5%82%A8%E5%BC%80%E5%8F%91/image-20240312210711757.png" alt="image-20240312210711757"></p><p>先生成50MB的img</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkfs.ext4 test.img<br></code></pre></td></tr></table></figure><p>对test.img进行EXT4格式化操作。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo mount -t ext4 test.img .<span class="hljs-regexp">/mnt/</span><br></code></pre></td></tr></table></figure><p>如果在mnt中写一个东西，那么这个东西就存储在了test.img中</p><h3 id="方法2-创建一个磁盘"><a href="#方法2-创建一个磁盘" class="headerlink" title="方法2  创建一个磁盘"></a>方法2  创建一个磁盘</h3><p>直接用盘创建一个</p><h3 id="如何操作磁盘"><a href="#如何操作磁盘" class="headerlink" title="如何操作磁盘"></a>如何操作磁盘</h3><p>如果增加了一块裸盘，可以直接向裸盘写数据，然后通过cat读出来。即不需要文件系统也可以操作。</p><h3 id="实现文件系统三部曲"><a href="#实现文件系统三部曲" class="headerlink" title="实现文件系统三部曲"></a>实现文件系统三部曲</h3><ol><li>落盘：写的数据能够写进盘里</li><li>内核模块</li><li>文件系统的内容</li></ol><h1 id="存储的三座大山，磁盘，内核文件系统，分布式文件系统"><a href="#存储的三座大山，磁盘，内核文件系统，分布式文件系统" class="headerlink" title="存储的三座大山，磁盘，内核文件系统，分布式文件系统"></a>存储的三座大山，磁盘，内核文件系统，分布式文件系统</h1><img src="/images/B站存储开发/image-20240313204120783.png" alt="image-20240313204120783" style="zoom:67%;" /><p>按照数据不同的需求，可以使用不同的文件系统</p><img src="/images/B站存储开发/image-20240313205244761.png" alt="image-20240313205244761" style="zoom:67%;" /><p>将数据写入nvme裸盘的三种方式(三种方式实现文件系统)</p><h3 id="在应用层，用提供出来的接口操作nvme"><a href="#在应用层，用提供出来的接口操作nvme" class="headerlink" title="在应用层，用提供出来的接口操作nvme"></a>在应用层，用提供出来的接口操作nvme</h3><p>直接对裸盘进行分区，不进行文件系统操作。然后使用命令<code>dd if=/dev/zero of=/dev/nvme1n1p1</code>将该盘数据清空。</p><p>   用下面的代码可以直接在应用层对没有文件系统的裸进行 操作</p>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//nvme.c   gcc -o nvme nvme.c </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;linux/nvme_ioctl.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-keyword">int</span> fd = open(<span class="hljs-string">&quot;/dev/nvme1n1p1&quot;</span>,O_RDWR);<br><span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">char</span> *buffer = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">4096</span>);<br><span class="hljs-keyword">if</span>(!buffer)&#123;<br>perror(<span class="hljs-string">&quot;malloc\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 先清空</span><br><span class="hljs-built_in">memset</span>(buffer,<span class="hljs-number">0</span>,<span class="hljs-number">4096</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nvme_user_io</span> <span class="hljs-title">io</span>;</span><br><span class="hljs-comment">// 地址</span><br>io.addr = (__u64)buffer;<br><span class="hljs-comment">// 逻辑块地址</span><br>io.slba = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 连续写的块数</span><br>io.nblocks=<span class="hljs-number">1</span>;<br><span class="hljs-comment">// 1是写</span><br>io.opcode=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">strcpy</span>(buffer,<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span>==ioctl(fd,NVME_IOCTL_SUBMIT_IO,&amp;io))&#123;<br>perror(<span class="hljs-string">&quot;ioctl\n&quot;</span>);<br>close(fd);<br><span class="hljs-built_in">free</span>(buffer);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;write succ\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>   使用<code>cat /dev/nvme1n1p1</code>可以查看写入内容</p><p>   因为之前给/dev/loop30/挂载的时候分配过文件系统，所以会显示乱码</p><h3 id="在内核里读写nvme"><a href="#在内核里读写nvme" class="headerlink" title="在内核里读写nvme"></a>在内核里读写nvme</h3><p>需要写的文件不能用main，因为main是应用程序。</p><p>要实现一个内核的模块，在通过insmode和rmmode触发磁盘的读写操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;linux/bio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;linux/blkdev.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;linux/fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;linux/init.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DISK_NAME <span class="hljs-meta-string">&quot;/dev/nvme1n1p1&quot;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">block_device</span> *<span class="hljs-title">bdev</span>=</span><span class="hljs-literal">NULL</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DISK_SECTOR_SIZE 512</span><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> struct block_device *<span class="hljs-title">open_disk</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *devname)</span></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">block_device</span> *<span class="hljs-title">bdev</span>=</span><span class="hljs-literal">NULL</span>;<br>bdev = blkdev_get_by_path(devname,FMODE_READ | FMODE_WRITE,<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (IS_ERR(bdev))<br>&#123;<br>printk(<span class="hljs-string">&quot;blkdev_get_by_path err\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">return</span> bdev;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sun_nvme_write</span><span class="hljs-params">(struct block_device *bdev,<span class="hljs-keyword">char</span> *buffer, <span class="hljs-keyword">int</span> length)</span></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-comment">// 该值一般是256</span><br><span class="hljs-keyword">int</span> max_vecs = BIO_MAX_PAGES;<br><br><span class="hljs-comment">// 初始化bio</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bio</span> *<span class="hljs-title">bio</span> =</span> bio_alloc(GFP_NOIO,max_vecs);<br>bio_set_dev(bio,bdev);<br>bio-&gt;bi_opf = REQ_OP_WRITE;<br><span class="hljs-keyword">if</span> (!bio)<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>bio-&gt;bi_iter.bi_sector=<span class="hljs-number">0</span>; <span class="hljs-comment">//逻辑块地址</span><br><br>page = alloc_page(GFP_KERNEL);<br><span class="hljs-keyword">if</span>(!page)<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-comment">// page_address提供page的虚拟地址</span><br><span class="hljs-built_in">memcpy</span>(page_address(page),buffer,length);<br><br>bio_add_page(bio,page,<span class="hljs-number">512</span>,<span class="hljs-number">0</span>);<br>submit_bio_wait(bio);<br>__free_page(page);<br>bio_put(bio);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sun_nvme_read</span><span class="hljs-params">(struct block_device *bdev,<span class="hljs-keyword">char</span> *buffer, <span class="hljs-keyword">int</span> length)</span></span>&#123;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-keyword">void</span> *str = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">int</span> max_vecs = BIO_MAX_PAGES;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bio</span> *<span class="hljs-title">bio</span> =</span> bio_alloc(GFP_NOIO,max_vecs);<br>bio_set_dev(bio,bdev);<br>bio-&gt;bi_opf = REQ_OP_READ;<br><span class="hljs-keyword">if</span> (!bio)<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-comment">// 开始读的位置</span><br>bio-&gt;bi_iter.bi_sector=<span class="hljs-number">0</span>; <span class="hljs-comment">//逻辑块地址</span><br><br>page = alloc_page(GFP_KERNEL);<br><span class="hljs-keyword">if</span>(!page)<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>bio-&gt;bi_private=page;<br><span class="hljs-comment">// memcpy(page_address(page),buffer,length);</span><br><span class="hljs-comment">// bio_add_page(bio,virt_to_page(buffer),length,0);</span><br>bio_add_page(bio,page,PAGE_SIZE,<span class="hljs-number">0</span>);<br><br><br>submit_bio_wait(bio);<br><br>str = page_address(page);<br><span class="hljs-built_in">memcpy</span>(buffer,str,length);<br><br><br>__free_page(page);<br>bio_put(bio);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// insmod kernel_nvme.ko</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sun_nvme_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>printk(<span class="hljs-string">&quot;sun_nvme_init\n&quot;</span>);<br><br><span class="hljs-keyword">char</span> buffer[<span class="hljs-number">512</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>bdev = open_disk(DISK_NAME);<br><span class="hljs-keyword">if</span>(!bdev)<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-built_in">memset</span>(buffer,<span class="hljs-number">0</span>,DISK_SECTOR_SIZE);<br><br><span class="hljs-built_in">strcpy</span>(buffer,<span class="hljs-string">&quot;========ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>);<br><br><br><span class="hljs-keyword">int</span> k;<br><span class="hljs-comment">// 写操作</span><br>k = sun_nvme_write(bdev,buffer,<span class="hljs-built_in">strlen</span>(buffer));<br>printk(KERN_INFO <span class="hljs-string">&quot;write succ %d\n&quot;</span>,k);<br><span class="hljs-built_in">memset</span>(buffer,<span class="hljs-number">0</span>,DISK_SECTOR_SIZE);<br><br><span class="hljs-comment">// 写成功了进行读</span><br>sun_nvme_read(bdev,buffer,DISK_SECTOR_SIZE);<br>printk(KERN_INFO <span class="hljs-string">&quot;read succ\n&quot;</span>);<br>printk(KERN_INFO <span class="hljs-string">&quot;buffer: %s\n&quot;</span>,buffer);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// rmmod kernel_nvme.ko</span><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sun_nvme_exit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>printk(KERN_INFO <span class="hljs-string">&quot;un_nvme_exit\n&quot;</span>);<br><br><br>&#125;<br><br>module_init(sun_nvme_init);<br>module_exit(sun_nvme_exit);<br><br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;Your Name&quot;</span>);<br>MODULE_DESCRIPTION(<span class="hljs-string">&quot;A simple example Linux module.&quot;</span>);<br>MODULE_VERSION(<span class="hljs-string">&quot;0.1&quot;</span>);<br></code></pre></td></tr></table></figure><p>并且需要写一个内核模块的Makefile，进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">obj-m := kernel_nvme.o<br><br>KERNELBUILD := /lib/modules/$(shell uname -r)/build<br><br>default:<br>make -C $(KERNELBUILD) M=$(shell pwd) modules<br></code></pre></td></tr></table></figure><h1 id="SPDK"><a href="#SPDK" class="headerlink" title="SPDK"></a>SPDK</h1><p>同一个host里，fio使用不同的引擎会有不同的结果(iops)</p><p><img src="/images/B%E7%AB%99%E5%AD%98%E5%82%A8%E5%BC%80%E5%8F%91/image-20240315194810449.png" alt="image-20240315194810449"></p><p>==psync==</p><p>是同步的读写，第二次写需要等第一次写返回才能写。每一次write是串行的</p><p><img src="/images/B%E7%AB%99%E5%AD%98%E5%82%A8%E5%BC%80%E5%8F%91/image-20240315194857240.png" alt="image-20240315194857240"></p><p>==libaio==</p><p>是异步的读写，在libaio这一层就返回了，liaio自己本身负责落盘。文件系统和<strong>psync</strong>是一样的</p><p><img src="/images/B%E7%AB%99%E5%AD%98%E5%82%A8%E5%BC%80%E5%8F%91/image-20240315195047494.png" alt="image-20240315195047494"></p><p>==spdk_bdev==</p><p>bdevice和nvme裸盘的区别</p><p>bdev更贴近于纯软件</p><p><img src="/images/B%E7%AB%99%E5%AD%98%E5%82%A8%E5%BC%80%E5%8F%91/image-20240322152814191.png" alt="image-20240322152814191"></p><p>blob通过函数调用bdev，bdev通过rpc调用数据到nvme</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>在<code>/spdk/examples/</code>中创建文件夹和makefile文件，进行example的编写</p><p>在<code>spdk/build/examples</code>中运行对应的example</p><p>操作blob分为如下步骤</p><ol><li>create_bdev:创建</li><li>blobstore_init</li><li>create_blob</li><li>open_blob</li><li>write_blob</li><li>read_blob</li><li>close_blob</li><li>destory_blob</li></ol><p>基于以上八步，可以实现blob管理组件(文件系统)</p><h2 id="内核文件系统与SPDK文件系统"><a href="#内核文件系统与SPDK文件系统" class="headerlink" title="内核文件系统与SPDK文件系统"></a>内核文件系统与SPDK文件系统</h2><h2 id="实现媲美-ext4读写的文件系统"><a href="#实现媲美-ext4读写的文件系统" class="headerlink" title="实现媲美 ext4读写的文件系统"></a>实现媲美 ext4读写的文件系统</h2><h2 id="bio与nvme落盘"><a href="#bio与nvme落盘" class="headerlink" title="bio与nvme落盘"></a>bio与nvme落盘</h2>]]></content>
    
    
    <categories>
      
      <category>存储研究</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>笔试经历</title>
    <link href="/2024/03/12/%E7%AC%94%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <url>/2024/03/12/%E7%AC%94%E8%AF%95%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面试经历</title>
    <link href="/2024/03/12/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <url>/2024/03/12/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="0307-腾讯-游戏数据-软件开发-数据工程-实训基地-一面"><a href="#0307-腾讯-游戏数据-软件开发-数据工程-实训基地-一面" class="headerlink" title="0307 腾讯 游戏数据 软件开发 数据工程 实训基地 一面"></a><strong>0307 腾讯 游戏数据 软件开发 数据工程 实训基地 一面</strong></h1><p>30min左右</p><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a><strong>自我介绍</strong></h3><p>（要求三分钟左右）</p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a><strong>项目</strong></h3><p>第三个项目，量化指标如何对比。和其他相关算法的区别</p><h3 id="八股"><a href="#八股" class="headerlink" title="八股"></a><strong>八股</strong></h3><p>快速排序的思路，</p><p>时间复杂度，</p><p>什么时候时间复杂度最大</p><p>如何把时间复杂度最大的时候处理成nlogn</p><h3 id="手撕"><a href="#手撕" class="headerlink" title="手撕"></a><strong>手撕</strong></h3><p>二分查找</p><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></p>]]></content>
    
    
    <categories>
      
      <category>找工作</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面经题目</title>
    <link href="/2024/03/12/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/"/>
    <url>/2024/03/12/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a><strong>C++</strong></h1><p><a href="https://mp.weixin.qq.com/s/Y9cyH1X0HnTNBQSUJMb-fw">https://mp.weixin.qq.com/s/Y9cyH1X0HnTNBQSUJMb-fw</a></p><h3 id="1-C-中智能指针和指针的区别是什么-腾讯-1"><a href="#1-C-中智能指针和指针的区别是什么-腾讯-1" class="headerlink" title="1.  C++中智能指针和指针的区别是什么(腾讯:1)"></a>1.  C++中智能指针和指针的区别是什么(腾讯:1)</h3><p>智能指针会自动管理内存，可以自动释放。普通的指针需要手动管理内存，释放。智能指针实际上是对普通指针加了一层封装机制，智能指针就是一个类。</p><p>在C++11中出现三种智能指针，分别是unique_ptr、shared_ptr、weak_ptr。这三种智能指针分别有各自的应用场景，<strong>同时这些应用场景是有相互联系的</strong>。<a href="https://blog.csdn.net/zsiming/article/details/125783890">https://blog.csdn.net/zsiming/article/details/125783890</a></p><ul><li> unique_ptr的出现，在一定程度上解决了裸指针使用完没有及时释放导致的内存泄漏问题，但多个unique_ptr不能指向同一资源        </li><li> shared_ptr的出现，解决了unique_ptr不能指向同一资源的问题。它的特点是引用计数不为0，就坚决不释放资源。这又导致了另一个问题：交叉引用导致资源无法释放，又会内存泄漏</li><li>weak_ptr的特点是引用对象时引用计数不增加，但自能成为资源的观察者，无法使用资源。如果要使用资源，必须升级为shared_ptr。weak_ptr解决了shared_ptr交叉引用的问题。</li></ul><h3 id="2-述-C-中智能指针的特点，简述-new-与-malloc-的区别"><a href="#2-述-C-中智能指针的特点，简述-new-与-malloc-的区别" class="headerlink" title="2.   述 C++ 中智能指针的特点，简述 new 与 malloc 的区别"></a>2.   述 C++ 中智能指针的特点，简述 new 与 malloc 的区别</h3><p>智能指针可以自动管理资源，包括share,unique和weak。在函数结束的时候会自动释放内存</p><p>new是C++中的操作符，malloc是函数。</p><p>new 不止是分配内存，而且会调用类的构造函数，同理delete会调用类的析构函数，而malloc则只分配内存，不会进行初始化类成员的工作，同样free也不会调用析构函数。</p><p>new相当于有两个步骤：分配内存(和malloc一样)；触发构造函数。</p><p>malloc在使用的时候需要显式填入申请内存的大小</p><p>new的返回值是对象类型的指针。而malloc返回的是void*,需要再一步进行强制类型转化。</p><h3 id="3-简述C-右值引用与转移语义"><a href="#3-简述C-右值引用与转移语义" class="headerlink" title="3. 简述C++右值引用与转移语义"></a>3. 简述C++右值引用与转移语义</h3><p>左值表达式表示的是对象的身份，右值表达式表达的是对象的值。</p><p>左值对应变量的存储位置，右值对应变量的值本身</p><p>有地址的变量就是左值，没有底质的字面值、临时值就是右值</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240312171608374.png" alt="image-20240312171608374"></p><p>引用就是给变量取一个别名，和原来的变量公用一块空间。一个变量可以有多个引用，改变引用的值就改变了变量的值</p><p>左值引用要求右边的值必须能够取出地址</p><p>左值的声明符号为”&amp;”， 为了和左值区分，右值的声明符号为”&amp;&amp;”。</p><p>转移语句可以将资源(堆，系统对象等)从一个对象转移到另一个对象</p><p>右值引用实现了转移语义和精确传递，能够消除两个对象相互交互时不必要的对象拷贝，节省运算存储资源，提高运行效率。</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240312171639634.png" alt="image-20240312171639634"></p><h3 id="4-只定义析构函数，会自动生成哪些构造函数"><a href="#4-只定义析构函数，会自动生成哪些构造函数" class="headerlink" title="4. 只定义析构函数，会自动生成哪些构造函数"></a>4. 只定义析构函数，会自动生成哪些构造函数</h3><p>与构造函数相反，析构函数是在对象被撤销的时自动调用。</p><p>默认生成的析构函数只能释放类的普通数据成员所占用的空间, 无法释放通过 new 或 malloc 进行申请的空间。</p><p>只定义析构函数，会生成默认构造函数和拷贝构造函数。</p><p>默认构造函数是给对象赋予初始值的函数</p><p>拷贝构造函数有编辑器调用来完成一些基于同一类的其他对象的构建及初始化</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240312172005215.png" alt="image-20240312172005215"></p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240312232954820.png" alt="image-20240312232954820"></p><h3 id="5-C-中多态是如何实现的"><a href="#5-C-中多态是如何实现的" class="headerlink" title="5. C++中多态是如何实现的"></a>5. C++中多态是如何实现的</h3><p>通过虚函数实现动态多态，通过函数重载(参数和返回值不一样)实现静态多态</p><p>多态：一个接口有多个形态</p><h3 id="6-C-中虚函数表和虚函数表指针的创建时机"><a href="#6-C-中虚函数表和虚函数表指针的创建时机" class="headerlink" title="6.C++中虚函数表和虚函数表指针的创建时机"></a>6.C++中虚函数表和虚函数表指针的创建时机</h3><p>虚函数在继承的过程中可以重写基类的虚函数。</p><p>在运行时才知道子类调用的哪一个函数</p><p>虚函数表的创建时机：在编译器编译的时候生成，virtual关键字修饰的函数</p><p>虚函数表是虚函数地址的数组，每有一个虚函数，数组长度就＋1.在可执行程序中存放在只读数据段(堆中的)，</p><p>虚函数在内存中存放在代码区。    </p><p>虚函数表指针(在堆区)指向虚函数表、的地址，虚函数地址又指向代码段中的函数的位置。</p><p>每个类对应一个虚函数表。类不同对象的虚函数表指针指向该类的虚函数表，但每个对象的虚函数表指针不同。</p><h3 id="7-虚拟内存的构成"><a href="#7-虚拟内存的构成" class="headerlink" title="7. 虚拟内存的构成"></a>7. 虚拟内存的构成</h3><p>内核空间</p><p>栈区</p><p>文件映射区</p><p>堆取</p><p>数据区(已初始化和未初始化的数据，静态存储区)</p><p>代码区</p><h3 id="8-构造函数的底层原理"><a href="#8-构造函数的底层原理" class="headerlink" title="8. 构造函数的底层原理"></a>8. 构造函数的底层原理</h3><p>先创建一个新对象，然后构造函数里的this替换成刚刚new的对象，通过强制转换的方式对新对象添加属性和方法</p><h3 id="9-引用和指针的区别-腾讯-1"><a href="#9-引用和指针的区别-腾讯-1" class="headerlink" title="9. 引用和指针的区别(腾讯:1)"></a>9. 引用和指针的区别(腾讯:1)</h3><p><strong>指针</strong>是一个变量，它保存了另一个变量的内存地址；<strong>引用</strong>是另一个变量的别名，与原变量共享内存地址。</p><ol><li>定义方式：指针使用<code>*</code>来声明，并且需要通过取地址运算符<code>&amp;</code>获取变量的地址；引用则直接以变量名定义。</li><li>空值：指针可以具有空值（nullptr），表示没有指向有效对象；而引用必须始终引用一个有效的对象。</li><li>可改变性：指针可以被重新赋值，可以更改所指向的对象；而引用在创建时必须初始化，并且不能再绑定到其他对象上。</li><li>空间占用：指针本身占据额外的内存空间来存储地址；而引用仅作为已存在对象的别名，不占据额外空间。</li><li>访问方式：通过指针访问对象需要使用解引用操作符<code>*</code>；而通过引用直接访问即可，无需解引用操作符。</li><li>函数参数传递：指针可以作为函数参数传递，允许在函数内部修改原始数据；而引用也可以作为函数参数传递，但不会创建副本，在函数内部修改将影响原始数据。</li></ol><h3 id="10-qt里面有用到多线程吗"><a href="#10-qt里面有用到多线程吗" class="headerlink" title="10. qt里面有用到多线程吗"></a>10. qt里面有用到多线程吗</h3><p>为什么在QT中要使用线程？</p><p>如果我们在写GUI程序的时候，如果某处的数据，计算比较复杂，当前主线程就会卡在这里，在具体表现就是界面会卡住。所以在这个时候多线程就起到了关键的作用， 我们将复杂的逻辑运算交给线程，由线程在后台处理。<u>（注意：线程不能操作图形界面，他的线程任务是在后台进行数据运算等）</u></p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240313171845511.png" alt="image-20240313171845511"></p><h3 id="11-面向对象的特点，三大特征-腾讯-1"><a href="#11-面向对象的特点，三大特征-腾讯-1" class="headerlink" title="11. 面向对象的特点，三大特征(腾讯:1)"></a>11. 面向对象的特点，三大特征(腾讯:1)</h3><p>继承、多态、封装</p><p>其中，<strong>封装</strong>可以隐藏实现细节，使得代码模块化。</p><p><strong>继承</strong>可以扩展已存在的代码模块（类）；它们的目的都是为了——代码重用。</p><p>而<strong>多态</strong>则是为了实现另一个目的——接口重用！</p><img src="/images/面经题目/image-20240314110741745.png" alt="image-20240314110741745" style="zoom:67%;" /><h3 id="12-常用的容器有哪些，底层原理是怎么样的-腾讯-1"><a href="#12-常用的容器有哪些，底层原理是怎么样的-腾讯-1" class="headerlink" title="12. 常用的容器有哪些，底层原理是怎么样的(腾讯:1)"></a>12. 常用的容器有哪些，底层原理是怎么样的(腾讯:1)</h3><ol><li><strong>array</strong> :  <strong>顺序容器</strong>（支持随机访问），连续内存空间，固定大小；</li><li><strong>vector</strong>：顺序容器（支持随机访问），动态调整大小，使用内存分配器动态管理内存；是能够动态调整大小的 array</li><li><strong>deque</strong>：顺序容器（支持随机访问），动态调整大小，使用内存分配器动态管理内存；是一个可以在首尾两端进行动态增删的顺序容器。也是动态array</li><li><strong>list</strong>：顺序容器（可顺序访问，但不支持随机访问），双链表，使用内存分配器动态管理内存；//离散内存。底层结构是双链表，支持在任意位置插入、删除和移动元素。</li><li><strong>forward_list</strong>：单向链表</li><li><strong>queue</strong>: 容器适配器，先进先出型容器（FIFO）；//C++设计模式之适配器模式。默认情况下，queue 使用 deque 作为底层容器。</li><li><strong>priority_queue</strong>：容器适配器，严格弱序（Strict Weak Ordering），优先级队列；priority_queue 的核心特点在于严格弱序特性（strict weak ordering）：即保证容器中的第一个元素始终是所有元素中最大的。priority_queue 默认在 vector 上使用堆算法将 vector 中元素构造成大顶堆的结构，因此 priority_queue 就是堆</li><li><strong>stack</strong>：容器适配器，后进先出型容器(LIFO)。任何时候外界只能访问 stack 顶部的元素；只有在移除 stack 顶部的元素后，才能访问下方的元素。默认情况下，stack 使用 deque 作为底层容器。</li><li></li></ol><h2 id="C-的内存管理方法"><a href="#C-的内存管理方法" class="headerlink" title="C++的内存管理方法"></a>C++的内存管理方法</h2><h3 id="13-类的对象存储空间"><a href="#13-类的对象存储空间" class="headerlink" title="13. 类的对象存储空间"></a>13. 类的对象存储空间</h3><ul><li>非静态成员的数据类型大小之和</li><li>编辑器加入的额外成员变量（如指向虚函数表的指针）</li><li>为了边缘对齐优化加入的padding</li><li>空类的对象的size是1</li></ul><h3 id="14-简要说明C-的内存分区-腾讯-1"><a href="#14-简要说明C-的内存分区-腾讯-1" class="headerlink" title="14. 简要说明C++的内存分区(腾讯:1)"></a>14. 简要说明C++的内存分区(腾讯:1)</h3><img src="/images/面经题目/image-20240314144006871.png" alt="image-20240314144006871" style="zoom:67%;" /><p><strong>栈</strong>：在执行函数时，<strong>函数内局部变量</strong>的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。</p><p><strong>堆</strong>：就是那些由 <code>new</code>分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个<code>new</code>就要对应一个 <code>delete</code>。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收</p><p><strong>全局/静态存储区</strong>：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量和静态变量又分为初始化的和未初始化的，在C++里面没有这个区分了，它们共同占用同一块内存区，在该区定义的变量若没有初始化，则会被自动初始化，例如int型变量自动初始为0</p><p><strong>常量存储区：</strong>这是一块比较特殊的存储区，这里面存放的是常量，不允许修改</p><p><strong>代码区：</strong>存放函数体的二进制代码</p><h3 id="15-什么是内存池，如何实现"><a href="#15-什么是内存池，如何实现" class="headerlink" title="15. 什么是内存池，如何实现"></a>15. 什么是内存池，如何实现</h3><p>内存池（Memory Pool） 是一种<strong>内存分配</strong>方式。在真正使用内存之前，先申请分配一定数量的、大小相等(一般情况下)的内存块留作备用。</p><h3 id="16-C-中类的数据成员和成员函数内存分布情况"><a href="#16-C-中类的数据成员和成员函数内存分布情况" class="headerlink" title="16. C++中类的数据成员和成员函数内存分布情况"></a>16. C++中类的数据成员和成员函数内存分布情况</h3><p>数据成员在对象实例化后会占用一定内存空间。成员函数放在代码区</p><h3 id="17-关于this指针知道什么"><a href="#17-关于this指针知道什么" class="headerlink" title="17. 关于this指针知道什么"></a>17. 关于this指针知道什么</h3><ul><li>this指针是类的指针，指向对象的首地址</li><li>this指针只能在成员函数中使用，在静态函数和全局函数中都不能使用</li><li>this指针只有在成员函数中才有定义</li></ul><h3 id="18-C-11的新特性"><a href="#18-C-11的新特性" class="headerlink" title="18. C++11的新特性"></a>18. C++11的新特性</h3><p>介绍几种常用的新特性</p><ol><li><p><strong>nullptr</strong>。用来区分空指针和0，nullptr 的类型为 nullptr_t，能够隐式的转换为任何指针或成员指针的类型，也能和他们进行相等或者不等的比较。当需要使用 NULL 时候，直接使用 nullptr。</p></li><li><p><strong>类型推导</strong>。C++11引入了auto和decltype这两个关键字实现了类型推导。</p><p>auto可以对变量的类型进行推导，最常见的是迭代器。auto不能用于函数传参，也不能用于推导数组类型。</p><p>decltype的推导对象总是以一个普通表达式作为参数，返回该表达式的类型，而且decltype并不会对表达式进行求值。</p></li><li><p>区间迭代。for(auto i:arr)</p></li><li><p>初始化列表</p></li></ol><h3 id="19-简述-vector-的实现原理"><a href="#19-简述-vector-的实现原理" class="headerlink" title="19. 简述 vector 的实现原理"></a>19. 简述 vector 的实现原理</h3><p>vector是一个动态数组，用于维护一段连续的动态控件，内部有三个成员函数，用来储存起始位置，已使用位置，以及整个空间的最后位置，每当动态内存用完时，它会按照原内存的2倍，重新申请新内存。将原内存的数据拷贝到新内存，释放掉原内存。</p><h3 id="20-简述hashmap的底层实现原理"><a href="#20-简述hashmap的底层实现原理" class="headerlink" title="20. 简述hashmap的底层实现原理"></a>20. 简述hashmap的底层实现原理</h3><p>使用一个下标范围比较大的数组来存储元素。可以设计一个函数（哈希函数，也叫做散列函数），使得每个元素的关键字都与一个函数值（即数组下标，hash值）相对应，于是用这个数组单元来存储这个元素。</p><p>hash_map，首先分配一大片内存，形成许多桶。是利用hash函数，对key进行映射到不同区域（桶）进行保存。其插入过程是：</p><ul><li>得到key</li><li>通过hash函数得到hash值</li><li>得到桶号(一般都为hash值对桶数求模)</li><li>存放key和value在桶内。</li></ul><p>其取值过程是:</p><ul><li>得到key</li><li>通过hash函数得到hash值</li><li>得到桶号(一般都为hash值对桶数求模)</li><li>比较桶的内部元素是否与key相等，若都不相等，则没有找到。</li><li>取出相等的记录的value。</li><li>hash_map中直接地址用hash函数生成，解决冲突，用比较函数解决。这里可以看出，如果每个桶内部只有一个元素，那么查找的时候只有一次比较。当许多桶内没有值时，许多查询就会更快了(指查不到的时候).</li></ul><p>hashmap是数组和链表组成的，数据结构中又叫“链表散列”。单线链表如果长度超过8的话会变成红黑树。</p><p>单线链表只是为了解决hash冲突准备的，将哈希表的每个位置都设置为一个链表头节点，发生哈希冲突时，将新的键值对插入到对应的链表中。</p><h3 id="21-include-lt-gt-和“”区别"><a href="#21-include-lt-gt-和“”区别" class="headerlink" title="21. include &lt;&gt;和“”区别"></a>21. include &lt;&gt;和“”区别</h3><p>一、引用的头文件不同<br>#include&lt; &gt;引用的是编译器的类库路径里面的头文件。<br>#include“ ”引用的是你程序目录的相对路径中的头文件。<br>二、用法不同<br>#include&lt; &gt;用来包含标准头文件(例如stdio.h或stdlib.h).<br>#include“ ”用来包含非标准头文件。<br>三、调用文件的顺序不同<br>#include&lt; &gt;编译程序会先到标准函数库中调用文件。<br>#include“ ”编译程序会先从当前目录中调用文件。<br>四、预处理程序的指示不同<br>#include&lt; &gt;指示预处理程序到预定义的缺省路径下寻找文件。<br>#include“ ”指示预处理程序先到当前目录下寻找文件，再到预定义的缺省路径下寻找文件。</p><h3 id="22-面向对象优点"><a href="#22-面向对象优点" class="headerlink" title="22. 面向对象优点"></a>22. 面向对象优点</h3><p>可重用性好，我们可以利用其继承、封装、多态的特性来对一个类或者类中的函数实现进行重复利用</p><p>可维护性好</p><p>易于理解</p><p>能更好的对问题进行建模分析，在具体实现时，我们可以跟踪一个对象不同属性的状态</p><h3 id="23-C-从编译到运行发生了什么"><a href="#23-C-从编译到运行发生了什么" class="headerlink" title="23. C++从编译到运行发生了什么"></a>23. C++从编译到运行发生了什么</h3><p>C/C++程序编译流程：预处理-&gt;编译-&gt;汇编-&gt;链接</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240407104820367.png" alt="image-20240407104820367"></p><h3 id="24-C-中const和static的区别"><a href="#24-C-中const和static的区别" class="headerlink" title="24. C++中const和static的区别"></a>24. C++中const和static的区别</h3><p>Const</p><img src="/images/面经题目/image-20240408111019744.png" alt="image-20240408111019744" style="zoom:67%;" /><p>Static有四种用途：</p><img src="/images/面经题目/image-20240408110759006.png" alt="image-20240408110759006" style="zoom:67%;" /><h3 id="25-虚函数和纯虚函数的区别"><a href="#25-虚函数和纯虚函数的区别" class="headerlink" title="25. 虚函数和纯虚函数的区别"></a>25. 虚函数和纯虚函数的区别</h3><p>在C++中，虚函数（Virtual Function）是一种用于实现运行时多态的特殊函数。它通过使用关键字<code>virtual</code>进行声明，在基类中定义并在派生类中进行重写。当通过基类指针或引用调用虚函数时，将根据实际对象的类型来确定要调用的函数版本。</p><p>纯虚函数（Pure Virtual Function）是一个在基类中声明但没有具体实现的虚函数。它通过在函数声明末尾加上<code>= 0</code>来表示纯虚函数。纯虚函数只有声明而没有定义，需要被派生类重写才能使用。</p><p>区别：</p><ol><li>虚函数可以具有默认实现，而纯虚函数没有具体实现。</li><li>派生类可以选择是否重写虚函数，但必须重写纯虚函数。</li><li>含有纯虚函数的类称为抽象类，不能直接创建对象，只能作为基类供派生类继承和实现。而含有普通虚函数的类可以被直接实例化。</li><li>如果一个派生类未覆盖了其基类的纯虚函数，则该派生类也成为抽象类(接口)。</li></ol><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h3 id="1-简述-TCP-三次握手以及四次挥手的流程。为什么需要三次握手以及四次挥手？"><a href="#1-简述-TCP-三次握手以及四次挥手的流程。为什么需要三次握手以及四次挥手？" class="headerlink" title="1. 简述 TCP 三次握手以及四次挥手的流程。为什么需要三次握手以及四次挥手？"></a>1. 简述 TCP 三次握手以及四次挥手的流程。为什么需要三次握手以及四次挥手？</h3><p><strong>三次握手：</strong>客户端请求建立连接。服务器端确认请求，回复ACK，并为这次连接分配资源。Client端接收到ACK报文后也向Server段发生ACK报文，并分配资源，这样TCP连接就建立了。</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240327182628099.png" alt="image-20240327182628099"></p><p><strong>四次挥手：</strong>四次挥手在客户端发起中断连接请求的时候，服务器有可能还有数据没有发送完。1. Client端发起中断连接请求，也就是发送FIN报文。2. 服务器收到连接释放报文，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。3. 服务器将最后的数据发送完毕后，就向客户端发送连接释放报文。此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。4. 客户端收到服务器的连接释放报文后，必须发出确认，进入TIME-WAIT状态此时TCP连接还没有释放，必须经过2∗MSL（最长报文段寿命）的时间后，才释放TCP，进入CLOSE状态。服务器只要收到了客户端发送的确认，直接进入CLOSE状态。</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240327182720192.png" alt="image-20240327182720192"></p><h3 id="2-为什么不用两次握手"><a href="#2-为什么不用两次握手" class="headerlink" title="2. 为什么不用两次握手"></a>2. 为什么不用两次握手</h3><p>主要为了防止已失效的连接请求报文段突然又传送到了服务器，因而产生错误。</p><h3 id="3-从输入-URL-到展现页面的全过程-腾讯-1"><a href="#3-从输入-URL-到展现页面的全过程-腾讯-1" class="headerlink" title="3. 从输入 URL 到展现页面的全过程(腾讯:1)"></a>3. 从输入 URL 到展现页面的全过程(腾讯:1)</h3><ul><li>浏览器解析URL输入</li><li>浏览器查找域名的IP地址(客户端发送DNS请求，DNS解析)</li><li>建立tcp连接</li><li>发送 HTTP / HTTPS 请求（建立 TLS 连接）</li><li>服务器响应请求</li><li>浏览器解析渲染界面</li><li>HTTP 请求结束，断开 TCP 连接</li></ul><h3 id="4-OSI七层和TCP-IP四层模型的区别-腾讯-1"><a href="#4-OSI七层和TCP-IP四层模型的区别-腾讯-1" class="headerlink" title="4. OSI七层和TCP/IP四层模型的区别(腾讯:1)"></a>4. OSI七层和TCP/IP四层模型的区别(腾讯:1)</h3><h4 id="OSI-open-system-interaction-七层模型："><a href="#OSI-open-system-interaction-七层模型：" class="headerlink" title="OSI(open system interaction)七层模型："></a>OSI(open system interaction)七层模型：</h4><ul><li>应用层：协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP</li><li>表示层：数据的表示、安全、压缩。格式有，JPEG、ASCll、DECOIC、加密格式等</li><li>会话层：建立、管理、终止会话。对应主机进程，指本地主机与远程主机正在进行的会话</li><li>传输层：定义传输数据的协议端口号，以及流控和差错校验。协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层</li><li>网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。协议有：ICMP IGMP IP（IPV4 IPV6） ARP RARP</li><li>数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。</li><li>物理层：建立、维护、断开物理连接。</li></ul><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240312235338063.png" alt="image-20240312235338063"></p><h4 id="TCP-IP四层模型"><a href="#TCP-IP四层模型" class="headerlink" title="TCP/IP四层模型"></a>TCP/IP四层模型</h4><h3 id="5-session和cookie的区别"><a href="#5-session和cookie的区别" class="headerlink" title="5. session和cookie的区别"></a>5. session和cookie的区别</h3><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240312235428564.png" alt="image-20240312235428564"></p><h3 id="6-http和https的区别-腾讯-1"><a href="#6-http和https的区别-腾讯-1" class="headerlink" title="6. http和https的区别(腾讯:1)"></a>6. http和https的区别(腾讯:1)</h3><p>安全超文本传输协议（HTTPS）是 HTTP 的一种更安全的版本或扩展。在 HTTPS 中，浏览器与服务器会在传输数据之前建立安全的加密连接。</p><p>HTTPS 将 HTTP 请求和响应与 SSL 和 TLS 技术相结合。</p><h3 id="7-tcp-udp的区别，TCP为什么是可靠传输，TCP拥塞控制是怎样的-腾讯-1"><a href="#7-tcp-udp的区别，TCP为什么是可靠传输，TCP拥塞控制是怎样的-腾讯-1" class="headerlink" title="7. tcp/udp的区别，TCP为什么是可靠传输，TCP拥塞控制是怎样的(腾讯:1)"></a>7. tcp/udp的区别，TCP为什么是可靠传输，TCP拥塞控制是怎样的(腾讯:1)</h3><p><strong>udp</strong>：传送数据前不需要先建立连接，远地主机在收到 UDP 报文后，也不需要给出任何确认。UDP不保证可靠的交付。适用于IM、语音、视频、直播等.</p><p><strong>tcp</strong>：提供面向连接的服务。传送数据之前，必须先建立连接，数据传输结束之后，还要释放连接。一般用于文件发送传输、接收邮件、远程登录等要求可靠的场景。</p><p>TCP的可靠传输通过三次握手来建立连接，而且在数据通信过程中，有确认、窗口、重传、拥塞控制等机制，实现的。</p><h4 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h4><p>TCP使用窗口实现<strong>流量控制</strong>。控制发送方的发送速度从而使接受者来得及接收并处理。</p><p>原理是：在通信过程中，接收方根据自己接收缓存的大小，动态调整发送方的发送窗口大小，即TCP报文段首部中的“窗口”字段<strong>rwnd</strong>,来限制发送方向网络注入报文的速率。</p><p>TCP使用窗口实现<strong>拥塞控制</strong>。防止过多的包被发送到网络中，避免出现网络负载过大，网络拥塞的情况。</p><p>原理是：发送方根据其对当前网络拥塞程序的估计确定一个拥塞窗口<strong>cwnd</strong>。</p><p>最终A发送的窗口的实际大小是min(rwnd,cwnd)值。</p><p>拥塞窗口(cwnd)反映网络的拥塞程度。发送窗口(rwnd)反映接收方拥塞程度</p><p>==<strong>慢开始算法</strong>==</p><p>在TCP刚连接好，开始发送TCP报文段时，先令拥塞窗口cwnd=1，在每收到一个对新的报文段确认后，再将cwnd加1，慢开始算法，每经过一个传输轮次（即往返RTT)，拥塞窗口cwnd就会加倍，即呈指数形式增加，当慢开始算法把拥塞窗口cwnd增大到一个阈值ssthresh，改用拥塞避免算法。</p><p>==<strong>拥塞避免算法</strong>==</p><p>拥塞避免算法的做法是：发送端的拥塞窗口cwnd每经过一个往返RTT，按线性规律缓慢增长。</p><p>==<strong>网络拥塞</strong>==</p><p>当网络出现拥塞，不管是在慢开始阶段还是拥塞避免阶段，只要发送方检测到超时事件发送，就要把慢开始阈值ssthresh设置为出现拥塞时的发送方cwnd的一半（但不能小于2），然后将拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的是迅速减少主机发送到网络中的分组数，使得发送拥塞的路由器有足够的时间把队列中积压的分组处理完毕。</p><img src="/images/面经题目/image-20240314154437720.png" alt="image-20240314154437720" style="zoom:67%;" /><p><strong>==快重传==</strong></p><p>当发送方连续收到三个重复的ACK报文，直接重传对方尚未收到的报文段，而不必等待那个报文段设置的重传计时器超时。</p><p><strong>==快恢复==</strong></p><p>当发送端收到连续三个冗余ACK时，就执行“乘法减少”算法，把慢开始阈值ssthresh设置为出现拥塞时发送方cwnd的一半。与慢开始将拥塞窗口cwnd设置为1的不同之处，它把cwnd的值设置为慢开始阈值ssthresh减半后的数值，然后执行拥塞避免算法，使拥塞窗口缓慢线性增大</p><img src="/images/面经题目/image-20240314155511687.png" alt="image-20240314155511687" style="zoom:67%;" /><h3 id="8-IP地址子网掩码是什么-腾讯-1"><a href="#8-IP地址子网掩码是什么-腾讯-1" class="headerlink" title="8. IP地址子网掩码是什么(腾讯:1)"></a>8. IP地址子网掩码是什么(腾讯:1)</h3><p>网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。翻译一下就是：一是用于屏蔽IP地址的一部分以区别<strong>网络标识</strong>和<strong>主机</strong>标识，并说明该IP地址是在<strong>局域网</strong>上，还是在远程网上。二是用于将一个大的IP网络划分为若干小的子网络。</p><h3 id="9-https工作原理"><a href="#9-https工作原理" class="headerlink" title="9. https工作原理"></a>9. https工作原理</h3><p>HTTPS的整体过程分为证书验证和数据传输阶段，具体的交互过程如下：</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240407110941386.png" alt="image-20240407110941386"></p><p>只是对随机数进行了非对称加密(公钥和私钥)。随机数本身是对称加密</p><h3 id="10-对称加密和非对称加密"><a href="#10-对称加密和非对称加密" class="headerlink" title="10.对称加密和非对称加密"></a>10.对称加密和非对称加密</h3><h3 id="11-TCP长短连接流程，怎么实现"><a href="#11-TCP长短连接流程，怎么实现" class="headerlink" title="11. TCP长短连接流程，怎么实现"></a>11. TCP长短连接流程，怎么实现</h3><p>==长连接==指建立SOCKET连接后不管是否使用都保持连接，但安全性较差。</p><p>Client方与Server方先建立通讯连接，连接建立后不断开， 然后再进行报文发送和接收。 </p><p>连接-&gt;传输数据-&gt;保持连接 -&gt; 传输数据-&gt; 。。。-&gt;关闭连接。 </p><p>例如在线游戏。</p><p>==短连接==指Client方与Server每进行一次报文收发交易时才进行通讯连接，交易完毕后立即断开连接。</p><p>连接-&gt;传输数据-&gt;关闭连接  </p><p>HTTP是无状态的，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。 </p><h3 id="12-TCP协议如何保障可靠传输的"><a href="#12-TCP协议如何保障可靠传输的" class="headerlink" title="12.  TCP协议如何保障可靠传输的"></a>12.  TCP协议如何保障可靠传输的</h3><ul><li><strong>确认和重传</strong>：接收方收到报文就会确认，发送方发送一段时间后没有收到确认就会重传。</li><li><strong>数据校验</strong>：TCP报文头有校验和，用于校验报文是否损坏。</li><li><strong>数据合理分片和排序</strong>：tcp会按最大传输单元(MTU)合理分片，接收方会缓存未按序到达的数据，重新排序后交给应用层。</li><li><strong>流量控制</strong>：当接收方来不及处理发送方的数据，能通过滑动窗口，提示发送方降低发送的速率，防止包丢失</li><li><strong>拥塞控制</strong>：当网络拥塞时，通过拥塞窗口，减少数据的发送，防止包丢失</li></ul><h3 id="13-http1-0，http1-1和http2-0的区别"><a href="#13-http1-0，http1-1和http2-0的区别" class="headerlink" title="13. http1.0，http1.1和http2.0的区别"></a>13. http1.0，http1.1和http2.0的区别</h3><p>HTTP 1.0需要使用keep-alive参数来告知服务器端要建立一个长连接，而HTTP1.1默认支持长连接。</p><p>==HTTP 2.0 和 HTTP 1.X相比的新特性==</p><p><strong>新的二进制格式</strong>（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p><p><strong>多路复用</strong>（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</p><h3 id="14-常见的HTTP状态码有哪些？"><a href="#14-常见的HTTP状态码有哪些？" class="headerlink" title="14. 常见的HTTP状态码有哪些？"></a>14. 常见的HTTP状态码有哪些？</h3><table><thead><tr><th align="center">状态码</th><th align="center">类别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">1XX</td><td align="center">Informational（信息性状态码）</td><td align="center">接收的请求正在处理</td></tr><tr><td align="center">2XX</td><td align="center">Success（成功状态码）</td><td align="center">请求正常处理完毕</td></tr><tr><td align="center">3XX</td><td align="center">Redirection（重定向状态码）</td><td align="center">需要进行附加操作以完成请求</td></tr><tr><td align="center">4XX</td><td align="center">Client Error（客户端错误状态码）</td><td align="center">服务器无法处理请求</td></tr><tr><td align="center">5XX</td><td align="center">Server Error（服务器错误状态码）</td><td align="center">服务器处理请求出错</td></tr></tbody></table><ol><li><p>1XX 信息</p><p><strong>100 Continue</strong> ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</p></li><li><p>2XX 成功</p><ul><li><strong>200 OK</strong></li><li><strong>204 No Content</strong> ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</li><li><strong>206 Partial Content</strong> ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</li></ul></li><li><p>3XX 重定向</p><ul><li><strong>301 Moved Permanently</strong> ：永久性重定向</li><li><strong>302 Found</strong> ：临时性重定向</li><li><strong>303 See Other</strong> ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</li><li><strong>304 Not Modified</strong> ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</li><li><strong>307 Temporary Redirect</strong> ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</li></ul></li><li><p>4XX 客户端错误</p><ul><li><strong>400 Bad Request</strong> ：请求报文中存在语法错误。</li><li><strong>401 Unauthorized</strong> ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</li><li><strong>403 Forbidden</strong> ：请求被拒绝。</li><li><strong>404 Not Found</strong></li></ul></li><li><p>5xx 服务器错误</p><ul><li><strong>500 Internal Server Error</strong> ：服务器正在执行请求时发生错误。</li><li><strong>503 Service Unavailable</strong> ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li></ul></li></ol><h3 id="15-HTTP长连接和TCP长连接有什么区别"><a href="#15-HTTP长连接和TCP长连接有什么区别" class="headerlink" title="15. HTTP长连接和TCP长连接有什么区别"></a>15. HTTP长连接和TCP长连接有什么区别</h3><ul><li>HTTP 的 Keep-Alive，是由应用层（用户态）实现的，称为 HTTP 长连接；</li><li>TCP 的 Keepalive，是由TCP 层（内核态）实现的，称为 TCP 保活机制；</li></ul><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h3 id="1-线程的生命周期（进程的五个状态）"><a href="#1-线程的生命周期（进程的五个状态）" class="headerlink" title="1. 线程的生命周期（进程的五个状态）"></a>1. 线程的生命周期（进程的五个状态）</h3><p>线程的生命周期通常包括以下几个阶段：</p><ol><li><strong>创建（Creation）：</strong> 在这个阶段，线程被创建并初始化。在许多编程语言中，你需要调用特定的函数或构造一个线程对象来创建线程。线程被创建后，它处于就绪状态，等待被调度执行。</li><li><strong>就绪（Ready）：</strong> 一旦线程被创建，它进入就绪状态，表示它准备好被执行，但操作系统还没有选择执行它。在多线程环境中，可能有多个线程处于就绪状态，等待操作系统的调度。</li><li><strong>运行（Running）：</strong>当线程被操作系统调度执行时，它进入运行状态。在运行状态下，线程执行其分配的任务或代码。线程可以主动放弃 CPU 控制权，或者在某些条件下被操作系统中断，进入等待状态或就绪状态。</li><li><strong>等待/阻塞（Waiting/Blocking）：</strong> 线程可能会进入等待或阻塞状态，这通常发生在它需要等待某些条件满足或执行某些 I/O 操作时。在等待状态下，线程不会占用 CPU 时间，并且不会被调度执行。</li><li><strong>终止（Termination）：</strong> 当线程完成了其任务或被显式终止时，它进入终止状态。在这个阶段，线程释放其资源，包括内存和文件句柄，并从系统中删除。终止后的线程通常不能再次执行。</li></ol><h3 id="2-进程和线程的区别-腾讯-1"><a href="#2-进程和线程的区别-腾讯-1" class="headerlink" title="2. 进程和线程的区别(腾讯:1)"></a>2. 进程和线程的区别(腾讯:1)</h3><p>进程是操作系统进行资源分配的最小单元，进程是一个实体，有自己的地址空间，每一个进程都会有一个独一无二的编号，被称为进程标识码。</p><p>线程是操作系统进行运算调度的最小单元。线程是进程中的 执行运算的最小单位，是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，但可以访问隶属于进程的资源，共享进程的地址空间</p><p>线程是指进程内的一个执行单元,也是进程内的可调度实体。一个程序至少有一个进程,一个进程至少有一个线程，一个线程只属于一个进程.</p><h3 id="3-进程间的通讯方式-腾讯-1"><a href="#3-进程间的通讯方式-腾讯-1" class="headerlink" title="3. 进程间的通讯方式(腾讯:1)"></a>3. 进程间的通讯方式(腾讯:1)</h3><p><a href="https://blog.csdn.net/dl962454/article/details/117374916">https://blog.csdn.net/dl962454/article/details/117374916</a></p><ol><li><p>管道（pipe）：管道可用于具有亲缘关系的父子进程间的通信</p></li><li><p>消息队列：消息队列在发送数据的时候，按照一个个独立单元(消息体)进行发送，其中每个消息体规定大小块，同时发送方和接收方约定好消息类型或者正文的格式。分位直接通信和间接通信</p></li><li><p>共享内存</p></li><li><p>信号量</p></li><li><p>信号（signal）：信号是在软件层次上对中断机制的一种模拟，它是比较复杂的通信方式，用于通知进程有某事件发生，一个进程收到一个信号与处理器收到一个中断请求效果上可以说是一致的</p><p><strong>==可能用过的有==</strong></p><p>管道：使用 | ，将前一个命令（<code>ps auxf</code>）的输出，作为后一个命令（<code>grep mysql</code>）的输入</p></li></ol><h3 id="4-并发和并行的区别"><a href="#4-并发和并行的区别" class="headerlink" title="4. 并发和并行的区别"></a>4. <strong>并发和并行的区别</strong></h3><p>并发和并行最开始都是操作系统中的概念，表示的是CPU执行多个任务的方式。</p><p>并发是指一个处理器同时处理多个任务，并行是指搓个处理器或者多核的处理器同时处理多个不同的任务。</p><p>并发是交替执行，并行是同时执行</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240313000442961.png" alt="image-20240313000442961"></p><h3 id="5-死锁的条件-腾讯-1"><a href="#5-死锁的条件-腾讯-1" class="headerlink" title="5. 死锁的条件(腾讯:1)"></a>5. 死锁的条件(腾讯:1)</h3><ul><li>互斥</li><li>不可抢占</li><li>请求与保持</li><li>循环等待</li></ul><h3 id="6-死锁如何解决-腾讯-1"><a href="#6-死锁如何解决-腾讯-1" class="headerlink" title="6. 死锁如何解决(腾讯:1)"></a>6. 死锁如何解决(腾讯:1)</h3><p>超时释放</p><p>按照计划好的顺序获取锁</p><h3 id="7-为什么要加锁，锁有几种类型？-腾讯-1"><a href="#7-为什么要加锁，锁有几种类型？-腾讯-1" class="headerlink" title="7. 为什么要加锁，锁有几种类型？(腾讯:1)"></a>7. 为什么要加锁，锁有几种类型？(腾讯:1)</h3><p>在多线程情况下共享操作同一个变量时，会导致数据不一致，出现并发安全问题，所以通过锁机制来保证数据的准确和唯一。</p><p>互斥锁(排队的线程会被挂起)、自旋锁(排队的进程不会挂起，一直占用CPU资源)、递归锁(同一个线程可以多次获得该资源锁，别的线程必须等待该线程释放所有次数的锁才能获得)、读写锁(允许多个线程读但只允许一个线程写)</p><h3 id="8-操作系统的几种文件管理系统-腾讯-1"><a href="#8-操作系统的几种文件管理系统-腾讯-1" class="headerlink" title="8. 操作系统的几种文件管理系统(腾讯:1)"></a>8. 操作系统的几种文件管理系统(腾讯:1)</h3><p>ext4,ext3,NTFS</p><h3 id="9-动态链接静态链接区别"><a href="#9-动态链接静态链接区别" class="headerlink" title="9. 动态链接静态链接区别"></a>9. 动态链接静态链接区别</h3><p>一个C或者C++文件需要经过预处理、编译、汇编、链接四步才能形成一个可执行文件。</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240401163056246.png" alt="image-20240401163056246"></p><ul><li><strong>静态链接：</strong> 在链接阶段，把所有需要的函数和数据编译进一个二进制文件。在使用静态库的情况下，在编译链接可执行文件时，链接器从库中复制这些函数和数据并把它们和应用程序的其它模块组合起来创建最终的可执行文件。</li><li>空间浪费：因为每个可执行程序中对所有需要的静态库文件都要有一份副本，所以如果多个程序对同一个目标文件都有依赖，会出现同一个目标文件都在内存存在多个副本；</li><li>更新困难：每当库函数的代码修改了，这个时候就需要重新进行编译链接形成可执行程序。</li><li>运行速度快：但是静态链接的优点就是，在可执行程序中已经具备了所有执行程序所需要的任何东西，在执行的时候运行速度快。</li><li><strong>动态链接：</strong> 动态链接的基本思想是把程序按照模块拆分成各个相对独立部分，在<strong>程序运行时</strong>才将它们链接在一起形成一个完整的程序，而不是像静态链接一样把所有程序模块都链接成一个单独的可执行文件。<ul><li>共享库：就是即使需要每个程序都依赖同一个库，但是该库不会像静态链接那样在内存中存在多份副本，而是这多个程序在执行时共享同一份副本；</li><li>更新方便：更新时只需要替换原来的目标文件，而无需将所有的程序再重新链接一遍。当程序下一次运行时，新版本的目标文件会被自动加载到内存并且链接起来，程序就完成了升级的目标。</li><li>性能损耗：因为把链接推迟到了程序运行时，所以每次执行程序都需要进行链接，所以性能会有一定损失。</li></ul></li></ul><h3 id="10-介绍一下I-O多路复用"><a href="#10-介绍一下I-O多路复用" class="headerlink" title="10. 介绍一下I/O多路复用"></a>10. 介绍一下I/O多路复用</h3><p>这一篇讲的比较清楚<a href="https://zhuanlan.zhihu.com/p/63179839">https://zhuanlan.zhihu.com/p/63179839</a></p><p>一个进程虽然任意时刻只能处理一个请求，但是处理每个请求事件时，耗时控制在1ms以内，这样1秒内就可以处理上千个请求，相当于多个请求复用了一个进程，这就是多路复用。也叫做时分多路复用</p><p>select/poll/epoll内核提供给用户态的多路复用系统调用，进程可以通过一个系统调用函数从内核中获取多个事件。</p><p>==select/poll==</p><p>select仅仅知道有I/O事件发生，却并不知道是哪几个流（可能有一个，多个，甚至全部）。我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以<strong>select具有O(n)的无差别轮询复杂度</strong>，同时处理的流越多，无差别轮询时间就越长。</p><p>select 使用固定长度的 BitsMap，表示文件描述符集合，而且所支持的文件描述符的个数是有限制的。</p><p>poll 不再用 BitsMap 来存储所关注的文件描述符，取而代之用动态数组，以链表形式来组织，突破了 select 的文件描述符个数限制。</p><p><strong>缺点</strong>：每次调用 select/poll时 ，都需要把 fd 集合从用户态拷贝到内核态，这个开销在 fd 很多时会很大。对 socket 扫描是线性扫描，采用轮询的方法，效率较低（高并发时）。</p><p>==epoll==</p><h3 id="11-线程调度"><a href="#11-线程调度" class="headerlink" title="11.线程调度"></a>11.线程调度</h3><p>先到先服务：</p><p>短作业优先：长作业有可能饿死</p><p>优先级队列：</p><p>最短剩余时间优先：</p><p>时间片轮转：</p><h3 id="12-介绍一下虚拟内存"><a href="#12-介绍一下虚拟内存" class="headerlink" title="12. 介绍一下虚拟内存"></a>12. 介绍一下虚拟内存</h3><p>虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。</p><p>为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。</p><p>这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。</p><p>从上面的描述中可以看出，虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序成为可能。</p><h3 id="13-线程阻塞"><a href="#13-线程阻塞" class="headerlink" title="13. 线程阻塞"></a>13. 线程阻塞</h3><p>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态</p><p>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)</p><p>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态</p><h3 id="14-线程join-操作"><a href="#14-线程join-操作" class="headerlink" title="14. 线程join()操作"></a>14. 线程join()操作</h3><p>某个线程可以通过调用join操作来等待另外一个线程的执行，直到另外一个线程执行完毕。</p><h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><h3 id="1-排序算法和思路-腾讯-1"><a href="#1-排序算法和思路-腾讯-1" class="headerlink" title="1. 排序算法和思路(腾讯:1)"></a>1. 排序算法和思路(腾讯:1)</h3><img src="/images/面经题目/image-20240314185844274.png" alt="image-20240314185844274" style="zoom:67%;" /><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><strong>两两比较相邻记录的关键字</strong>，如果是反序则交换，直到没有反序为止。如果是从小到大排序，会把最大的值排到后面。</p><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>直接插入排序：将一个记录插入到已经排好序的有序表中，从而得到一个新的有序表。</p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>主要思路就是我们每一趟在 n-i+1 个记录中选取关键字最小的记录作为有序序列的第 i 个记录</p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>其思想简单点说就是有跨度的插入排序，这个跨度会逐渐变小(折半减少)，直到变为 1，变为 1 时记录也就基本有序，这时用到的也就是我们之前讲的直接插入排序了。</p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>堆需要是一个完全二叉树。</p><p>先把数组构造成一个大顶堆(所有父节点的值都要大于或等于子节点的值)，然后把堆顶元素和最后一个值交换。</p><p>从第h-1层开始，每个节点做一个heapify(该节点和左右孩子，选择最大的值作为根节点) </p><p><a href="https://www.bilibili.com/video/BV1Eb41147dK?from=search&amp;seid=3993837508839965022">https://www.bilibili.com/video/BV1Eb41147dK?from=search&amp;seid=3993837508839965022</a></p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><h3 id="2-查找算法和思路-腾讯-1"><a href="#2-查找算法和思路-腾讯-1" class="headerlink" title="2. 查找算法和思路(腾讯:1)"></a>2. 查找算法和思路(腾讯:1)</h3><p>顺序查找</p><p>二分查找</p><p>二叉搜索树</p><h3 id="3-链表和数组的区别，栈和队列的区别，栈和堆的区别-腾讯-1"><a href="#3-链表和数组的区别，栈和队列的区别，栈和堆的区别-腾讯-1" class="headerlink" title="3. 链表和数组的区别，栈和队列的区别，栈和堆的区别(腾讯:1)"></a>3. 链表和数组的区别，栈和队列的区别，栈和堆的区别(腾讯:1)</h3><p>操作系统中的堆和栈都是指内存空间，不同的是堆为按需申请、动态分配，例如 C 中的 malloc 函数和 C++ 中的 new 操作（当然 C++ 的 new 不仅仅是申请内存这么简单）。内存中的空闲空间并不是连续的，而是不同程序占用了不同的一块一块的内存，即使是同一个程序也可能占用了不同地方的多块内存。操作系统中则会对这些空间进行统一的管理，在应用程序提出申请时，就会从堆中按照一定算法找出一块可用内存，标记占用空间等信息之后返回其起始地址给程序。</p><h3 id="4-树有几种遍历形式，二叉树用在什么场景-腾讯-1"><a href="#4-树有几种遍历形式，二叉树用在什么场景-腾讯-1" class="headerlink" title="4. 树有几种遍历形式，二叉树用在什么场景(腾讯:1)"></a>4. 树有几种遍历形式，二叉树用在什么场景(腾讯:1)</h3><p>前序遍历，中序遍历，后序遍历</p><p>查询，二叉排序树，计算表达式</p><h3 id="5-求图中最短路径的算法"><a href="#5-求图中最短路径的算法" class="headerlink" title="5. 求图中最短路径的算法"></a>5. 求图中最短路径的算法</h3><p><strong>Dijkstra(迪杰斯特拉)算法</strong></p><p><strong>Floyd-Warshall算法</strong></p><h3 id="6-B树和B-树"><a href="#6-B树和B-树" class="headerlink" title="6. B树和B+树"></a>6. B树和B+树</h3><p>==B树==</p><p>B树是一种平衡的多路查找树，允许一个节点存放多个数据。</p><p>树中每个节点至多有m个孩子节点。</p><p>每个节点的结构如下所示。P是指向孩子节点的指针，k是关键字。n代表关键字的个数</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240407154420415.png" alt="image-20240407154420415"></p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240402214328942.png" alt="image-20240402214328942"></p><p>为了描述B-树，首先定义一条记录为一个键值对[key,data]，key和data分布在整棵树的结构当中</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240402214806914.png" alt="image-20240402214806914"></p><p>每个节点一般放置一页的数据，每个节点的大小是16K。data的大小比较大，会限制每个节点存储的键值数目，所以树的深度会变大。</p><p>B+树的数据不存储在非叶子结点。非叶子结点只存储记录和指针，叶子结点存储数据 </p><h3 id="7-红黑树"><a href="#7-红黑树" class="headerlink" title="7. 红黑树"></a>7. 红黑树</h3><p>是一种自平衡的二叉搜索树。</p><p>红黑树的原则有以下几点：</p><ul><li>特性1：节点非黑即红</li><li>特性2：根节点一定是黑色</li><li>特性3：叶子节点（NIL）一定是黑色</li><li>特性4：每个红色节点的两个子节点都为黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</li><li>特性5：从任一节点到其每个叶子的所有路径，都包含相同数目的黑色节点。</li></ul><h3 id="8-KMP匹配算法"><a href="#8-KMP匹配算法" class="headerlink" title="8. KMP匹配算法"></a>8. KMP匹配算法</h3><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h3><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h3 id="1-有几种类型的数据库-腾讯-1"><a href="#1-有几种类型的数据库-腾讯-1" class="headerlink" title="1. 有几种类型的数据库(腾讯:1)"></a>1. 有几种类型的数据库(腾讯:1)</h3><h3 id="2-索引有哪些怎么实现的-腾讯-1"><a href="#2-索引有哪些怎么实现的-腾讯-1" class="headerlink" title="2. 索引有哪些怎么实现的(腾讯:1)"></a>2. 索引有哪些怎么实现的(腾讯:1)</h3><h3 id="3-数据库事务类型有哪些-腾讯-1"><a href="#3-数据库事务类型有哪些-腾讯-1" class="headerlink" title="3. 数据库事务类型有哪些(腾讯:1)"></a>3. 数据库事务类型有哪些(腾讯:1)</h3><h3 id="4-LSM-tree介绍，什么是追加写"><a href="#4-LSM-tree介绍，什么是追加写" class="headerlink" title="4. LSM-tree介绍，什么是追加写"></a>4. LSM-tree介绍，什么是追加写</h3><p>LSM-tree(Log Structured-Merge Tree) 是一种分层，有序，面向磁盘的数据结构，其核心思想是充分了利用了，磁盘批量的顺序写要远比随机写性能高出很多。这种结构的写入，全部都是以Append的模式追加，不存在删除和修改。</p><p><img src="/images/%E9%9D%A2%E7%BB%8F%E9%A2%98%E7%9B%AE/image-20240405213820270.png" alt="image-20240405213820270"></p><p>LSM树有以下三个重要组成部分：</p><p>==MemTable==</p><p>MemTable是在***内存***中的数据结构，用于保存最近更新的数据，会按照Key有序地组织这些数据。</p><p>==Immutable MemTable==</p><p>当 MemTable达到一定大小后，会转化成Immutable MemTable。Immutable MemTable是将转MemTable变为SSTable的一种中间状态。写操作由新的MemTable处理，在转存过程中不阻塞数据更新操作。</p><p>==SSTable(Sorted String Table)==</p><p><em><strong>有序键值对</strong></em>集合，是LSM树组在磁盘中的数据结构。为了加快SSTable的读取，可以通过建立key的索引以及布隆过滤器来加快key的查找。</p><p>LSM树(Log-Structured-Merge-Tree)正如它的名字一样，LSM树会将所有的数据插入、修改、删除等操作记录(注意是操作记录)保存在内存之中，当此类操作达到一定的数据量后，再批量地顺序写入到磁盘当中。当MemTable达到一定大小flush到持久化存储变成SSTable后，在不同的SSTable中，可能存在相同Key的记录，当然最新的那条记录才是准确的。</p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1>]]></content>
    
    
    <categories>
      
      <category>找工作</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>项目经历</title>
    <link href="/2024/03/12/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/"/>
    <url>/2024/03/12/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="基于知识图谱的Python课程教学辅助平台"><a href="#基于知识图谱的Python课程教学辅助平台" class="headerlink" title="基于知识图谱的Python课程教学辅助平台"></a><strong>基于知识图谱的Python课程教学辅助平台</strong></h1><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a><strong>项目背景</strong></h2><h2 id="我的工作"><a href="#我的工作" class="headerlink" title="我的工作"></a><strong>我的工作</strong></h2><h2 id="技术难点和解决方案"><a href="#技术难点和解决方案" class="headerlink" title="技术难点和解决方案"></a>技术难点和解决方案</h2><h3 id="1-如何使用session的，用到cookie了吗"><a href="#1-如何使用session的，用到cookie了吗" class="headerlink" title="1.     如何使用session的，用到cookie了吗"></a>1.     <strong>如何使用session的，用到cookie了吗</strong></h3><p><img src="../images/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/image-20240312171203658.png" alt="image-20240312171203658"></p><h3 id="2-如何运行学生所写的程序"><a href="#2-如何运行学生所写的程序" class="headerlink" title="2.     如何运行学生所写的程序"></a>2.     <strong>如何运行学生所写的程序</strong></h3><p>如果是编程题，先存储学生的答案，然后，在程序中通过subprocess命令调用中间脚本文件，该脚本文件会读取该题目对应的每一组测试用例，然后测试学生提交的代码，输出得分，被subprocess.check_output()得到</p><h1 id="数据中心存储流量控制"><a href="#数据中心存储流量控制" class="headerlink" title="数据中心存储流量控制"></a><strong>数据中心存储流量控制</strong></h1><p>随着网络带宽的快速提升，以及NVM等高速存储介质的出现和推广，网络IO成为系统瓶颈，RDMA因为它高带宽低延迟的特性在数据中心内部得到了广泛的运用，但是这些发展同时也带来了一些新的问题，比如RDMA协议中的共享接收缓存的管理问题，主机端的IO处理速率与IO到达速率不匹配而导致的主机拥塞问题，以及SSD处理能力随不同业务场景，IO分布发生动态变化的问题。在以前，大部分网络研究只关注网络环节，但在实际业务场景中，主机拥塞也是一个不容忽视的问题。而我们的研究主要就是针对主机端内部可能出现的瓶颈点，包括共享接收队列SRQ、SSD，最后我们还对主机端和网络端的协同拥塞控制进行了研究。</p><h2 id="项目背景-1"><a href="#项目背景-1" class="headerlink" title="项目背景"></a><strong>项目背景</strong></h2><h2 id="我的工作-1"><a href="#我的工作-1" class="headerlink" title="我的工作"></a><strong>我的工作</strong></h2><h2 id="技术难点和解决方案-1"><a href="#技术难点和解决方案-1" class="headerlink" title="技术难点和解决方案"></a><strong>技术难点和解决方案</strong></h2><h3 id="仿真平台的集成"><a href="#仿真平台的集成" class="headerlink" title="仿真平台的集成"></a>仿真平台的集成</h3><p>一开始选择了DiskSim作为仿真器接入，但是没有后台垃圾回收机制，而且在请求中无法指定读写地址。又重新换了MQSim使用仿真器。</p><p>MQSim和ns3的时间同步也是问题，因为在MQSim原平台中它是一次性读取所有的预先设定好的IO请求，然后将它们都执行完后返回一个平均处理延时。但是HPCC平台提交过来的请求是一个一个的，而且时间是不定的，其次拥塞控制需要得到每个请求的处理延时。</p><p>为了解决这个问题，我们通过分析MQSim的源码，发现MQSim在处理一个请求时，会生成多个子事件并插入到事件链表中，一开始我们是想从整个事件链表中找出每个IO请求的开始事件和结束事件，然后进行相应的修改来满足我们的需求，但我们发现这比较困难，而且可能花费的工作量也比较大。之后我们是通过在MQsim的一个事件注册的函数中调用回调函数直接将每个事件插入到HPCC仿真平台的事件链表中来实现的。然后我们也通过修改平均处理延时的统计函数获取了单个IO的处理延时</p><h3 id="协议实现"><a href="#协议实现" class="headerlink" title="协议实现"></a>协议实现</h3><p>HPCC目前还不能够完全模拟基于RDMA的存储网络。我们首先结合RDMA流程和HPCC源码抽象出了我们需要实现的模块、类、和流程控制的方法。因为RDMA协议主要是现在网卡部分，所以除了新增模块之外，我们需要在不影响原有功能的前提下，对HPCC仿真平台的底层代码进行修改，来支持上层的RDMA协议。其中主要包括UDP、ACK包头的修改，以及在收到数据包后我们如何对这个数据包所携带的命令进行解析，并判断当前这个命令所处的流程阶段，然后再进行相应的流程控制，拥塞信息的收集以及速率调节，然后为了支持RDMA协议中的RNR机制，我们还额外构建了RNR数据包。</p><h3 id="平台架构设计中两个协议之间的交互"><a href="#平台架构设计中两个协议之间的交互" class="headerlink" title="平台架构设计中两个协议之间的交互"></a>平台架构设计中两个协议之间的交互</h3><h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a><strong>相关问题</strong></h2><h3 id="RDMA-流程"><a href="#RDMA-流程" class="headerlink" title="RDMA 流程"></a>RDMA 流程</h3><p>RDMA verbs操作主要支持两种网络操作语义：</p><p>消息语义——SEND、RECV。但是和Socket不同，在发送端SEND之前，接收端必须要先RECV,因为RDMA的内存都是用户自己来管理，接收端需要事先确定内存资源来接收发送端发送的数据。</p><p>内存语义——RDMA提供READ、WRITE两种内存语义操作，它们都需要知道远程机器内存虚拟地址。内存语义操作不需要CPU参与实际数据传输部分，完全由网卡硬件完成，所以可以达到很高的带宽和很低的延迟。</p><h4 id="SEND-RECV操作"><a href="#SEND-RECV操作" class="headerlink" title="SEND-RECV操作"></a>SEND-RECV操作</h4><img src="../images/项目经历/image-20240407215124823.png" alt="image-20240407215124823" style="zoom:67%;" /><ol><li>接收端APP以WQE的形式下发一次RECV任务。</li><li>接收端的RNIC从RQ中获取该WQE(包含地址)，准备接收数据</li><li>发送端APP以WQE的形式下发一次SEND任务</li><li>发送端的RNIC从SQ中获取该任务，从内存中获取待发送的数据，组装数据包</li><li>发送端网卡将数据包通过物理链路层发送给接收端网卡</li><li>接收端RNIC收到数据，进行校验后回复ACK报文给发送端</li><li>接收端RNIC将数据放到WQE中指定的位置，然后生成CQE，放置到CQ中</li><li>接收端APP取得任务完成信息</li><li>发送端网卡收到ACK后，生成CQE，放置到CQ中</li><li>发送端APP取得任务完成信息</li></ol><h3 id="NVMe-流程"><a href="#NVMe-流程" class="headerlink" title="NVMe 流程"></a>NVMe 流程</h3><p><img src="../images/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/image-20240407220733119.png" alt="image-20240407220733119"></p><p>在NVMe的定义中，每一个NVMe命令的执行流程有八步，Host与Controller之间通过PCIe TLP传递信息。</p><ol><li>Host提交一个新的Command。Host下发一个新的Command时，将其放入Host内存的SQ中。</li><li>Host通知controller提取Command。Host把Command写入SQ后，通知Controller自己已经提交了新的请求需要处理。这个过程通过更新在Controller内部的寄存器SQ Tail Doorbell来完成</li><li>Controller从SQ中获取请求，然后在Controller内部的SQ Head Pointer寄存器中更新Head所在的位置。可以一次取出多个command进行批量处理</li><li>Controller执行从SQ中提取的请求。执行Read/Wirte Command时，这个过程会与Host Memory进行数据传递。</li><li>Controller将Commands的完成状态写入CQ。此时，Controller需要更新CQ Tail Pointer寄存器。</li><li>Controller通过发送一个中断信息告知Host，之前提交的commands已经执行完毕。</li><li>Host检查CQ中的Completion信息</li><li>Host更新Controller内部的CQ Head Doorbell。通知Controller Host已经处理了Command的执行结果。</li></ol><h3 id="NVMe-over-RDMA流程"><a href="#NVMe-over-RDMA流程" class="headerlink" title="NVMe over RDMA流程"></a>NVMe over RDMA流程</h3><h3 id="RDMA有socket层吗，socket层是做什么的"><a href="#RDMA有socket层吗，socket层是做什么的" class="headerlink" title="RDMA有socket层吗，socket层是做什么的"></a>RDMA有socket层吗，socket层是做什么的</h3><h3 id="为什么选择HPCC平台"><a href="#为什么选择HPCC平台" class="headerlink" title="为什么选择HPCC平台"></a>为什么选择HPCC平台</h3><p>HPCC是基于ns3实现的，并且实现了很多拥塞控制的算法，同时实现了QP，SQE等接口，可以继续实现RDMA。</p><h3 id="simpy架构"><a href="#simpy架构" class="headerlink" title="simpy架构"></a>simpy架构</h3><p>SimPy 是一个基于标准 Python 以进程为基础的离散事件仿真框架。SimPy 是离散事件驱动的仿真库。所有活动部件，例如车辆、顾客,、即便是信息，都可以用 <code>process</code> (进程) 来模拟。这些 <code>process</code> 存放在 <code>environment</code> (环境) 。所有 <code>process</code> 之间，以及与<code>environment</code> 之间的互动，通过 <code>event</code> (事件) 来进行.</p><h1 id="基于云存储平台的租户性能保障算法"><a href="#基于云存储平台的租户性能保障算法" class="headerlink" title="基于云存储平台的租户性能保障算法"></a><strong>基于云存储平台的租户性能保障算法</strong></h1>]]></content>
    
    
    <categories>
      
      <category>找工作</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自我介绍</title>
    <link href="/2024/03/11/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/03/11/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><p>面试官您好，我叫孙志斌，本科和研究生都就读于中南大学计算机学院，本科的专业大数据，研究生的专业是计算机科学。本科期间曾任学院学生会主席，研究生期间任班级班长。本科期间我学习过python/计算机网络/操作系统等计算机基础课程，以及深度学习/云计算/数据挖掘与分析等专业课 专业成绩排名为前10%，然后本校保研。</p><p><strong>在大四给导师开发了一个基于知识图谱的Python课程教学辅助平台并投入使用</strong></p><p> ● 该项目基于MTV的设计模式和Django框架实现, 使用neo4j图数据库存储用户数据。实现了十多个功能，能够帮助我们批改平时作业。</p><p> ● 项目中，我实现了从需求分析到开发维护全部的工作。</p><p> ● 该项目当前还在使用，我们总结系统的使用情况写了一篇论文，被EI收录。</p><p>研究生期间我的主要研究方向是基于NVMe的存储栈分析与设计，参与了一个与华为2012实验室中央硬件工程院合作的横向项目。<strong>该项目是面向数据中心存储网络系统的流量管理研究</strong></p><p>● 该项目在HPCC开源代码基础上结合SSD仿真器设计实现了存储网络流量仿真平台。该平台能够基本满足存储网络系统的各种仿真需求，它能同时模拟网络和SSD，并且能够较真实的模拟出存储网络系统中的行为和特性，如读写命令的处理等等。</p><p>● 项目中我主要参与基于NVMe over RDMA的存储网络仿真平台的架构设计与开发，SSD仿真器的集成，同时设计了SSD拥塞控制算法，并分别在simpy和ns3上实现。然后我也参与了整个系统的评估测试、仿真数据处理、文档撰写等工作。</p><p>● 其次我们所设计的SRQ、SSD、端网协同的发送端流量控制协议能够很好的解决存储网络系统中的主机拥塞问题，能保证接收端的服务利用率达到95%以上，同时也能保证网络带宽的高利用率。这三个协议也将在华为数据中心落地部署。</p>]]></content>
    
    
    <categories>
      
      <category>找工作</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序学习</title>
    <link href="/2023/07/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/07/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="学习使用uniapp-HBuilderX-vue开发一个微信小程序"><a href="#学习使用uniapp-HBuilderX-vue开发一个微信小程序" class="headerlink" title="学习使用uniapp+HBuilderX+vue开发一个微信小程序"></a>学习使用uniapp+HBuilderX+vue开发一个微信小程序</h1><h2 id="相关背景介绍"><a href="#相关背景介绍" class="headerlink" title="相关背景介绍"></a>相关背景介绍</h2><ol><li>uni-app<a href="https://uniapp.dcloud.net.cn/">介绍教程</a></li><li>HBuilderX<a href="https://hx.dcloud.net.cn/">介绍教程</a></li><li><a href="https://www.bilibili.com/video/BV1eT411L7yj">B站视频</a></li></ol><h2 id="在HBuilderX中启动demo"><a href="#在HBuilderX中启动demo" class="headerlink" title="在HBuilderX中启动demo"></a>在HBuilderX中启动demo</h2><h3 id="HbuilderX和微信开发者工具搭配"><a href="#HbuilderX和微信开发者工具搭配" class="headerlink" title="HbuilderX和微信开发者工具搭配"></a>HbuilderX和微信开发者工具搭配</h3><p>出现问题，无法通过HBuilderX打开微信开发者工具</p><p><img src="../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/image-20230707144940783.png" alt="image-20230707144940783"></p><p>解决方案：</p><p>打开【<a href="https://so.csdn.net/so/search?q=%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7&spm=1001.2101.3001.7020">微信开发者工具</a>】</p><p>点击【设置】-【安全设置】-【服务端口】开启即可。</p><h3 id="在使用unnicloud函数的时候，像数据进行增删改查的操作时出错"><a href="#在使用unnicloud函数的时候，像数据进行增删改查的操作时出错" class="headerlink" title="在使用unnicloud函数的时候，像数据进行增删改查的操作时出错"></a>在使用unnicloud函数的时候，像数据进行增删改查的操作时出错</h3><img src="../images/微信小程序学习/image-20230708153803556.png" alt="image-20230708153803556" style="zoom:70%;" /><p><img src="../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/image-20230708153739116.png" alt="image-20230708153739116"></p><p>解决方案：</p><p><img src="../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/image-20230708153843645.png" alt="image-20230708153843645"></p><p>如果添加了这三个表还不行。就在unicloud的控制台端提前建表。</p><h2 id="B站视频的源码"><a href="#B站视频的源码" class="headerlink" title="B站视频的源码"></a>B站视频的源码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- Vue中使用v-model指令来实现表单元素和数据的双向绑定。监听用户的输入，然后更新数据。 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;留言&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;publish()&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>发布<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;item._id&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;item.content&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        content: <span class="hljs-string">&#x27;&#x27;</span>,</span><br>        list: [],<br>      &#125;<br>    &#125;,<br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">onLoad</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-comment">// uniCloud.callFunction都是去查找云函数。</span></span><br>      uniCloud.callFunction(&#123;<br><span class="javascript">        <span class="hljs-comment">// name指定使用哪一个cloudfunctions中的云函数</span></span><br><span class="javascript">        name: <span class="hljs-string">&#x27;fun&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-comment">// data是传给云函数的数据</span></span><br>        data: &#123;<br><span class="javascript">          <span class="hljs-comment">// api在函数中用于类似switch的用法</span></span><br><span class="javascript">          api: <span class="hljs-string">&quot;getMessages&quot;</span>,</span><br><span class="javascript">        &#125; <span class="hljs-comment">//then中需要写一个回调函数，res是对调函数的参数，中括号里的是回调函数。</span></span><br><span class="javascript">      &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.list = res.result.data;</span><br>      &#125;)<br>    &#125;,<br>    methods: &#123;<br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">publish</span>(<span class="hljs-params"></span>)</span> &#123;</span><br>        uniCloud.callFunction(&#123;<br><span class="javascript">          name: <span class="hljs-string">&#x27;fun&#x27;</span>,</span><br>          data: &#123;<br><span class="javascript">            api: <span class="hljs-string">&#x27;publish&#x27;</span>,</span><br><span class="javascript">            content: <span class="hljs-built_in">this</span>.content,</span><br>          &#125;<br><span class="javascript">        &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(res.result);</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.list.push(&#123;</span><br>            _id: res.result._id,<br><span class="javascript">            <span class="hljs-comment">// 这地方不能用 res.result.content代替，因为查询语句的返回值是</span></span><br><span class="javascript">            content: <span class="hljs-built_in">this</span>.content,</span><br>          &#125;)<br><span class="javascript">          <span class="hljs-built_in">this</span>.content = <span class="hljs-string">&quot;&quot;</span>;</span><br>        &#125;)<br>      &#125;<br>    &#125;<br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  .content &#123;<br><span class="css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">    <span class="hljs-attribute">align-items</span>: center;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span>;</span><br>  &#125;<br><br>  .input &#123;<br><span class="css">    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">6</span>rpx;</span><br><span class="css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br>  &#125;<br><br>  .box &#123;<br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">40</span>rpx;</span><br><span class="css">    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20</span>rpx;</span><br>  &#125;<br><br><br>  .text-area &#123;<br><span class="css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">    <span class="hljs-attribute">justify-content</span>: center;</span><br>  &#125;<br><br>  .title &#123;<br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">36</span>rpx;</span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#8f8f94</span>;</span><br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="HBuilderX使用小程序UI组件库-Vant-Weapp"><a href="#HBuilderX使用小程序UI组件库-Vant-Weapp" class="headerlink" title="HBuilderX使用小程序UI组件库 Vant Weapp"></a>HBuilderX使用小程序UI组件库 Vant Weapp</h1><p>Vant Weapp<a href="https://youzan.github.io/vant-weapp/#/home">使用手册</a></p><p>如果有不明白的可以看Vant<a href="https://www.w3cschool.cn/vantlesson/">教程</a></p><p>用该组件对上文开发的留言板小程序进行界面优化。具体操作如下</p><h2 id="在HBuilderX中引入Vant-Weapp组件库"><a href="#在HBuilderX中引入Vant-Weapp组件库" class="headerlink" title="在HBuilderX中引入Vant Weapp组件库"></a>在HBuilderX中引入Vant Weapp组件库</h2><h3 id="通过npm安装"><a href="#通过npm安装" class="headerlink" title="通过npm安装"></a>通过npm安装</h3><p><a href="https://blog.csdn.net/Establish_bug/article/details/102792796">参考网站</a></p><p>注意事项：</p><ol><li><p>在我的微信开发者工具中没有找到本地设置中的<strong>使用npm模块</strong>，所以默认使用了npm模块。</p></li><li><p>按照链接的步骤可以完成操作，但是如果使用了自定义的组件，没有办法使用自动代码提示功能。</p></li><li><p>Vant Weapp中没有<code>input</code>输入框的标签，所以使用他们提供的<code>van-field</code>标签</p><p><img src="../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/image-20230709234646558.png" alt="image-20230709234646558"></p><p><img src="../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/image-20230709234724161.png" alt="image-20230709234724161"></p></li></ol><h3 id="如何给vue-vant框架-Field-输入框加一个外边框"><a href="#如何给vue-vant框架-Field-输入框加一个外边框" class="headerlink" title="如何给vue vant框架 Field 输入框加一个外边框"></a>如何给vue vant框架 Field 输入框加一个外边框</h3><p>使用<code>custom-style</code>属性</p><p><img src="../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/image-20230710104626796.png" alt="image-20230710104626796"></p><p><img src="../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/image-20230710104636437.png" alt="image-20230710104636437"></p><p>但是看起来很丑，如何在输入框和按钮之间拉开一些距离呢.</p><p>在使用的过程中发现Vant Weapp组件库并不适合Vue。所以使用<a href="https://www.uviewui.com/"> uView</a>组件。</p><h1 id="HBuilderX使用uni-app生态专用的UI框架uView"><a href="#HBuilderX使用uni-app生态专用的UI框架uView" class="headerlink" title="HBuilderX使用uni-app生态专用的UI框架uView"></a>HBuilderX使用uni-app生态专用的UI框架uView</h1><p>按照官网的教程来，进入快速上手的项目之后微信小程序没有任何的显示。</p><p>快速上手的这个项目就是没有显示，问题不大。把button之类的复制进去就可以了。</p><p>重点就需要在之后注意一下<code>u-action-sheet</code>在之后是如何操作的。</p><h2 id="用到之前开发的yd项目中"><a href="#用到之前开发的yd项目中" class="headerlink" title="用到之前开发的yd项目中"></a>用到之前开发的yd项目中</h2><p>将<code>input</code>标签的内容改为<code>u-field</code>标签。但是uView2组件库中不存在<code>u-field</code>组件，所以使用<code>u-input</code>组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">u--input</span> <span class="hljs-attr">clearable</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;bottom&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">u--input</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以通过Vue.js的语法来实现将uView2组件的属性绑定为动态值，下面将border的值绑定为了动态的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">u--input</span> <span class="hljs-attr">clearable</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span> <span class="hljs-attr">:border</span>=<span class="hljs-string">&quot;nptBorder&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">u--input</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        nptBorder: <span class="hljs-string">&#x27;surround&#x27;</span>,</span><br>      &#125;<br>    &#125;,<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下面将<code>button</code>改为<code>u-button</code>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">u-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;publish()&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;small&quot;</span>&gt;</span>发布<span class="hljs-tag">&lt;/<span class="hljs-name">u-button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>出现了button的长度太长，直接占满整条view的情况。</p><p><img src="../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/image-20230713093502074.png" alt="image-20230713093502074"></p><p>根据文档原文所说，如果是为了修改按钮与其他元素之间的距离或者宽度等，可以给按钮外面套一个<code>view</code>元素，控制这个<code>view</code>与其他元素的距离或者宽度，即可达到同等效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:20%;margin:5rpx;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">u-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;publish()&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;small&quot;</span>&gt;</span>发布<span class="hljs-tag">&lt;/<span class="hljs-name">u-button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/image-20230713093905605.png" alt="image-20230713093905605"></p><p>如果想自己改变输入框的样式，可以使用<code>u-input</code>标签中的<code>customStyle</code>属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">u--input</span> <span class="hljs-attr">:customStyle</span>=<span class="hljs-string">&quot;customInputStyle&quot;</span> <span class="hljs-attr">clearable</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span> <span class="hljs-attr">:border</span>=<span class="hljs-string">&quot;nptBorder&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">u--input</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br>        customInputStyle: &#123;<br><span class="javascript">          backgroundColor: <span class="hljs-string">&#x27;red&#x27;</span>,</span><br><span class="javascript">          color: <span class="hljs-string">&#x27;white&#x27;</span>,</span><br><span class="javascript">          borderRadius: <span class="hljs-string">&#x27;10rpx&#x27;</span></span><br>        &#125;<br>      &#125;<br>    &#125;,<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>其中注意返回的数据和属性都要用驼峰写法，效果如下</p><p><img src="../images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/image-20230713145424710.png" alt="image-20230713145424710"></p><p>下面用uView美化下面的输出列表窗口。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">u-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">u-list-item</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item._id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">u-cell</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;item.content&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- name是icon的名字，不同的name是不同的icon --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">u-icon</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;right-icon&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;25&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minus-circle&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;del(item._id)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">u-icon</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">u-cell</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">u-list-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">u-list</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="添加新的功能，前端点击之后可以删除对应的cell的引用"><a href="#添加新的功能，前端点击之后可以删除对应的cell的引用" class="headerlink" title="添加新的功能，前端点击之后可以删除对应的cell的引用"></a>添加新的功能，前端点击之后可以删除对应的cell的引用</h2><p>首先是前端的函数，函数传进来的参数是每个<code>item</code>的<code>id</code>，再调用对应的云函数进行删除操作。在vue文件的js代码和之前的相同，调用<code>name</code>是<code>fun</code>的云函数，然后传数据给云函数，<code>api</code>是<code>del</code>，<code>key</code>是之前说的<code>item</code>的<code>id</code>。</p><p>之后是自定义云函数fun，key就是要删除的数据的id，然后根据key获得对应的表项，之后对该表项进行删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (event.api == <span class="hljs-string">&#x27;del&#x27;</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;del&#x27;</span> + event.key);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> db.collection(<span class="hljs-string">&#x27;message&#x27;</span>).doc(event.key).remove();<br>&#125;<br></code></pre></td></tr></table></figure><p><u>注意：这里我们使用的是nosql语法，其实在uniCloud中已经更新到了使用jql语法，我们下节会介绍如何把nosql改成jql</u></p><p><code>remove()</code>的返回值是 {“affectedDocs”:1,”deleted”:1}。虽然此时在数据库中已经把数据删除了，但是并没有在前端把数据删除。所以还需要在回调函数中对list的内容进行删除。具体代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.result);<br>    <span class="hljs-built_in">this</span>.list.some(<span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (item._id == key) &#123;<br>            <span class="hljs-built_in">this</span>.list.splice(i, <span class="hljs-number">1</span>)<br>            <span class="hljs-comment">// 在数组的some方法中，如果return true，就会立即终止这个数组的后续循环,所以相比较foreach，如果想要终止循环，那么建议使用some</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="独立开发一个运动及情绪监测的微信小程序"><a href="#独立开发一个运动及情绪监测的微信小程序" class="headerlink" title="独立开发一个运动及情绪监测的微信小程序"></a>独立开发一个运动及情绪监测的微信小程序</h1><h2 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h2><ul><li><strong>用户注册和资料管理</strong>：注册账号并填写个人资料，包括基本信息(昵称、年龄、学校、专业、手机号码)和兴趣爱好等。</li><li><strong>运动监测</strong>：记录运动状态，包括步数、距离、速度、卡路里消耗、运动时间等参数。</li><li><strong>情绪监测</strong>：记录情绪状态。1）情绪标签：使用情绪标签创建标签或关键词，描述情绪体验，例如压力、兴奋、困惑等。2）情绪评分：采用量表评估情绪强度和持续时间。</li><li><strong>心理健康自测****：</strong>提供多种信效度高的心理健康评估量表进行自测，例如焦虑、抑郁、压力等。定期追踪和提醒：允许用户定期进行心理健康自测，并提供定期提醒和通知。通过持续的自测和跟踪，帮助用户了解自己的心理健康状况的变化和趋势。**</li><li><strong>数据可视化：</strong>将运动和情绪数据以图表和统计数据的形式展示给用户，帮助他们更好地了解自己的运动和情绪变化。1）运动日志：使用折线图可以显示运动距离、运动时长等数据随时间的变化。2）情绪日志：根据每日情绪标签、情绪评分生成图表，将情绪变化趋势可视化，例如每天的情绪分布、情绪的高峰和低谷等。情绪状态也可以通过情绪日历表或者色块的方式进行可视化，让用户更清晰地了解自己的情绪变化**</li><li><strong>用户反馈和建议：</strong>用户反馈和改进，通过用户调查或意见反馈功能，了解用户的体验和需求，以改进和优化微信小程序。</li></ul><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2>]]></content>
    
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为网卡项目</title>
    <link href="/2021/12/01/%E5%8D%8E%E4%B8%BA%E7%BD%91%E5%8D%A1%E9%A1%B9%E7%9B%AE/"/>
    <url>/2021/12/01/%E5%8D%8E%E4%B8%BA%E7%BD%91%E5%8D%A1%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="DPDK和SPDK"><a href="#DPDK和SPDK" class="headerlink" title="DPDK和SPDK"></a>DPDK和SPDK</h1><h2 id="DPDK-Data-Plane-Development-Kit"><a href="#DPDK-Data-Plane-Development-Kit" class="headerlink" title="DPDK(Data Plane Development Kit)"></a>DPDK(Data Plane Development Kit)</h2><p>简单说，DPDK应用程序运行在操作系统的User Space，利用自身提供的数据面库进行收发包处理，绕过了Linux内核态协议栈，以提升报文处理效率。</p><p>DPDK是一组lib库和工具包的集合。最简单的架构描述如下图所示：</p><p><img src="https://pic3.zhimg.com/80/v2-f4b703475096e19c669d6cfc7128311e_1440w.jpg" alt="img"></p><p>DPDK由于做用户态polling mode，需要对线程模型、内存管理等系统级的资源做定制的管理。例如dpdk中通过使用cpu的亲和性对thread和core做绑定，单个thread独享一个cpu core。再例如dpdk所使用的大页内存等等。这些基础资源的管理都是为用户态polling mode服务。</p><h2 id="SPDK（Storage-Performance-Development-Kit）"><a href="#SPDK（Storage-Performance-Development-Kit）" class="headerlink" title="SPDK（Storage Performance Development Kit）"></a>SPDK（Storage Performance Development Kit）</h2><p>关于SPDK的介绍<a href="https://www.cnblogs.com/vlhn/p/7727141.html">https://www.cnblogs.com/vlhn/p/7727141.html</a></p><p>SPDK(存储性能开发套件)为<strong>编写用户态存储应用</strong>提供了一套工具和库函数。</p><p>SPDK的基石是一个运行在用户空间的、采用轮询模式的、异步的、无锁的NVMe驱动。用户空间应用程序可直接访问SSD盘，而且是零拷贝、高度并行地访问SSD盘。</p><p>spdk和dpdk的区别在于，spdk主要针对存储性能的提高，关键是nvme驱动。dpdk主要针对网络性能的提高。核心思想spdk和dpdk大致相同。因此也需要对系统资源做独特的管理，这点和dpdk一样。为了资源复用，spdk在EAL这一层统一采用dpdk的实现。无须再去自己实现一套内存管理、thread模型等底层机制。</p><h1 id="RDMA相关的基础知识"><a href="#RDMA相关的基础知识" class="headerlink" title="RDMA相关的基础知识"></a>RDMA相关的基础知识</h1><p>这里有一篇汇总的博客记录RDMA的相关文档和相关知识<a href="https://blog.csdn.net/bandaoyu/article/details/112861368">https://blog.csdn.net/bandaoyu/article/details/112861368</a></p><p>还有这一篇<a href="https://blog.csdn.net/t1506376703/article/details/106911631/?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.opensearchhbase&amp;spm=1001.2101.3001.4242.1">https://blog.csdn.net/t1506376703/article/details/106911631/?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.opensearchhbase&amp;spm=1001.2101.3001.4242.1</a></p><h2 id="实现RDMA的技术"><a href="#实现RDMA的技术" class="headerlink" title="实现RDMA的技术"></a>实现RDMA的技术</h2><p>目前，有三种支持RDMA的技术：IB(InfiniBand)、RoCE(RDMA over Converged Ethernet)、以太网iWARP(the Internet Wide Area RDMA Protocol)。这三种技术使用同一API，但它们有着不同的物理层和链路层。</p><p>IB: 原生支持RDMA，它从硬件级别保证可靠传输；</p><p>iWARP: 基于 以太网之上的TCP or SCTP 做 RDMA，利用 TCP or SCTP 达到可靠传输，对网络设备的要求比较少；</p><p>RoCE: 基于以太网做 RDMA，消耗的资源比 iWARP 少，支持的特性比 iWARP 多，需要额外做可靠传输。</p><p>在以太网解决方案中，RoCE相对于iWARP来说有着明显的优势，这些优势体现在延时、吞吐率和 CPU负载。<br><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211207153558432.png" alt="image-20211207153558432" style="zoom:50%;" /></p><h2 id="OFED"><a href="#OFED" class="headerlink" title="OFED"></a>OFED</h2><p>Linux Drivers Mellanox OpenFabrics Enterprise Distribution for Linux (MLNX_OFED)是一个单独的VPI(Virtual Protocol Interconnect，虚拟协议互联)软件栈。是网卡的驱动</p><h2 id="infiniband和Ethernet的区别"><a href="#infiniband和Ethernet的区别" class="headerlink" title="infiniband和Ethernet的区别"></a>infiniband和Ethernet的区别</h2><p>InfiniBand是一种开放标准的高带宽，低时延，高可靠的<a href="https://www.zhihu.com/search?q=%E7%BD%91%E7%BB%9C%E4%BA%92%E8%81%94%E6%8A%80%E6%9C%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:163104439%7D">网络互联技术</a>。</p><p>对于Ethernet毋庸多言，和IP技术构成了目前世界上整个互联网络大厦的基石，所有人与智能设备皆依靠Ethernet实现万物互联，这与其设计初衷就是为了能够实现更好的兼容有关，能让不同的系统可以更好的互连互通，这样使得Ethernet自诞生之初就具有非常强的适应性，经过数十年的发展成为互联网中事实上的标准。</p><p>而InfiniBand，作为标准制定的初衷是为了解决高性能计算场景中突破集群中数据传输瓶颈痛点应运而生的一种互连标准，从制定之初就定位为高端应用，互连互通不是主要矛盾，高性能通信才是主要切入点，所以，相对于<a href="https://www.zhihu.com/search?q=Ethernet%E6%8A%80%E6%9C%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:163104439%7D">Ethernet技术</a>而言，由于定位的差异导致InfiniBand与生俱来就有很多和Ethernet的不同，主要表现在带宽、时延、网络可靠性、和组网方式上。</p><p><strong>InfiniBand就是使用了RDMA技术</strong>。</p><p>实验室的网卡是ConnectX® -5 EN Card，是没有办法进行模式选择的，也就是说没有办法在以太网和IB中间进行选择，只可以使用以太网。而在以太网中如果要跑RDMA的话，需要使用RoCE技术。</p><h2 id="RDMA客户端和服务器端交流的几个方式"><a href="#RDMA客户端和服务器端交流的几个方式" class="headerlink" title="RDMA客户端和服务器端交流的几个方式"></a>RDMA客户端和服务器端交流的几个方式</h2><ol><li><p>send &amp; recieve</p><p>跟TCP/IP的send/recv是类似的，不同的是RDMA是基于消息的数据传输协议（而不是基于字节流的传输协议），所有数据包的组装都在RDMA硬件上完成的，也就是说OSI模型中的下面4层(传输层，网络层，数据链路层，物理层)都在RDMA硬件上完成。</p></li><li><p>read</p><p>RDMA读操作本质上就是Pull操作, 把<a href="https://www.zhihu.com/search?q=%E8%BF%9C%E7%A8%8B%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:55142557%7D">远程系统内存</a>里的数据拉回到本地系统的内存里。</p></li><li><p>write</p></li></ol><h2 id="RoCE"><a href="#RoCE" class="headerlink" title="RoCE"></a>RoCE</h2><h1 id="基础的对比实验"><a href="#基础的对比实验" class="headerlink" title="基础的对比实验"></a>基础的对比实验</h1><p>在RDMA技术中，由于在RDMA中运用了锁争夺的机制，导致在线程增多的情况下，锁机制的延展性会出现问题。即线程增加会导致系统的吞吐量下降。基础的对照实验就是要体现出上述的问题。即跑出来下图的效果</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211202130806588.png" alt="image-20211202130806588"></p><p>论文中对这一块的描述是</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211209191906546.png" alt="image-20211209191906546"></p><h2 id="基础流程"><a href="#基础流程" class="headerlink" title="基础流程"></a>基础流程</h2><ol><li>安装机器，完成网卡的插入。（√）</li><li>找到直连光纤，完成两个机器的直连，线没有问题的话网卡会亮黄灯。（√）</li><li>安装驱动，设置网卡的静态ip，完成两个机器的连通。</li></ol><p>搭机子，通过交换机进行联通。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211202130940305.png" alt="image-20211202130940305"></p><p>使用驱动检查网卡的性能和使用情况。查看两台机器的连通性。</p><p>按照下图设置实验数据</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211202131719170.png" alt="image-20211202131719170"></p><p>图中cycle的定义如下</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211202131923397.png" alt="image-20211202131923397"></p><p>每个线程发送4KB大小的文件，每个线程和远程机之间创建了1000个连接，每一个cycle代表把一个4kb的数据通过这1000个连接发到远端的主机</p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>在两台机子上进行操作，每台机子的配置如下</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211202092739555.png" alt="image-20211202092739555"></p><h2 id="装卡"><a href="#装卡" class="headerlink" title="装卡"></a>装卡</h2><p>分别将两个网卡插到对应的两个机子上。然后用光纤和光模块对两个机子的网卡进行连接，网卡会闪黄灯。如果没有闪黄灯的话，一定是光纤或者光模块出现了问题</p><h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><h3 id="环境检测"><a href="#环境检测" class="headerlink" title="环境检测"></a>环境检测</h3><p>千万注意：要先进行环境的检测，检测你的环境是否安装了IB卡！</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211204100538405.png" alt="image-20211204100538405"></p><h3 id="下载驱动安装包"><a href="#下载驱动安装包" class="headerlink" title="下载驱动安装包"></a>下载驱动安装包</h3><p>驱动的下载网站<a href="https://blog.csdn.net/ljlfather/article/details/102930454">https://blog.csdn.net/ljlfather/article/details/102930454</a></p><p>进入这个网址<a href="https://www.mellanox.com/page/products_dyn?product_family=26&amp;mtag=linux_sw_drivers%EF%BC%8C%E6%89%BE%E5%88%B0%E5%92%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E7%B3%BB%E7%BB%9F%E5%AF%B9%E5%BA%94%E7%9A%84%E9%A9%B1%E5%8A%A8%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%E3%80%82%E6%AF%94%E5%A6%82%EF%BC%8C%E6%88%91%E5%B0%B1%E5%85%88%E4%B8%8B%E8%BD%BD%E5%88%B0%E4%BA%86mlnx-en-3.3-1.0.0.0.tgz">https://www.mellanox.com/page/products_dyn?product_family=26&amp;mtag=linux_sw_drivers，找到和自己的系统对应的驱动进行下载。比如，我就先下载到了mlnx-en-3.3-1.0.0.0.tgz</a>, 装上后TCP正常工作没问题，RDMA不能用。然后从各种官网的网页里面的各种方法乱试，又找到一个MLNX_OFED_LINUX-3.3-1.0.4.0-ubuntu14.04-x86_64.tgz, 这个才对了。</p><p>本次下载的版本如下图所示</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211204131059622.png" alt="image-20211204131059622"></p><p>之后进入驱动的目录进行安装。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./mlnxofedinstall</span> <span class="hljs-params">--force</span><br></code></pre></td></tr></table></figure><p>重新加载驱动</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211204101116532.png" alt="image-20211204101116532"></p><p>之后使用命令<code>ibstatus</code>你就可以看到网卡对应的接口的信息了</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211204101209872.png" alt="image-20211204101209872"></p><p>可以发现，这里的link_layer是Ethernet，代表当前的模式是以太网。</p><p>在想把模式改成IB的时候，使用命令<code>mlxconfig -d /dev/mst/mt4119_pciconf0 query</code>查看网卡的基本信息</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211204102717723.png" alt="image-20211204102717723"></p><p>发现网卡的类型是EN，仅支持Ethernet模式。所以如果要在交换机上使用RDMA的话需要安装RoCE。但是本次实验是两个机子直连的，所以直接使用Ethernet模式就可以了。</p><h2 id="测试及驱动使用说明"><a href="#测试及驱动使用说明" class="headerlink" title="测试及驱动使用说明"></a>测试及驱动使用说明</h2><p>两个机子都安装好驱动以后</p><p>一台机子作为服务器端，运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ib_send_bw -a -c UD -d mlx4_0 -i 1<br></code></pre></td></tr></table></figure><p>另一台机子作为客户端，运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ib_send_bw -a -c UD -d mlx4_0 -i 1 172.16.0.102<br></code></pre></td></tr></table></figure><p>ib_send命令是测试 RDMA 发送处理确定带宽</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211207144656527.png" alt="image-20211207144656527"></p><p>代表测试成功</p><h3 id="相关命令的使用说明"><a href="#相关命令的使用说明" class="headerlink" title="相关命令的使用说明"></a>相关命令的使用说明</h3><ol><li><p>如果要使用srq，就在命令行的最后加上 <strong>–use-srq</strong></p></li><li><p>ibstatus：查看网卡的基本信息</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211207150754499.png" alt="image-20211207150754499" style="zoom:80%;" /></li><li><p>ib_send_bw：Bandwith and latency test using send transactions.</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211209085626412.png" alt="image-20211209085626412"></p><p>参数说明：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs inform7">ib_send_bw <span class="hljs-comment">[-p TCP_port]</span><span class="hljs-comment">[-d device]</span><span class="hljs-comment">[-i IB_port]</span><span class="hljs-comment">[-c RC|UC|UD]</span><span class="hljs-comment">[-m mtu]</span> <span class="hljs-comment">[-s size]</span><span class="hljs-comment">[-a]</span><span class="hljs-comment">[-t tdepth]</span><span class="hljs-comment">[g]</span><span class="hljs-comment">[-r rdepth]</span><span class="hljs-comment">[-n iters]</span><span class="hljs-comment">[-I size]</span><span class="hljs-comment">[-b]</span><span class="hljs-comment">[-V]</span><span class="hljs-comment">[-e]</span> <span class="hljs-comment">[-N]</span><span class="hljs-comment">[-F]</span><span class="hljs-comment">[IP_address]</span><br><br>where:<br><br>TCP_port <span class="hljs-keyword">is</span> the TCP port.(本次实验不怎么用到)<br>device <span class="hljs-keyword">is</span> the InfiniBand device.<br>IB_port <span class="hljs-keyword">is</span> the InfiniBand port.<br>mtu <span class="hljs-keyword">is</span> the size <span class="hljs-keyword">of</span> the MTU.<br>size <span class="hljs-keyword">is</span> the size <span class="hljs-keyword">of</span> the messages.<br>tdepth <span class="hljs-keyword">is</span> the size <span class="hljs-keyword">of</span> the TX queue.<br>rdepth <span class="hljs-keyword">is</span> the size <span class="hljs-keyword">of</span> the RX queue.<br>iters <span class="hljs-keyword">is</span> the number <span class="hljs-keyword">of</span> message exchanges.<br>IP_address <span class="hljs-keyword">is</span> the IP address <span class="hljs-keyword">of</span> the remote node host<br><br>RC:面向连接的可靠服务<br>UC:面向连接的不可靠服务<br>UD:面向数据报的不可靠服务<br>RD：面向非连接（类似UDP）的可靠服务<br>面向连接 vs 面向数据报<br>相同点：两者的通信均包括双方QP对的参与<br>不同点：面向连接的通信若有N个节点与之通信，本机需要N个QP对;面向数据报的通信可以做到N个节点与之通信，本机仅需一个QP队.<br><br></code></pre></td></tr></table></figure><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211207161755180.png" alt="image-20211207161755180"></p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211207161827345.png" alt="image-20211207161827345"></p><p>为了体现多端的拥塞，本次实验多是使用的RC</p></li><li></li></ol><h2 id="实验具体配置"><a href="#实验具体配置" class="headerlink" title="实验具体配置"></a>实验具体配置</h2><h4 id="卸载驱动"><a href="#卸载驱动" class="headerlink" title="卸载驱动"></a>卸载驱动</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>sbin/ofed_uninstall.sh<br></code></pre></td></tr></table></figure><h2 id="配置ip地址"><a href="#配置ip地址" class="headerlink" title="配置ip地址"></a>配置ip地址</h2><h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>network/interfaces<br></code></pre></td></tr></table></figure><p>在文件中添加如下内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">auto</span> enp<span class="hljs-number">1</span>s<span class="hljs-number">0</span><br><span class="hljs-attribute">iface</span> enp<span class="hljs-number">1</span>s<span class="hljs-number">0</span> inet static<br><span class="hljs-attribute">address</span> <span class="hljs-number">172.16.0.104</span><br><span class="hljs-attribute">netmask</span> <span class="hljs-number">255.255.255.0</span><br><span class="hljs-attribute">broadcast</span> <span class="hljs-number">172.16.0.255</span><br></code></pre></td></tr></table></figure><p>enp1s0是网卡名称，通过ifconfig查看，address是要给infiniband网卡配置的ip地址。</p><p>重启网络服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service networking restart</span><br></code></pre></td></tr></table></figure><h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-ib0<br></code></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">DEVICE</span>=ib0<br><span class="hljs-attr">BOOTPROTO</span>=static<br><span class="hljs-attr">IPADDR</span>=<span class="hljs-number">172.16</span>.<span class="hljs-number">0.104</span><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-attr">BROADCAST</span>=<span class="hljs-number">172.16</span>.<span class="hljs-number">0.255</span><br><span class="hljs-attr">NETWORK</span>=<span class="hljs-number">172.16</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">yes</span><br><br></code></pre></td></tr></table></figure><p>重启网口：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ifdown ib<span class="hljs-number">0</span><br><span class="hljs-attribute">sudo</span> ifup ib<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="安装RoCE"><a href="#安装RoCE" class="headerlink" title="安装RoCE"></a>安装RoCE</h2><h2 id="NVMe-oF概述"><a href="#NVMe-oF概述" class="headerlink" title="NVMe-oF概述"></a>NVMe-oF概述</h2><p>NVMe-oF全称是：Non-Volatile Memory Express over Fabrics。中文的意思是：基于Fabrics的非易失性存储标准。我将Fabric理解为网络架构，RDMA Fabric就有Infiniband，iWARP，RoCEv1，RoCEv2等多种传输协议。</p><h3 id="NVMe-oF和NVMe的关系"><a href="#NVMe-oF和NVMe的关系" class="headerlink" title="NVMe-oF和NVMe的关系"></a>NVMe-oF和NVMe的关系</h3><p>NVMe是什么：NVMe传输是一种抽象协议层，旨在提供可靠的NVMe命令和数据传输，是有关访问非易失性储存（通常是 SSD 磁盘）的接口标准。本质是上建立了多个计算机与存储设备的通路，提高搬运数据的速度。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211230163244922.png" alt="image-20211230163244922"></p><p>当前数据中心中的存储网络架构通常使用的是存储区域网络 (Storage Area Network, SAN) ，SAN 是一种基于块的存储，利用高速架构将服务器与其逻辑磁盘单元 (Logical Disk Unit, LUN) 相连。当前的SAN通常使用采用FC（Fibre Channel）光纤通道或者Ethernet进行远距离传输。其中SAN网络环境中，因采用存储设备类型的不同又可以分为FC-SAN(采用光纤通道存储产品)和IP-SAN(采用ISCSI存储设备)。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230170745869.png" alt="image-20211230170745869" style="zoom:50%;" /><p><strong>NVMe-oF的目的就是利用现有成熟的Fabric来跑NVMe，实现NVMe标准在PCIe总线上的扩展也就是把本地高速访问的优势暴露给远端应用。</strong>NVMe-oF可以实现ISCISI的功能，甚至可以更好。在长时间内，NVMe-oF和iSCSI还是长期并存的局面。iSCSI目前已经非常成熟，而NVMe-oF则刚刚开始发展，需要不断地完善，并且借鉴iSCSI协议的一些功能，以支持更多的功能。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230170818645.png" alt="image-20211230170818645" style="zoom:50%;" /><h3 id="NVMe-oF"><a href="#NVMe-oF" class="headerlink" title="NVMe-oF"></a>NVMe-oF</h3><p>2016年发布的 NVMe-oF 1.0 规范描述了两种Fabric，光纤通道(Fibre Channel)和远程直接内存访问 (RDMA) 。下图是NVME和各种Fabric的关系。可以看到NVMe-oF是在Fabric之上的。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230171628666.png" alt="image-20211230171628666" style="zoom:50%;" /><p>上图可以更好的展示为，左侧三个灰色框架代表的是NVMe在一个机器内的操作，右边是通过NVMe-oF把NVMe扩展到数据中心中。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230172937194.png" alt="image-20211230172937194" style="zoom:50%;" /><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230193645449.png" alt="image-20211230193645449" style="zoom:67%;" /><p>NVMe-oF的协议栈如下</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230195604296.png" alt="image-20211230195604296" style="zoom:50%;" /><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230201734587.png" alt="image-20211230201734587" style="zoom:50%;" /><p>NVMeoF协议栈访问流程</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20220725111730264.png" alt="image-20220725111730264"></p><h3 id="NVMe-Transport-Mapping（NVME传输映射）"><a href="#NVMe-Transport-Mapping（NVME传输映射）" class="headerlink" title="NVMe Transport Mapping（NVME传输映射）"></a>NVMe Transport Mapping（NVME传输映射）</h3><p><strong>NVMe over Fabrics 需要底层 NVMe 传输来提供可靠的 NVMe 命令和数据传输。</strong></p><p>在本地 NVMe 实现中，NVMe 命令和响应通过 PCIe 接口映射到主机中的共享内存。然而，fabric 是建立在发送和接收消息的概念之上的，在端之间没有共享内存。NVMe fabric消息传输旨在通过使用包含一个或多个 NVMe 命令或响应的“capsules”将 NVMe 命令和响应封装到基于消息的系统中。 capsules或capsules与数据的组合独立于特定的fabric，并通过所需fabric发送和接收。就是说<strong>NVMe和Fabric之间没有指定的关系，是松耦合的</strong>。 <strong>NVMe 传输是独立于任何物理互连属性的抽象协议层。</strong></p><p> 在NVMe over Fabrics中，整个 NVMe 多队列模型得到维护，使用普通的 NVMe 提交队列(submission queues)和完成队列(completion queues)，但封装在基于消息的传输上。 NVMe I/O 队列对(submission and completion)是为多核 CPU 设计的，这种低延迟的高效设计在 NVMe over Fabrics 中得到维护。</p><p> 下图显示了 NVMe 传输的分类和示例。 NVMe 传输包含内存模型、消息模型或两者的组合。 内存模型是一种通过执行显式内存读写操作在结构节点之间传输命令、响应和数据的模型，而消息模型是一种仅在结构节点之间发送包含命令capsules、响应capsules和数据的消息。 消息/内存模型使用消息和显式内存读写操作的组合在结构节点之间传输命令包、响应包和数据。 数据可以选择性地包含在命令包和响应包中。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230192640428.png" alt="image-20211230192640428" style="zoom:40%;" /><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230185100624.png" alt="image-20211230185100624" style="zoom:50%;" /><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl">上面这两个图一个来自<span class="hljs-variable">OverView</span>（第二个图），一个来自<span class="hljs-function"><span class="hljs-title">specification</span>(第一个图)，感觉有点冲突。</span><br></code></pre></td></tr></table></figure><p>在向 NVMe over Fabrics 设备发送复杂消息时，capsules允许将多条小消息作为一条消息发送，从而提高传输效率并减少延迟。 capsules是一个提交队列条目(submission queue entry)或一个完成队列条目(completion queue entry)，结合了一定数量的数据、元数据或 Scatter-Gather Lists (SGLs)。 元素的内容与本地 NVMe 协议相同，但capsules是一种将它们打包在一起以提高效率的方式。下图是capsules的具体架构。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211230190840475.png" alt="image-20211230190840475"></p><h3 id="NVMe"><a href="#NVMe" class="headerlink" title="NVMe"></a>NVMe</h3><p>NVMe是什么：NVMe是一种Host与SSD之间通讯的协议，它在协议栈中隶属高层。</p><p><img src="https://img-blog.csdn.net/20180417100139590" alt="img"></p><p>NVMe制定了Host与SSD之间通讯的命令，以及命令如何执行的。</p><p>NVMe有两种命令，一种叫Admin Command，用以Host管理和控制SSD；另外一种就是I/O Command，用以Host和SSD之间数据的传输。</p><p>NVMe有三种队列：Submission Queue （SQ），Completion Queue（CQ）和Doorbell Register （DB）。 SQ和CQ位于Host的内存中，DB则位于SSD的控制器内部。如下图所示：</p><p><img src="https://img-blog.csdn.net/20180417100922685" alt="img"></p><p>SQ位于Host内存中，Host要发送命令时，先把准备好的命令放在SQ中，然后通知SSD来取；CQ也是位于Host内存中，一个命令执行完成，成功或失败，SSD总会往CQ中写入命令完成状态。DB则是在Host发送命令时，不是直接往SSD中发送命令的，而是把命令准备好放在自己的内存中，Host就是通过写SSD端的DB寄存器来告知SSD命令已经处理完毕，可以前来检阅。流程如下图所示：</p><p><img src="https://img-blog.csdn.net/20180417101200769" alt="img"></p><ol><li>Host写命令到SQ，此时的命令在host的内存中；</li><li>Host写DB，通知NVMe Controller取命令。通过更新在Controller内部的寄存器SQ Tail Doorbell来完成。</li><li>Controller收到通知，于是从SQ中取命令。取走命令之后，需要在Controller内部的SQ Head Pointer寄存器中更新Head所在的位置。NVMe没有规定Command存入队列的执行顺序，Controller可以一次取出多个Command进行批量处理。</li><li>Controller执行命令。执行Read/Wirte Command时，这个过程也会与Host Memory进行数据传递。</li><li>命令执行完成，Controller往CQ中写指令执行结果。此时，Controller需要更新内部的CQ Tail Pointer寄存器。</li><li>Controller发短信通知Host指令完成。Controller通过发送一个中断信息告知Host。</li><li>收到短信，Host处理CQ，查看命令完成状态；</li><li>Host处理完CQ中的命令需要告知controller。Host更新Controller内部的CQ Head Doorbell。</li></ol><p>四个寄存器全部放在Controller内存中。也就是说Controller知道这SQ Tail/Head和CQ Tail/Head的全部信息。</p><p>而Host仅仅知道自己更新的两个信息SQ Tail和CQ Head。Controller把SQ Head和CQ Tail的信息写入Completion报文中，通知给host。</p><p>NVMe 访存路径</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20220725111306065.png" alt="image-20220725111306065"></p><h4 id="NVMe-Controller-Memory-Buffer-控制器内存缓冲区"><a href="#NVMe-Controller-Memory-Buffer-控制器内存缓冲区" class="headerlink" title="NVMe Controller Memory Buffer(控制器内存缓冲区)"></a>NVMe Controller Memory Buffer(控制器内存缓冲区)</h4><p>controller通过将 CAP.CMBS 设置为“1”来指示对 CMB 的支持。 host通过将 CMBMSC.CRE 设置为“1”来表示使用 CMB 的意图。 一旦该位设置为“1”，controller就会通过 CMBLOC 和 CMBSZ 属性指示 CMB 的属性.</p><p>CMB 可用于多种用途。 controller通过在 CMBSZ 属性中设置支持标志来指示内存可用于哪些目的。</p><h3 id="NVMe-over-ROCE"><a href="#NVMe-over-ROCE" class="headerlink" title="NVMe over ROCE"></a>NVMe over ROCE</h3><p>NVMe over RoCE 调用关系如下图所示，内核 nvme_rdma 模块相当于胶水层，连接 rdma stack 和 nvme core接口，即 NVMe 队列接口可以对接 RDMA 队列接口，进而调用下层 rdma stack 中 verbs 传输接口。</p><img src="https://pic4.zhimg.com/v2-adaad1b3a14e2fa115fe0472c8b0955f_r.jpg" alt="preview" style="zoom:50%;" /><h4 id="NVMeoF队列结构"><a href="#NVMeoF队列结构" class="headerlink" title="NVMeoF队列结构"></a>NVMeoF队列结构</h4><p>NVMeoF将NVMe队列映射到RDMA队列上。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20220725112852892.png" alt="image-20220725112852892"></p><p>Host端RNIC将NVMe SQE封装成网络命令包，作为RDMA报文内容（payload），通过RDMA传输到target端，Target端的RNIC解包之后，将SQE和数据放入target端主机的内存中，随后Target处理NVMe命令和数据；处理完之后，将NVMe CQE封装成RDMA响应包(Response)，放入RDMA完成队列中，返回给Host。</p><h2 id="XRC（扩展可靠连接技术）网卡模式"><a href="#XRC（扩展可靠连接技术）网卡模式" class="headerlink" title="XRC（扩展可靠连接技术）网卡模式"></a>XRC（扩展可靠连接技术）网卡模式</h2><p>使用SRQ虽然能够大大减少进程的接收缓冲区数目，但是它仍然需要在每个进程之间都建立连接。</p><p>在多核系统上， 一个节点内往往运行多个进程，这就会使得单个节点上的连接数目成倍增加，内存开销也会成倍增加。为了解决这个问题，扩展可靠连接(Extended Reliable Connection，简称 XRC)技术被引入到了InfiniBand传输服务中。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20220122194819302.png" alt="image-20220122194819302" style="zoom:50%;" /><p>允许发送方在发送工作请求里指定远端接收队列。如果使用了SRQ，这意味着消息发送者可以指定消息在达到目的节点后由哪个SRQ来接收，因为SRQ是独立于连接之外能够被多个QP所共享的资源，所以XRC相当于变相地支持了一个本地QP可以向多个远端QP发送消息，也就是说，通过XRC一个进程只需要一条连接或者一个QP即可向远端节点上的所有进程发送消息。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20220122194215743.png" alt="image-20220122194215743"></p><p>XRC 在请求方(requester)的操作与 RC 类似，在响应方(responder)与 RD 类似。由于这种不对称性，XRC 传输服务中的传输对象有一些独特的特征。</p><ol><li>XRC INI QP 与常规 RC QP 类似，但没有响应端</li><li>XRC TGT QP 类似于 RD EEC，但没有请求方</li><li>XRC SRQ 类似于 RD QP，但没有请求方 </li></ol><table><thead><tr><th align="left">名称</th><th>含义</th></tr></thead><tbody><tr><td align="left">XRC</td><td>eXtended Reliable Connected transport service</td></tr><tr><td align="left">XRC INI QP</td><td>XRC Initiator QP。这是 XRC 操作的发起者队列。 XRC INI QP 用于发出 XRC 传出请求，并且没有响应(responder)方。 XRC 传入请求将由 XRC TGT QP 处理</td></tr><tr><td align="left">XRC TGT QP</td><td>XRC Target QP。这是 XRC 操作的响应者。 XRC TGT QP（与 XRC SRQ 一起）用于处理传入的 XRC 请求。 XRC TGT QP 没有请求方。 XRC 传出请求通过 XRC INI QP 发出</td></tr><tr><td align="left">XRC SRQ</td><td>这是为传入的 XRC 请求 post Receive WQE 的Receive Queue。 XRC 请求数据包在扩展标头 (XRCETH) 中携带目标 XRC SRQ 编号，如果需要，将从该编号中获取接收 WQE</td></tr><tr><td align="left">XRC Domain</td><td>用于关联 XRC TGT QP 和 XRC SRQ 的属性。 XRC 数据包只能以与它们的目的地 XRC TGT QP 相同的 XRC Domain中的 XRC SRQ 为目标</td></tr><tr><td align="left">XRCETH</td><td>XRC Extended Transport Header. Present in XRC request packets.</td></tr></tbody></table><h1 id="实验的相关命令和具体参数"><a href="#实验的相关命令和具体参数" class="headerlink" title="实验的相关命令和具体参数"></a>实验的相关命令和具体参数</h1><h2 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h2><h3 id="ibdump"><a href="#ibdump" class="headerlink" title="ibdump"></a>ibdump</h3><h2 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h2><h3 id="ib-send-bw"><a href="#ib-send-bw" class="headerlink" title="ib_send_bw"></a>ib_send_bw</h3><p>具体内容可以看gitlab网页<a href="https://github.com/linux-rdma/perftest">https://github.com/linux-rdma/perftest</a></p><ol><li><p>服务器端运行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ib_send_bw</span> -a -c UD -d mlx<span class="hljs-number">5</span>_<span class="hljs-number">0</span> -i <span class="hljs-number">1</span> -z<br></code></pre></td></tr></table></figure></li><li><p>客户端运行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ib_send_bw</span> -a -c UD -d mlx<span class="hljs-number">5</span>_<span class="hljs-number">0</span> -i <span class="hljs-number">1</span> -z <span class="hljs-number">172.16.0.106</span><br></code></pre></td></tr></table></figure></li></ol><p>重点解释一下<code>-z</code>这个参数是什么意思：Communicate with rdma_cm module to exchange data - use regular QPs</p><h1 id="分流访问NVMe-SSD"><a href="#分流访问NVMe-SSD" class="headerlink" title="分流访问NVMe SSD"></a>分流访问NVMe SSD</h1><h2 id="SPDK-NVMe-oF的介绍"><a href="#SPDK-NVMe-oF的介绍" class="headerlink" title="SPDK NVMe-oF的介绍"></a>SPDK NVMe-oF的介绍</h2><p>NVMe over Fabrics (NVMe-oF) 协议在 RDMA（iWARP、RoCE、InfiniBand™）、光纤通道和 TCP 等网络结构上扩展了 NVM Express* (NVMe) 块协议的并行性和效率。SPDK 提供用户空间 NVMe-oF 的target和initiator，可通过网络扩展 SPDK 堆栈其余部分的软件效率。SPDK NVMe-oF 的target使用 SPDK user-space, polled-mode NVMe driver 向 NVMe 设备提交和完成 I/O 请求，从而减少软件处理开销。 同样，它将连接固定到 CPU 内核以避免同步和缓存抖动，以便这些连接的数据尽可能靠近 CPU 缓存。</p><p>SPDK NVMe-oF target and initiator 使用 Infiniband/RDMA verbs API 来访问支持RDMA的NIC。目前只针对ROCEV2进行了测试。与 SPDK NVMe 驱动程序类似，SPDK 提供了一个user-space, lockless, polled-mode的 NVMe-oF  initiator。host使用initiator建立连接并向 NVMe-oF target内的 NVMe 子系统提交 I/O 请求。NVMe 子系统包含namespace，每个namespace都映射到通过 SPDK 的 bdev 层公开的单个块设备。SPDK 的 bdev 层是块设备抽象层和通用块存储堆栈，在许多操作系统都有类似实现。使用 bdev 接口将存储介质与用于访问存储的前端协议完全解耦。用户可以构建自己的虚拟 bdev，提供复杂的存储服务，并将它们与 SPDK NVMe-oF  target集成，无需额外的代码更改。 NVMe-oF target中可能有许多子系统，每个子系统可能包含许多namespace。子系统和namespace可以通过 JSON-RPC 接口动态配置。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li><p>查看nvme ssd具体有哪几个</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nvme list</span><br></code></pre></td></tr></table></figure><p>可以查看所有连接到当前系统的nvme设备：名称，序列号，大小，LBA 和 serial。</p><p>使用该命令的话可以在host机器上可以查看到target的ssd（前提是target的ssd挂载到了spdk中）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">通过spdk查看每个硬盘的pcie地址</span><br></code></pre></td></tr></table></figure><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20220519154020368.png" alt="image-20220519154020368"></p></li></ol><p>注意spdk驱动和nvme驱动的问题</p><p>配置完target在配置host</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果使用modprobe nvme_rdma出错。大概率问题出现在rdma驱动中</p><h2 id="FIO工具介绍"><a href="#FIO工具介绍" class="headerlink" title="FIO工具介绍"></a>FIO工具介绍</h2><p>FIO 工具是一款用于测试硬件存储性能的辅助工具，兼具灵活性、可靠性从而从众多性能测试工具中脱颖而出。磁盘的 I/O 是衡量硬件性能的最重要的指标之一，而 FIO 工具通过模拟 I/O负载对存储介质进行压力测试，并将存储介质的 I/O 数据直观的呈现出来。</p><p>f关于io介绍的网站：<a href="https://fio.readthedocs.io/en/latest/fio_doc.html#how-fio-works">https://fio.readthedocs.io/en/latest/fio_doc.html#how-fio-works</a></p><h3 id="fio操作"><a href="#fio操作" class="headerlink" title="fio操作"></a>fio操作</h3><p>让 fio 模拟所需的 I/O 工作负载的第一步是编写一个描述该特定设置的作业文件(job file)。 作业文件中可以定义要模拟的线程或者文件，通过共享参数定义全局部分，也可以定义每一线程的单独参数。运行时，fio 会解析此文件并按照描述设置所有内容。</p><h3 id="fio文件配置介绍"><a href="#fio文件配置介绍" class="headerlink" title="fio文件配置介绍"></a>fio文件配置介绍</h3><ol><li><p>I/O type</p><p>定义发布给文件的I/O模式，读、写、顺序、随机或者是否使用buffer.</p><ul><li><p>direct=bool</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><span class="hljs-keyword">If</span> value <span class="hljs-keyword">is</span> <span class="hljs-literal">true</span>, <span class="hljs-keyword">use</span> non-buffered I/O. <span class="hljs-keyword">Default</span>: <span class="hljs-literal">false</span>.<br></code></pre></td></tr></table></figure><p>这个值决定是否使用non-buffered I/O。</p><p>buffered IO指的是在内核和用户程序之间设置了一层缓冲区，用来提高IO读写的效率；</p><p>读取：硬盘—&gt;内核缓冲区—&gt;<strong>用户缓冲区</strong>—&gt;用户程序</p><p>写回：用户程序—&gt;<strong>用户缓冲区</strong>—&gt;内核缓冲区—&gt;硬盘</p></li><li><p>atomic=bool</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">If</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">true</span>, attempt <span class="hljs-keyword">to</span> use atomic direct I/O. Atomic writes are guaranteed <span class="hljs-keyword">to</span> be <span class="hljs-keyword">stable</span> once acknowledged <span class="hljs-keyword">by</span> the operating <span class="hljs-keyword">system</span>. <br></code></pre></td></tr></table></figure><p>如果值为 true，则尝试使用原子 I/O。原子I/O的写入是稳定的</p></li><li><p>readwrite=str，rw=str</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Type</span> of I/O pattern.<br>read;<span class="hljs-built_in">write</span>;<span class="hljs-built_in">trim</span>;randread;randwrite;<span class="hljs-keyword">readwrite</span>;randrw;trimwrite<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Block size</p><p>发出I/O的块大小，可以是单个值，也可以是个范围</p><ul><li><p>blocksize=int[,int][,int]</p><p>单个值适用于read、write和trim。 可以为read、write和trim指定逗号分隔的值。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The block size <span class="hljs-keyword">in</span> <span class="hljs-keyword">bytes</span> used <span class="hljs-keyword">for</span> I/O units. Default: <span class="hljs-number">4096.</span> A single <span class="hljs-built_in">value</span> applies <span class="hljs-built_in">to</span> reads, writes, <span class="hljs-keyword">and</span> trims. Comma-separated values may be specified <span class="hljs-keyword">for</span> reads, writes, <span class="hljs-keyword">and</span> trims. A <span class="hljs-built_in">value</span> <span class="hljs-keyword">not</span> terminated <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> <span class="hljs-literal">comma</span> applies <span class="hljs-built_in">to</span> subsequent types.<br></code></pre></td></tr></table></figure></li><li><p>blocksize_range=irange[,irange][,irange], bsrange=irange[,irange][,irange]</p><p>I/O 单元的一系列块大小（以字节为单位）。 除非设置了 blocksize_unaligned，否则发出的 I/O 单元将始终是最小大小的倍数。<strong>bsrange=1k-4k,2k-8k.</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">A range <span class="hljs-keyword">of</span> block sizes <span class="hljs-keyword">in</span> bytes <span class="hljs-keyword">for</span> I/O units. The issued I/O unit will <span class="hljs-keyword">always</span> be a multiple <span class="hljs-keyword">of</span> the minimum size, unless blocksize_unaligned <span class="hljs-keyword">is</span> <span class="hljs-keyword">set</span>.<br><br>Comma-separated ranges may be specified <span class="hljs-keyword">for</span> reads, writes, <span class="hljs-keyword">and</span> trims <span class="hljs-keyword">as</span> described <span class="hljs-keyword">in</span> blocksize.<br></code></pre></td></tr></table></figure></li></ul></li><li><p>I/O size</p><p>要读写的数据总量</p><ul><li>size=int</li></ul></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>华为项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖使用手册</title>
    <link href="/2021/11/22/%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2021/11/22/%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="群晖NAS简单使用说明"><a href="#群晖NAS简单使用说明" class="headerlink" title="群晖NAS简单使用说明"></a>群晖NAS简单使用说明</h1><h2 id="群晖NAS是什么"><a href="#群晖NAS是什么" class="headerlink" title="群晖NAS是什么"></a>群晖NAS是什么</h2><ol><li>你可把它看作是你的私人云盘，具有安全可控，功能可拓展的特点。</li><li>现在你可以把重要的文件放到你的云盘.上，或者分享给你周围的人。</li><li>可以通过网页进行登录。</li><li>属于共同项目组的可以使用群晖中的gitlab进行代码管理</li></ol><h2 id="账号和密码"><a href="#账号和密码" class="headerlink" title="账号和密码"></a>账号和密码</h2><ol><li><p>账号是每个人的首字母小写。初始密码是：111222（建议登陆后进行修改）</p></li><li><p>如果忘记密码可以重新设置。注意查看自己的qq邮箱。群晖的邮箱账号是<strong>PiedPiper - Synology DiskStation</strong></p></li><li><p>内网登录网址：<a href="http://192.168.0.8:5000/">http://192.168.0.8:5000/</a></p></li><li><p>外网登录网址：<a href="http://120.79.170.202:8047/">http://120.79.170.202:8047/</a></p></li><li><p>外网通过域名访问：<a href="http://quickconnect.cn/ForPiedPiper/">http://QuickConnect.cn/ForPiedPiper/</a></p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\群晖使用手册\image-20211122151646208.png" alt="image-20211122151646208" style="zoom:30%;" /></li></ol><h2 id="空间配额与使用"><a href="#空间配额与使用" class="headerlink" title="空间配额与使用"></a>空间配额与使用</h2><ol><li>每个人的使用空间是500GB，. 上传下载单个文件最大10GB。</li><li>个人空间的文件有读写权限。所有者可设置分享文件的读写权限。</li><li>目前NAS系统配置了通讯，下载，备份，协同办公等软件，建议熟悉使用。例如Chat提供通讯功能，Calendar,Note提供日程安排，HyperBackup提供文件备份功能。0ffice提供在线预览，编辑等功能。</li><li>通过网页登陆时，桌面系统的操作方式简单，与平时使用Windows系统类似。例如你选中想要分享的文件，点击右键选择共享，然后设置你要分享的人或群组。</li></ol><h1 id="群晖备份数据说明"><a href="#群晖备份数据说明" class="headerlink" title="群晖备份数据说明"></a>群晖备份数据说明</h1><h2 id="各个文件夹介绍"><a href="#各个文件夹介绍" class="headerlink" title="各个文件夹介绍"></a>各个文件夹介绍</h2><ol><li><p> home： 分配给个人的隐私空间，其他人不能访问</p></li><li><p>homes: 管理员（每一个新开的账号都有管理员权限）可以看到所有人的home个人隐私空间（建议不要查看）</p></li><li><p>共享文件夹：所有人（管理员和非管理员）共享的空间，所有人都可以进行读写</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\群晖使用手册\image-20211122153119510.png" alt="image-20211122153119510"></p></li></ol><h2 id="备份说明"><a href="#备份说明" class="headerlink" title="备份说明"></a>备份说明</h2><ol><li> 共享文件夹 —- data-backup目录下  —- 论文题目</li></ol><p>   <img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\群晖使用手册\clip_image001.png" alt="img"></p><ol start="2"><li><p>备份格式：</p><p>子目录包括：代码，图（fig.1 , fig.2 …）, 论文latex 格式，论文PDF格式</p><p>其中图(（fig.1 , fig.2）要包括： 图的数据， 画图脚本，图</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\群晖使用手册\image-20211122153511798.png" alt="image-20211122153511798"></p></li></ol><h2 id="备份方法"><a href="#备份方法" class="headerlink" title="备份方法"></a>备份方法</h2><ol><li><p>Window 系统备份指定文件夹或文件到群晖</p><p>使用Cloud Station Server 套件， windows系统需要安装Synology Cloud Station Backup-4.3.2-4450， 群文件有，或者在群晖直接下载安装</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\群晖使用手册\clip_image002.jpg" alt="img" style="zoom:80%;" /><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\群晖使用手册\clip_image004.jpg" alt="img" style="zoom:80%;" /><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\群晖使用手册\clip_image006.jpg" alt="img" style="zoom:80%;" /><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\群晖使用手册\clip_image008.jpg" alt="img" style="zoom:80%;" /><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\群晖使用手册\clip_image010.jpg" alt="img" style="zoom:80%;" /></li><li><p>Ubuntu 或者centos 系统备份指定文件夹或文件到群晖</p><p>​    使用Actice Backup for Business套件，选择文件服务器，配置需要备份的服务器信息等</p></li></ol><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\群晖使用手册\image-20211122153858036.png" alt="image-20211122153858036"></p><h1 id="gitlab使用说明"><a href="#gitlab使用说明" class="headerlink" title="gitlab使用说明"></a>gitlab使用说明</h1><h2 id="gitlab简介"><a href="#gitlab简介" class="headerlink" title="gitlab简介"></a>gitlab简介</h2><p>GitLab 是一个用于仓库管理系统的开源项目。使用<a href="http://baike.baidu.com/view/1531489.htm">Git</a>作为代码管理工具，并在此基础上搭建起来的web服务。</p><p>可通过Web界面进行访问公开的或者私人项目。它拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用。</p><h2 id="账号和密码-1"><a href="#账号和密码-1" class="headerlink" title="账号和密码"></a>账号和密码</h2><ol><li><p>内网登录的网址：<a href="http://192.168.0.8:30000/">http://192.168.0.8:30000/</a></p></li><li><p>外网登录网址：<a href="http://120.79.170.202:9001/">http://120.79.170.202:9001/</a></p></li><li><p>每个人的账号都是自己的首字母<strong>大写</strong>，邮箱都是自己的qq邮箱。初始密码是：12345678 。第一次登陆需要自己修改密码。</p></li><li><p>如果忘记自己的密码，需要联系管理员本人，进行密码的修改（目前还没有邮件的功能）</p></li><li><p>管理员账户：root。管理员密码：PiedPiper</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\群晖使用手册\image-20211122194705212.png" alt="image-20211122194705212" style="zoom:50%;" /></li></ol><h2 id="设置ssh-keys登录"><a href="#设置ssh-keys登录" class="headerlink" title="设置ssh keys登录"></a>设置ssh keys登录</h2><p>为了方便和gitlab的交互，建议每个人学会git的操作使用。方便使用<strong>ssh keys</strong>进行登录从而进行代码的push和copy。</p><ol><li><p>点击Preferences，进入个人的设置界面。</p></li><li><p>在左侧的侧边栏中选择SSH Keys选项。</p></li><li><p>在自己的主机中找到自己的ssh文件（没有的话，利用git去生成。见<a href="https://blog.csdn.net/weixin_44291453/article/details/106763561%EF%BC%89">https://blog.csdn.net/weixin_44291453/article/details/106763561）</a></p></li><li><p>打开id_rsa.pub文件，将其中的内容。复制到gitlab界面的key选项的文本框中。此文件的目录（在我的windows中是）</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\群晖使用手册\image-20211122190230008.png" alt="image-20211122190230008"></p></li><li><p>之后就可以远程对自己加入的项目进行git操作了。</p></li><li><p>如果使用内网进行登录，直接使用clone标签下的提示命令就可以。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\群晖使用手册\image-20211122193428521.png" alt="image-20211122193428521"></p></li><li><p>如果使用外网登录，需要修改代码。例子如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone ssh:<span class="hljs-regexp">//gi</span>t@<span class="hljs-number">120.79</span>.<span class="hljs-number">170.202</span>:<span class="hljs-number">9002</span><span class="hljs-regexp">/szb/</span>sun_test.git<br></code></pre></td></tr></table></figure><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\群晖使用手册\image-20211122194920668.png" alt="image-20211122194920668" style="zoom:80%;" /><p>每个人的<code>120.79.170.202:9002</code>是不变的，是我们的反向代理的ip地址和端口号。后面的<code>/szb/sun_test.git</code>部分根据每个人情况有所不同。</p></li></ol><h2 id="创建小组和项目"><a href="#创建小组和项目" class="headerlink" title="创建小组和项目"></a>创建小组和项目</h2><p>每个人都有权限创建group和project。并且创建完了还可以邀请同组的成员，进行代码共享。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\群晖使用手册\image-20211122193904131.png" alt="image-20211122193904131"></p>]]></content>
    
    
    
    <tags>
      
      <tag>群晖使用手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>周报汇总</title>
    <link href="/2021/10/17/%E5%91%A8%E6%8A%A5%E6%B1%87%E6%80%BB/"/>
    <url>/2021/10/17/%E5%91%A8%E6%8A%A5%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="20211011-20211017"><a href="#20211011-20211017" class="headerlink" title="20211011-20211017"></a>20211011-20211017</h1><h2 id="本周工作"><a href="#本周工作" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>了解自动组卷系统的总体功能和具体需求。分为教师端和学生端。教师端可以录入题目，知识点分类，对学生的学习情况进行分析，生成试题，生成试卷。学生端能够进行答题和结果校验。</li><li>初步掌握并构建neo4j数据库，初步在服务器构建知识点结构。</li><li>用python实现三个功能（控制台输入输出）：题目录入、知识点录入、根据简单要求随机组题。</li></ol><h2 id="任务进度"><a href="#任务进度" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="Python自动组卷系统"><a href="#Python自动组卷系统" class="headerlink" title="Python自动组卷系统"></a>Python自动组卷系统</h3><ol><li>了解系统大概</li><li>设计并搭建数据库</li><li>python控制台实现基础功能（当前完成这一阶段）</li><li>构建基础UI端：实现录入题目、出题等基础功能</li><li>实现更丰富的功能：学生成绩的分析，更复杂的条件出题</li></ol><h2 id="下周任务工作计划"><a href="#下周任务工作计划" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>阅读并熟悉蒋老师发的文章</li><li>搭建”键值对“工作的环境</li><li>初步熟悉Python前后端工作，学习Django，在Centos服务器搭建python的web程序</li><li>完成Python自动组卷系统的第四阶段</li><li>初步设计学生端的数据库如何和知识题目的数据库结合</li></ol><h1 id="20211018-20211022"><a href="#20211018-20211022" class="headerlink" title="20211018-20211022"></a>20211018-20211022</h1><h2 id="本周工作-1"><a href="#本周工作-1" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>在服务器配置django+uwsgi+nginx的环境</li><li>配置使用pycharm可以远程调试服务器项目的环境</li><li>学习如何在django中调用neo4j数据库内容</li><li>学习django如何实现web项目开发，比如url的使用，html的搭配</li><li>记录搭建环境中不断遇到的问题和解决办法</li><li>阅读“键值对”论文的前两章</li></ol><h2 id="任务进度-1"><a href="#任务进度-1" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="Python自动组卷系统-1"><a href="#Python自动组卷系统-1" class="headerlink" title="Python自动组卷系统"></a>Python自动组卷系统</h3><ol><li>了解系统大概</li><li>设计并搭建数据库</li><li>python控制台实现基础功能</li><li>构建基础UI端：实现录入题目、出题等基础功能（当前处于这一阶段进行中，还在不断摸索）</li><li>实现更丰富的功能：学生成绩的分析，更复杂的条件出题</li></ol><h2 id="下周任务工作计划-1"><a href="#下周任务工作计划-1" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完成Python自动组卷系统的第四阶段</li><li>阅读完论文</li></ol><h1 id="20211025-20211029"><a href="#20211025-20211029" class="headerlink" title="20211025-20211029"></a>20211025-20211029</h1><h2 id="本周工作-2"><a href="#本周工作-2" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完成neo4j到echarts的数据转换与显示</li><li>完成neo4j数据库内容在前端的基础显示(只有节点title和边)，搭建教师端的index界面）</li><li>完成从前端向数据库添加、删除、更改知识、题目节点和节点之间的关系</li><li>完成教师端的出卷功能和试卷内容和答案的下载</li><li>与蒋老师讨论后续进展</li><li>index界面构建目录树</li></ol><h2 id="任务进度-2"><a href="#任务进度-2" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="Python自动组卷系统-2"><a href="#Python自动组卷系统-2" class="headerlink" title="Python自动组卷系统"></a>Python自动组卷系统</h3><ol><li>完成前端向服务器添加知识节点的功能</li><li>完成前端向服务器添加题目节点的功能</li><li>完成节点删除和更改的功能（只能对已有节点的属性值进行更改，无法动态增加或者删除某类节点的属性）</li><li>完成出卷的功能</li><li>教师端index界面展示目录树，增加空白属性以备后续使用，增加节点改成下拉框，自动判卷功能（<strong>目前处于此阶段</strong>）</li><li>学生端的主页设计</li><li>学生端的自动出题功能</li><li>学生的知识掌握情况的数据库设计和融入并将学生的知识掌握情况融入教师端的系统中</li><li>教师端和学生端的分开登录的功能</li></ol><h2 id="下周任务工作计划-2"><a href="#下周任务工作计划-2" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完成上述第五阶段后与蒋老师讨论</li><li>将系统复制到学校的阿里云服务器中</li></ol><h1 id="20211101-20211105"><a href="#20211101-20211105" class="headerlink" title="20211101-20211105"></a>20211101-20211105</h1><h2 id="本周工作-3"><a href="#本周工作-3" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>一周都在感冒，看病</li><li>实现首页目录树的构建以及和结构图的交互</li><li>实现动态添加知识节点，父节点使用下拉框显示</li><li>实现动态添加题目节点，多个父节点也可以使用下拉框显示</li><li>实现项目的迁移，从自己的腾讯云服务器迁移到了学校的阿里云</li><li>实现教师端从所有题目中进行选择从而出卷</li><li>修改<strong>中南大学教师教学发展中心教学学术研究专项基金项目申 请 表</strong></li></ol><h2 id="任务进度-3"><a href="#任务进度-3" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="Python自动组卷系统-3"><a href="#Python自动组卷系统-3" class="headerlink" title="Python自动组卷系统"></a>Python自动组卷系统</h3><ol><li>完成前端向服务器添加知识节点的功能</li><li>完成前端向服务器添加题目节点的功能</li><li>完成节点删除和更改的功能（只能对已有节点的属性值进行更改，无法动态增加或者删除某类节点的属性）</li><li>完成出卷的功能</li><li>教师端index界面展示目录树，增加空白属性以备后续使用，增加节点改成下拉框。</li><li>实现自动出卷，自动判卷功能（<strong>目前处于此阶段</strong>）</li><li>学生端的主页设计</li><li>学生端的自动出题功能</li><li>学生的知识掌握情况的数据库设计和融入并将学生的知识掌握情况融入教师端的系统中</li><li>教师端和学生端的分开登录的功能</li></ol><h2 id="下周任务工作计划-3"><a href="#下周任务工作计划-3" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>与谭勋勇见面并介绍系统（这周由于感冒原因一直没有见面）</li><li>实现自动判卷功能</li><li>设计并搭建学生端主页</li></ol><h1 id="20211108-20211112"><a href="#20211108-20211112" class="headerlink" title="20211108-20211112"></a>20211108-20211112</h1><h2 id="本周工作-4"><a href="#本周工作-4" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完成<strong>中南大学教师教学发展中心教学学术研究专项基金项目申请表</strong>的修改</li><li>优化系统的出卷预览功能和题目选择功能</li><li>完成平台的自动判卷功能，选择题、填空题和编程题目均可以在后端进行答案比对</li><li>完成对系统知识节点和题目节点插入时的查重功能</li><li>给谭勋勇介绍系统的具体内容，并告诉他应该重点学习python的哪一个方向</li><li>完成群晖的交接任务，实验室成员的账号分配和公网访问</li></ol><h2 id="任务进度-4"><a href="#任务进度-4" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="Python自动组卷系统-4"><a href="#Python自动组卷系统-4" class="headerlink" title="Python自动组卷系统"></a>Python自动组卷系统</h3><ol><li>完成前端向服务器添加知识节点的功能</li><li>完成前端向服务器添加题目节点的功能</li><li>完成节点删除和更改的功能（只能对已有节点的属性值进行更改，无法动态增加或者删除某类节点的属性）</li><li>完成出卷的功能</li><li>教师端index界面展示目录树，增加空白属性以备后续使用，增加节点改成下拉框。</li><li>实现自动出卷，自动判卷功能</li><li>插入真实数据（目前处于此阶段）</li><li>学生的知识掌握情况的数据库设计和融入并将学生的知识掌握情况融入教师端的系统中</li><li>学生端的主页设计</li><li>教师端和学生端的分开登录的功能</li></ol><h2 id="下周任务工作计划-4"><a href="#下周任务工作计划-4" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>在谭勋勇的协助下将搭建真实数据的数据库</li><li>继续在实验数据库中完成学生端的设计</li><li>群晖搭建gitlab</li><li>读完论文</li></ol><h1 id="20211115-2021111219"><a href="#20211115-2021111219" class="headerlink" title="20211115-2021111219"></a>20211115-2021111219</h1><h2 id="本周工作-5"><a href="#本周工作-5" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>读完论文《分布式键值存储系统中延迟优化研究》，正在阅读论文《Gimbal JBOFs》。</li><li>完成知识节点和题目节点属性的设计。</li><li>完成第一章节知识节点的添加</li><li>完成平台学生端的部分搭建，实现教师端和学生端的作业交互</li><li>群晖：完成远程使用ssh登录，搭建群晖本地gitlab，进行账号分配。</li></ol><h2 id="任务进度-5"><a href="#任务进度-5" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="Python自动组卷系统-5"><a href="#Python自动组卷系统-5" class="headerlink" title="Python自动组卷系统"></a>Python自动组卷系统</h3><ol><li>完成前端向服务器添加知识节点、题目节点的功能</li><li>完成节点删除和更改的功能（只能对已有节点的属性值进行更改，无法动态增加或者删除某类节点的属性）</li><li>完成出卷的功能</li><li>教师端index界面展示目录树，增加空白属性以备后续使用，增加节点改成下拉框。</li><li>实现自动出卷，自动判卷功能</li><li>插入真实数据</li><li>学生端的主页设计</li><li>学生节点的设计（目前处于此阶段）</li><li>系统对每次作业所有题目的答题情况进行统计：每个知识点的被掌握程度</li><li>系统对每个学生的学习情况进行统计：学生每次的小测成绩，学生对每个知识点的掌握程度</li><li>教师端和学生端的分开登录的功能</li></ol><h2 id="下周任务工作计划-5"><a href="#下周任务工作计划-5" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完成群晖gitlab搭建，完成群晖的使用手册</li><li>阅读完论文《Gimbal JBOFs》</li><li>设计平台如何对学生学习状态进行记录，并实现部分功能</li></ol><h1 id="20211122-2021111126"><a href="#20211122-2021111126" class="headerlink" title="20211122-2021111126"></a>20211122-2021111126</h1><h2 id="本周工作-6"><a href="#本周工作-6" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完成群晖的远程web端登录，群晖内gitlab的配置与账号管理，完成gitlab的远程登录与远程代码管理功能。完成群晖的使用手册</li><li>写教学辅助平台文档，写作方式一直有问题。所以计划开始写毕业论文中的需求分析的部分（开始画图）。</li><li>和谭勋勇沟通，目前已经完成了远程操作服务器的功能但是没有办法跑起来。约好下周二和他见面，帮他看看问题。（由于本科生的假期提前，导致他没有了周末，可能需要减轻给他的工作）</li><li>找到了gimbal论文的视频，进行粗略学习。</li><li>完成教学辅助平台登录端的功能(初版)。</li></ol><h2 id="任务进度-6"><a href="#任务进度-6" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="Python自动组卷系统-6"><a href="#Python自动组卷系统-6" class="headerlink" title="Python自动组卷系统"></a>Python自动组卷系统</h3><ol><li>完成前端向服务器添加知识节点、题目节点的功能</li><li>完成节点删除和更改的功能（只能对已有节点的属性值进行更改，无法动态增加或者删除某类节点的属性）</li><li>完成出卷的功能</li><li>教师端index界面展示目录树，增加空白属性以备后续使用，增加节点改成下拉框。</li><li>实现自动出卷，自动判卷功能</li><li>学生端的主页设计与学生节点的设计</li><li>利用session实现教师端和学生端，以及学生端内部的分开登录的功能（目前处于此阶段）</li><li>系统对每次作业所有题目的答题情况进行统计：每个知识点的被掌握程度</li><li>系统对每个学生的学习情况进行统计：学生每次的小测成绩，学生对每个知识点的掌握程度</li></ol><h2 id="下周任务工作计划-6"><a href="#下周任务工作计划-6" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>熟悉蒋老师发的华为项目的问题二，结合汲发师兄的论文与gimbal的论文进行构思，看看是否有idea</li><li>完成平台的session部分。</li><li>设计出较为完整的平台需求分析文档与清晰明了的图例</li><li>帮助谭勋勇跑通程序并让他看懂代码</li></ol><h1 id="20211129-20211203"><a href="#20211129-20211203" class="headerlink" title="20211129-20211203"></a>20211129-20211203</h1><h2 id="本周工作-7"><a href="#本周工作-7" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>完成毕设任务书</p></li><li><p>了解华为项目，学习网卡的基本知识，安装网卡驱动，正在复现论文中的对比试验部分。</p></li><li><p>完成实验环境的硬件搭建。</p></li><li><p>和谭勋勇沟通，成功再他的电脑中跑通代码。</p></li><li><p>完成教学辅助平台登录端的功能的修改，实现了强制登陆的功能。</p></li><li><p>完成教学辅助平台的功能模块图和数据流图。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\source_posts\images\周报汇总\image-20211205232722943.png" alt="image-20211205232722943"></p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\source_posts\images\周报汇总\image-20211205232754254.png" alt="image-20211205232754254"></p></li></ol><h2 id="任务进度-7"><a href="#任务进度-7" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="Python自动组卷系统-7"><a href="#Python自动组卷系统-7" class="headerlink" title="Python自动组卷系统"></a>Python自动组卷系统</h3><ol><li>完成前端向服务器添加知识节点、题目节点的功能</li><li>完成节点删除和更改的功能（只能对已有节点的属性值进行更改，无法动态增加或者删除某类节点的属性）</li><li>完成出卷的功能</li><li>教师端index界面展示目录树，增加空白属性以备后续使用，增加节点改成下拉框。</li><li>实现自动出卷，自动判卷功能</li><li>学生端的主页设计与学生节点的设计</li><li>利用session实现教师端和学生端，以及学生端内部的分开登录的功能</li><li>整理需求，绘制流程图和功能图，完成部分毕业论文（目前处于此阶段）</li><li>系统对每次作业所有题目的答题情况进行统计：每个知识点的被掌握程度</li><li>系统对每个学生的学习情况进行统计：学生每次的小测成绩，学生对每个知识点的掌握程度</li></ol><h3 id="华为智能网卡项目（实现论文中的对比试验）"><a href="#华为智能网卡项目（实现论文中的对比试验）" class="headerlink" title="华为智能网卡项目（实现论文中的对比试验）"></a>华为智能网卡项目（实现论文中的对比试验）</h3><ol><li><p>搞懂论文中的对比实验是如何做的</p></li><li><p>找到两台拥有X5网卡的机器</p></li><li><p>安装驱动，将机器连通（目前处于此阶段）</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">由于当前的两个机子一个是Ce<span class="hljs-symbol">ntos6</span>，另一个是Ubu<span class="hljs-symbol">ntu18</span><span class="hljs-number">.04</span>，版本差的太多，所以导致两个机器对应的驱动没有办法很好的实现网卡的对接，所以正在将Ce<span class="hljs-symbol">ntOS6</span>升级为Ce<span class="hljs-symbol">ntOS7</span>，然后安装Ce<span class="hljs-symbol">ntOS7</span>对应的网卡驱动，从而实现和Ubu<span class="hljs-symbol">ntu18</span><span class="hljs-number">.04</span>的相对应<br></code></pre></td></tr></table></figure></li><li><p>配置实验中发包的频率和数量以及流的大小</p></li><li><p>运行实验</p></li><li><p>对两个机器中的吞吐量进行统计</p></li></ol><h2 id="下周任务工作计划-7"><a href="#下周任务工作计划-7" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>继续熟悉蒋老师发的华为项目的问题二，并阅读田荘师兄和蒋老师提供的论文，熟悉实验环境。整理问题</li><li>完成毕设任务计划书</li><li>跑通论文中的对比试验</li><li>着手写毕设论文的需求分析部分</li></ol><h1 id="20211206-20211210"><a href="#20211206-20211210" class="headerlink" title="20211206-20211210"></a>20211206-20211210</h1><h2 id="本周工作-8"><a href="#本周工作-8" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完成毕设任务书,找到翻译文章</li><li>进行系统的重装，两个机器的网卡驱动安装相同版本，实验环境硬件部分配置成功</li><li>找到了网卡驱动的开发手册、rdma编程的用户使用手册、infiniband的制作标准三个参考手册，方便查阅</li><li>了解rdma的基本知识，跑通了edma编程用户使用手册中的srq的示例。证明环境是没有问题的。</li></ol><h2 id="任务进度-8"><a href="#任务进度-8" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="Python自动组卷系统-8"><a href="#Python自动组卷系统-8" class="headerlink" title="Python自动组卷系统"></a>Python自动组卷系统</h3><ol><li>完成前端向服务器添加知识节点、题目节点的功能</li><li>完成节点删除和更改的功能（只能对已有节点的属性值进行更改，无法动态增加或者删除某类节点的属性）</li><li>完成出卷的功能</li><li>教师端index界面展示目录树，增加空白属性以备后续使用，增加节点改成下拉框。</li><li>实现自动出卷，自动判卷功能</li><li>学生端的主页设计与学生节点的设计</li><li>利用session实现教师端和学生端，以及学生端内部的分开登录的功能</li><li>整理需求，绘制流程图和功能图，完成部分毕业论文（目前处于此阶段）</li><li>系统对每次作业所有题目的答题情况进行统计：每个知识点的被掌握程度</li><li>系统对每个学生的学习情况进行统计：学生每次的小测成绩，学生对每个知识点的掌握程度</li></ol><h3 id="华为智能网卡项目（实现华为项目中的多个applications共享srq）"><a href="#华为智能网卡项目（实现华为项目中的多个applications共享srq）" class="headerlink" title="华为智能网卡项目（实现华为项目中的多个applications共享srq）"></a>华为智能网卡项目（实现华为项目中的多个applications共享srq）</h3><ol><li><p>找到两台拥有X5网卡的机器</p></li><li><p>安装驱动，将机器连通</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">由于当前的两个机子一个是Ce<span class="hljs-symbol">ntos6</span>，另一个是Ubu<span class="hljs-symbol">ntu18</span><span class="hljs-number">.04</span>，版本差的太多，所以导致两个机器对应的驱动没有办法很好的实现网卡的对接，所以正在将Ce<span class="hljs-symbol">ntOS6</span>升级为Ce<span class="hljs-symbol">ntOS7</span>，然后安装Ce<span class="hljs-symbol">ntOS7</span>对应的网卡驱动，从而实现和Ubu<span class="hljs-symbol">ntu18</span><span class="hljs-number">.04</span>的相对应<br></code></pre></td></tr></table></figure></li><li><p>找到示例代码，进行解读（目前处于此阶段）</p></li><li><p>设计实验数据</p></li><li><p>运行实验</p></li><li><p>对两个机器中的吞吐量进行统计（使用ibumbs工具和wireshark进行抓包）</p></li></ol><h2 id="下周任务工作计划-8"><a href="#下周任务工作计划-8" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>继续熟悉蒋老师发的华为项目的问题二</li><li>读懂用户手册中和srq相关的代码</li><li>学习ibumbs（rdma抓包工具）和wireshark如何进行抓包</li><li>对代码进行更新，表达问题二</li></ol><h1 id="20211213-20211217"><a href="#20211213-20211217" class="headerlink" title="20211213-20211217"></a>20211213-20211217</h1><h2 id="本周工作-9"><a href="#本周工作-9" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>安装wireshark，tcpdump等抓包工具并学习</p></li><li><p>学习rdma用户手册中的关于srq和基本操作的代码，并配置基本环境跑通代码。</p></li><li><p>重新回顾华为问题，了解实验目标。通过使用NVMe-oF方法来实现一个机器向另一个机器的ssd写入内容。通过RDMA方法中的ROCEV2传输层协议可以实现NVMe的功能，使RDMA作为NVMe协议的载体。</p><p>减少SRQ的深度，客户端向服务器端读取硬盘内容，创建多个QP向硬盘发起send请求导致SRQ中的WQE供不应求，观察RNR。</p></li><li><p>学习NVMe的相关知识，发现当前实验所用的两台机器的固态硬盘并非是支持NVMe协议的，是SATA硬盘。</p></li><li><p>手动升级tcpdump和libpcap，实现能够对ROCE进行抓包。</p></li></ol><h2 id="任务进度-9"><a href="#任务进度-9" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="华为智能网卡项目"><a href="#华为智能网卡项目" class="headerlink" title="华为智能网卡项目"></a>华为智能网卡项目</h3><ol><li><p>找到两台拥有X5网卡的机器</p></li><li><p>安装驱动，将机器连通</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">由于当前的两个机子一个是Ce<span class="hljs-symbol">ntos6</span>，另一个是Ubu<span class="hljs-symbol">ntu18</span><span class="hljs-number">.04</span>，版本差的太多，所以导致两个机器对应的驱动没有办法很好的实现网卡的对接，所以正在将Ce<span class="hljs-symbol">ntOS6</span>升级为Ce<span class="hljs-symbol">ntOS7</span>，然后安装Ce<span class="hljs-symbol">ntOS7</span>对应的网卡驱动，从而实现和Ubu<span class="hljs-symbol">ntu18</span><span class="hljs-number">.04</span>的相对应<br></code></pre></td></tr></table></figure></li><li><p>安装NVMe的固态硬盘，进行配置，实现NVme的基础功能。</p></li><li><p>找到NVMe的示例代码，进行解读（目前处于此阶段）</p></li><li><p>设计实验数据</p></li><li><p>运行实验</p></li><li><p>对两个机器中的吞吐量进行统计（使用ibumbs工具和wireshark进行抓包）</p></li></ol><h2 id="下周任务工作计划-9"><a href="#下周任务工作计划-9" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>查找并学习NVMe-oF的学习手册</li><li>华为项目的方案设计与实现</li><li>学习RDMA和NVMe</li></ol><h1 id="20211220-20211224"><a href="#20211220-20211224" class="headerlink" title="20211220-20211224"></a>20211220-20211224</h1><h2 id="本周工作-10"><a href="#本周工作-10" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>成功使用wireshark对rdma的发包进行了抓取，包类型是RROCE,代表的是ROCEV2。</li><li>统计实验室机器的固态硬盘类型</li><li>阅读nvme的相关参考文献：nvme是在事务层之上的，属于应用层协议。</li><li>学习NVMe-oF，NVMe-oF也是一种协议，定义在传输层之上，用各种通用的传输层协议来实现NVMe功能。</li><li>选购并安装nvme固态硬盘，看到两台机器能够使用nvme了</li></ol><h2 id="任务进度-10"><a href="#任务进度-10" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="华为智能网卡项目-1"><a href="#华为智能网卡项目-1" class="headerlink" title="华为智能网卡项目"></a>华为智能网卡项目</h3><ol><li><p>找到两台拥有X5网卡的机器</p></li><li><p>安装驱动，将机器连通</p></li><li><p>安装NVMe的固态硬盘，进行配置，实现NVme的基础功能。</p></li><li><p>找到NVMe的示例代码，进行解读（目前处于此阶段）</p></li><li><p>设计实验数据：由主机向NVMe客户端的NVMe-ssd发起写请求。</p></li><li><p>运行实验</p></li><li><p>对两个机器中的吞吐量进行统计（使用ibumbs工具和wireshark进行抓包）</p></li></ol><h2 id="下周任务工作计划-10"><a href="#下周任务工作计划-10" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li><p>学习NVMe和NVMe-oF的学习手册目前找到的有</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\source_posts\images\周报汇总\image-20211225234309564.png" alt="image-20211225234309564"></p></li><li><p>华为项目的方案设计与实现</p></li><li><p>两个机器实现NVMe-oF的交互</p></li></ol><h1 id="20211227-20211231"><a href="#20211227-20211231" class="headerlink" title="20211227-20211231"></a>20211227-20211231</h1><h2 id="本周工作-11"><a href="#本周工作-11" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>学习rdma的api使用，读懂rdma用户手册中关于srq的使用代码，并修改代码。</p></li><li><p>学习ib规范手册，了解rnr的工作原理以及在协议中的表示。结合srq代码对使用srq的rdma收发包进行抓包，成功抓取带有rnr的包。但是代码中还有一些问题。</p></li><li><p>阅读nvme-of的相关参考文献，了解nvme-of的基本框架。汇总成文件。</p></li><li><p>学习nvme的命令流程</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\source_posts\images\周报汇总\7d6a5c1d05170cf3eebb6801d9765f9.png" alt="7d6a5c1d05170cf3eebb6801d9765f9"></p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\source_posts\images\周报汇总\d7cf3ce0584ebd8665a98d2b6ee8c2a.png" alt="d7cf3ce0584ebd8665a98d2b6ee8c2a"></p></li></ol><h2 id="任务进度-11"><a href="#任务进度-11" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="华为智能网卡项目-2"><a href="#华为智能网卡项目-2" class="headerlink" title="华为智能网卡项目"></a>华为智能网卡项目</h3><ol><li><p>找到两台拥有X5网卡的机器</p></li><li><p>安装驱动，将机器连通</p></li><li><p>学习nvme-of的具体工作流程，了解整体的工作细节，协议栈中的每一层都在做什么（目前处于此阶段）</p></li><li><p>思考能够在nvme-of流程中的哪些方面进行优化</p></li></ol><h2 id="下周任务工作计划-11"><a href="#下周任务工作计划-11" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>学习nvme的具体工作流程，命令的具体使用流程以及应用层中的命令操作和源代码</li><li>学习nvme-of的具体工作流程，主要看不同主机之间的nvme老师如何通过roce实现的。</li><li>根据老师的要求看 是否要在两个机器中实现nvme的基础操作还是说继续学习基础知识，搭建理论模型。</li></ol><h1 id="20220103-20220107"><a href="#20220103-20220107" class="headerlink" title="20220103-20220107"></a>20220103-20220107</h1><h2 id="本周工作-12"><a href="#本周工作-12" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>准备机器学习考试。</li><li>初步构思并整理python系统的工作。计划在周一的时候在毕设的文件中进行一份详细的整理。</li><li>对新校实验室的机器进行IP地址查询和校外访问测试，群晖工作中密码的修改</li></ol><h2 id="任务进度-12"><a href="#任务进度-12" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="华为智能网卡项目-3"><a href="#华为智能网卡项目-3" class="headerlink" title="华为智能网卡项目"></a>华为智能网卡项目</h3><ol><li><p>找到两台拥有X5网卡的机器</p></li><li><p>安装驱动，将机器连通</p></li><li><p>学习nvme-of的具体工作流程，了解整体的工作细节，协议栈中的每一层都在做什么（目前处于此阶段）</p></li><li><p>思考能够在nvme-of流程中的哪些方面进行优化</p></li></ol><h2 id="下周任务工作计划-12"><a href="#下周任务工作计划-12" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完成python系统的整理，开始写毕业论文</li><li>年终总结</li><li>和本科生对接python项目</li></ol><h1 id="20220110-20220114"><a href="#20220110-20220114" class="headerlink" title="20220110-20220114"></a>20220110-20220114</h1><h2 id="本周工作-13"><a href="#本周工作-13" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>和谭勋勇与李阮君校对python系统的工作，目前正在插入前两章的题目</li><li>python系统的目录说明以及项目架构进行文件总结</li><li>参与华为项目，了解之前的工作有错误的地方，sq和ssd是多对一的关系，并不是多对多的</li></ol><h2 id="任务进度-13"><a href="#任务进度-13" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="python教学辅助平台（寒假）"><a href="#python教学辅助平台（寒假）" class="headerlink" title="python教学辅助平台（寒假）"></a>python教学辅助平台（寒假）</h3><ol><li><p>谭勋勇和李阮君熟悉项目，对项目形成大概构思</p></li><li><p>完成对知识点和题库的添加同时能够对项目进行小范围的修改和优化（目前处于此阶段）</p></li><li><p>对项目的剩余功能进行构思和实现</p></li><li><p>平台的测试和优化</p></li></ol><h2 id="下周任务工作计划-13"><a href="#下周任务工作计划-13" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>继续完善关于平台的文档</li><li>年终总结</li><li>继续指导谭勋勇和李阮君</li><li>构思平台中学生的信息和题目是如何对应的</li><li>学习nvme-of，找到相关的视频或者参考资料</li></ol><h1 id="20220117-20220121"><a href="#20220117-20220121" class="headerlink" title="20220117-20220121"></a>20220117-20220121</h1><h2 id="本周工作-14"><a href="#本周工作-14" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>指导谭勋勇和李阮君完成部分的python平台的优化工作</li><li>构思python平台的学习信息存储细节，形成文档</li><li>学习XRC，形成文档</li><li>年终总结报告完成</li></ol><h2 id="任务进度-14"><a href="#任务进度-14" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="python教学辅助平台（寒假）-1"><a href="#python教学辅助平台（寒假）-1" class="headerlink" title="python教学辅助平台（寒假）"></a>python教学辅助平台（寒假）</h3><ol><li><p>谭勋勇和李阮君熟悉项目，对项目形成大概构思</p></li><li><p>完成对知识点和题库的添加同时能够对项目进行小范围的修改和优化</p></li><li><p>对项目的剩余功能进行构思和实现（目前处于此阶段）</p></li><li><p>平台的测试和优化</p></li></ol><h2 id="下周任务工作计划-14"><a href="#下周任务工作计划-14" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>学习nvme-of</li><li>完成华为的项目申请书</li><li>完成python平台的功能</li></ol><h1 id="20220221-20220225"><a href="#20220221-20220225" class="headerlink" title="20220221-20220225"></a>20220221-20220225</h1><h2 id="本周工作-15"><a href="#本周工作-15" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>python平台完成不限时间限制功能</li><li>python平台完成指定作业题目的功能</li><li>python平台完成只告诉学生作业对不对，不告诉正确答案的功能</li><li>优化学生的作业端功能</li></ol><h2 id="任务进度-15"><a href="#任务进度-15" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="python教学辅助平台"><a href="#python教学辅助平台" class="headerlink" title="python教学辅助平台"></a>python教学辅助平台</h3><ol><li><p>添加学生的信息</p></li><li><p>学生添加题库的时候希望可以经过教师端的审核再添加</p></li><li><p>学生自主测试的功能目前还没有办法显示出来</p></li><li><p>对编程题如何判断进行优化</p></li><li><p>平台的测试和优化</p></li></ol><h2 id="下周任务工作计划-15"><a href="#下周任务工作计划-15" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>添加学生信息</li><li>完成学生端自主测试的功能和编程题的判断优化。并让师兄进行测试</li><li>论文翻译</li></ol><h1 id="20220228-20220304"><a href="#20220228-20220304" class="headerlink" title="20220228-20220304"></a>20220228-20220304</h1><h2 id="本周工作-16"><a href="#本周工作-16" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>python平台完成编程题的优化</li><li>完成论文翻译</li><li>写完教改文档的功能模块和总体设计与实现的部分</li><li>完成在学生-题目关系中存储学生答案</li></ol><h2 id="任务进度-16"><a href="#任务进度-16" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="python教学辅助平台（按优先级从上到下）"><a href="#python教学辅助平台（按优先级从上到下）" class="headerlink" title="python教学辅助平台（按优先级从上到下）"></a>python教学辅助平台（按优先级从上到下）</h3><ol><li><p>学生答案的存储（还需要在py中进行存储）</p></li><li><p>生成报表的功能，单次作业学生得分和单次作业的作业题目情况</p></li><li><p>学生可以看到自己的答题情况</p></li><li><p>学生添加题库的时候希望可以经过教师端的审核再添加</p></li><li><p>学生可以再次提交</p></li><li><p>题目内容可以在教师端首页进行查看</p></li></ol><h2 id="下周任务工作计划-16"><a href="#下周任务工作计划-16" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>调研报告</li><li>毕业论文ppt</li><li>继续修改教改文档</li><li>完成任务进度中1-3</li></ol><h1 id="20220307-20220311"><a href="#20220307-20220311" class="headerlink" title="20220307-20220311"></a>20220307-20220311</h1><h2 id="本周工作-17"><a href="#本周工作-17" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完成调研报告</li><li>修改完成教改文档</li><li>完成毕业论文ppt</li><li>成功布置第二次作业和测试</li><li>完成生成报表的功能</li></ol><h2 id="任务进度-17"><a href="#任务进度-17" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="python教学辅助平台（按优先级从上到下）-1"><a href="#python教学辅助平台（按优先级从上到下）-1" class="headerlink" title="python教学辅助平台（按优先级从上到下）"></a>python教学辅助平台（按优先级从上到下）</h3><ol><li><p>学生答案的存储（还需要在py中进行存储）</p></li><li><p>生成报表的功能，单次作业学生得分和单次作业的作业题目情况</p></li><li><p>学生可以看到自己的答题情况</p></li><li><p>教师可以查看具体的题目有什么</p></li><li><p>学生添加题库的时候希望可以经过教师端的审核再添加</p></li><li><p>学生可以再次提交</p></li><li><p>题目内容可以在教师端首页进行查看</p></li></ol><h2 id="下周任务工作计划-17"><a href="#下周任务工作计划-17" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完善毕业论文ppt</li><li>继续修改教改文档</li><li>完成任务进度中3-5</li></ol><h1 id="20220314-20220318"><a href="#20220314-20220318" class="headerlink" title="20220314-20220318"></a>20220314-20220318</h1><h2 id="本周工作-18"><a href="#本周工作-18" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>继续完善毕业论文ppt</li><li>布置第三次作业</li><li>和李阮君对齐在线测试功能</li><li>准备组会</li><li>教学改革文档修改</li></ol><h2 id="任务进度-18"><a href="#任务进度-18" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="python教学辅助平台（按优先级从上到下）-2"><a href="#python教学辅助平台（按优先级从上到下）-2" class="headerlink" title="python教学辅助平台（按优先级从上到下）"></a>python教学辅助平台（按优先级从上到下）</h3><ol><li><p>学生答案的存储（还需要在py中进行存储）</p></li><li><p>生成报表的功能，单次作业学生得分和单次作业的作业题目情况</p></li><li><p>开放在线训练平台</p></li><li><p>学生可以看到自己的答题情况</p></li><li><p>教师可以查看具体的题目有什么</p></li><li><p>学生添加题库的时候希望可以经过教师端的审核再添加</p></li><li><p>学生可以再次提交</p></li><li><p>题目内容可以在教师端首页进行查看</p></li></ol><h2 id="下周任务工作计划-18"><a href="#下周任务工作计划-18" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完善毕业论文ppt</li><li>组会汇报</li><li>计划发布在线训练功能</li><li>第四次作业</li></ol><h1 id="20220321-20220325"><a href="#20220321-20220325" class="headerlink" title="20220321-20220325"></a>20220321-20220325</h1><h2 id="本周工作-19"><a href="#本周工作-19" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>毕业论文完成第一章引言和第二章的相关知识概述</li><li>布置第四次作业</li><li>完成学生分类管理功能</li><li>发布在线训练功能</li><li>搭建nvme over fabric基本环境，测试fio命令</li></ol><h2 id="任务进度-19"><a href="#任务进度-19" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="python教学辅助平台（按优先级从上到下）-3"><a href="#python教学辅助平台（按优先级从上到下）-3" class="headerlink" title="python教学辅助平台（按优先级从上到下）"></a>python教学辅助平台（按优先级从上到下）</h3><ol><li><p>学生端分类管理</p></li><li><p>学生答案的存储（还需要在py中进行存储）</p></li><li><p>生成报表的功能，单次作业学生得分和单次作业的作业题目情况</p></li><li><p>开放在线训练平台（目前处于此阶段）</p></li><li><p>在线训练和作业情况分开记录</p></li><li><p>教师可以查看作业内容和题库内容</p></li><li><p>学生可以看到自己的答题情况</p></li><li><p>学生添加题库的时候希望可以经过教师端的审核再添加</p></li><li><p>学生可以再次提交</p></li><li><p>题目内容可以在教师端首页进行查看</p></li></ol><h2 id="下周任务工作计划-19"><a href="#下周任务工作计划-19" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完成毕业论文需求分析文档</li><li>吞吐量跑到100Gbps</li><li>第五次作业</li><li>完成5、6、7</li></ol><h1 id="20220328-20220401"><a href="#20220328-20220401" class="headerlink" title="20220328-20220401"></a>20220328-20220401</h1><h2 id="本周工作-20"><a href="#本周工作-20" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>毕业论文完成第三章需求分析，修改第一章的研究现状（完善表格）</li><li>辅助田荘师兄找到网卡带宽无法跑满的问题。</li><li>完成学生分类功能</li><li>整理数据分析需要收集的信息</li></ol><h2 id="任务进度-20"><a href="#任务进度-20" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="python教学辅助平台（按优先级从上到下）-4"><a href="#python教学辅助平台（按优先级从上到下）-4" class="headerlink" title="python教学辅助平台（按优先级从上到下）"></a>python教学辅助平台（按优先级从上到下）</h3><ol><li><p>学生端分类管理</p></li><li><p>学生答案的存储（还需要在py中进行存储）</p></li><li><p>生成报表的功能，单次作业学生得分和单次作业的作业题目情况</p></li><li><p>开放在线训练平台</p></li><li><p>在线训练和作业情况分开记录<strong>（目前处于此阶段）</strong></p></li><li><p>教师可以查看作业内容和题库内容</p></li><li><p>学生可以看到自己的答题情况</p></li><li><p>学生添加题库的时候希望可以经过教师端的审核再添加</p></li><li><p>学生可以再次提交</p></li><li><p>题目内容可以在教师端首页进行查看</p></li></ol><h2 id="下周任务工作计划-20"><a href="#下周任务工作计划-20" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li><p>完善毕业论文PPT</p></li><li><p>和李泽鹏一起整理nvme的具体流程</p></li><li><p>和李阮君讨论系统接下来的功能</p></li></ol><h1 id="20220404-20220408"><a href="#20220404-20220408" class="headerlink" title="20220404-20220408"></a>20220404-20220408</h1><h2 id="本周工作-21"><a href="#本周工作-21" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>教学系统开放二三章的模拟，记录学生的模拟数据</li><li>找到合适机器让网卡跑满100G</li><li>找到发送端和接收端没有办法互换的问题，找到解决办法：使用rdma_cm的相关命令。</li><li>整合nvme over fabric的具体流程</li></ol><h2 id="任务进度-21"><a href="#任务进度-21" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="python教学辅助平台（按优先级从上到下）-5"><a href="#python教学辅助平台（按优先级从上到下）-5" class="headerlink" title="python教学辅助平台（按优先级从上到下）"></a>python教学辅助平台（按优先级从上到下）</h3><ol><li><p>学生端分类管理</p></li><li><p>学生答案的存储（还需要在py中进行存储）</p></li><li><p>生成报表的功能，单次作业学生得分和单次作业的作业题目情况</p></li><li><p>开放在线训练平台</p></li><li><p>在线训练和作业情况分开记录</p></li><li><p>教师可以查看作业内容和题库内容</p></li><li><p>学生可以看到自己的答题情况<strong>（目前处于此阶段）</strong></p></li><li><p>学生添加题库的时候希望可以经过教师端的审核再添加</p></li><li><p>学生可以再次提交</p></li><li><p>题目内容可以在教师端首页进行查看</p></li></ol><h2 id="下周任务工作计划-21"><a href="#下周任务工作计划-21" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完成毕业论文PPT</li><li>协助田荘师兄在实验平台跑出问题</li><li>继续熟悉nvme over fabric工作</li></ol><h1 id="20220418-20220422"><a href="#20220418-20220422" class="headerlink" title="20220418-20220422"></a>20220418-20220422</h1><h2 id="本周工作-22"><a href="#本周工作-22" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>布置python第八次作业，遇到一点bug，修改</li><li>修改论文框架</li><li>论文写完一二三章的初稿，还剩第四章evaluation。</li></ol><h2 id="任务进度-22"><a href="#任务进度-22" class="headerlink" title="任务进度"></a>任务进度</h2><h3 id="python教学辅助平台论文框架"><a href="#python教学辅助平台论文框架" class="headerlink" title="python教学辅助平台论文框架"></a>python教学辅助平台论文框架</h3><ol><li>论文框架确定：介绍、相关工作、设计与实现、评估、总结</li><li><strong>从不同的角度找相关工作，然后确定哪一个角度更方便立主线</strong>，当前可能主线及其相关工作调研有：<ul><li>知识图谱为特色的Python课程改革：Python课程的改革相关论文，及其总结</li><li>知识图谱为特色的线上教学改革：对线上教学的主流app进行分析，主要分析知识存储方式</li><li>Python课程为特色的知识图谱应用于教学：对知识图谱应用于教学的相关论文进行分析</li><li>平台综合功能为特色的线上教学改革：对线上教学的主流app进行综合分析，从而确定本平台的各种优势</li><li> 单纯介绍平台：相关工作可以说没有专门的平台针对python教学，或直接不涉及相关工作，类似SPCR那篇论文。</li></ul></li><li>论文的介绍、相关工作都需要依据论文的主线</li><li>设计与实现可以参照毕业论文的设计与实现</li></ol><h2 id="下周任务工作计划-22"><a href="#下周任务工作计划-22" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>周一完成论文初稿</li><li>对初稿进行修改</li></ol><h1 id="20220502-20220506"><a href="#20220502-20220506" class="headerlink" title="20220502-20220506"></a>20220502-20220506</h1><h2 id="本周工作-23"><a href="#本周工作-23" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完成论文</li><li>和胡师兄讨论修改论文细节</li><li>完成毕业论文初稿</li></ol><h2 id="下周任务工作计划-23"><a href="#下周任务工作计划-23" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完成毕业论文的修改，进行第一次提交</li><li>完成论文修改</li><li>了解田荘师兄实验进展</li></ol><h1 id="20220509-20220513"><a href="#20220509-20220513" class="headerlink" title="20220509-20220513"></a>20220509-20220513</h1><h2 id="本周工作-24"><a href="#本周工作-24" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>修改毕业论文</li><li>总结调研报告的NVMe部分</li><li>和李泽鹏交流，学习FIO</li></ol><h2 id="下周任务工作计划-24"><a href="#下周任务工作计划-24" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>协助邱师兄在实验环境中完成SSD的四个场景</li><li>提交论文的第一次查重</li><li>了解当前实验的进度，熟悉工作和相关工具。</li></ol><h1 id="20220516-20220520"><a href="#20220516-20220520" class="headerlink" title="20220516-20220520"></a>20220516-20220520</h1><h2 id="本周工作-25"><a href="#本周工作-25" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>提交毕业设计文件</li><li>修改调研报告内NVMe的部分和SSD的实验</li><li>学习FIO的具体使用</li></ol><h2 id="下周任务工作计划-25"><a href="#下周任务工作计划-25" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>修改调研报告内的论文总结，SSD实验总结，SPDK部分</li><li>修改算法设计文档</li><li>毕设答辩</li><li>Python教学平台的总结和规划</li></ol><h1 id="20220523-20220527"><a href="#20220523-20220527" class="headerlink" title="20220523-20220527"></a>20220523-20220527</h1><h2 id="本周工作-26"><a href="#本周工作-26" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完成毕业设计的ppt和论文</li><li>毕业设计答辩</li><li>和师兄讨论调研报告的内容，确定做实验的细节</li><li>修改调完报告的论文分析</li></ol><h2 id="下周任务工作计划-26"><a href="#下周任务工作计划-26" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完成调研报告SSD瓶颈分析部分。</li><li>关于iosize，iodepth，numjobs三个参数都需要做出一个iops（横轴）和平均延迟（纵轴）的散点图（每个点对应每一个参数的具体值），在这个图中可以找到这三个参数导致SSD拥塞的临界值。</li><li>取前面的临界值左右各两三个点，画出三个参数的延迟随时间变化的折线图（三个图，每个图五六个折线）。</li><li>顺序读、顺序写、随机读、随机写、顺序混合、随机混合，这六个读写方式的折线图。</li><li>优秀毕业论文申请。</li></ol><h1 id="20220704-20220708"><a href="#20220704-20220708" class="headerlink" title="20220704-20220708"></a>20220704-20220708</h1><h2 id="本周工作-27"><a href="#本周工作-27" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完成Python课程学生的平时分计算</li><li>掌握Gimbal论文的credit和token算法</li><li>更新ssd拥塞控制中的credit和token算法，还有流程图</li><li>和高中生对接</li></ol><h2 id="下周任务工作计划-27"><a href="#下周任务工作计划-27" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>和陈嘉良邱煜佳师兄初步使用disksim完成对ssd相关问题的模拟</li><li>帮助邱煜佳师兄完善方案</li></ol><h2 id="项目：ssd拥塞感知与控制"><a href="#项目：ssd拥塞感知与控制" class="headerlink" title="项目：ssd拥塞感知与控制"></a>项目：ssd拥塞感知与控制</h2><ul><li>问题：和Gimbal要解决的问题类似，都是解决SSD拥塞的感知和控制，对ssd的状态进行掌握，然后对任务的提交进行调整</li><li>特点（和Gimbal的不同）：</li></ul><p>不仅将延时作为拥塞感知的指标（历史的变化），同时使用了队列作为拥塞感知的指标（能够对当前的ssd的排队情况进行掌握）。能够从历史和现在两个角度共同出发对ssd的拥塞进行感知。</p><p>借鉴了Gimbal使用了credit对IO生成速率进行控制，使用动态阈值对IO提交速率进行控制。对算法进行了更新，同时还增加了两个特色：更加注重了IO提交速率控制和IO生成速率控制之间的联系。</p><ul><li>仿真：第一步先能够结合disksim仿真出来和一般nvme over fabric相同的操作，能够对基本的数据进行掌握和分析。第二步在模拟的基本操作中跑出基本的问题（多个initiators访问同一个target的ssd造成拥塞）。第三步在仿真中实现我们基本的算法，跑不同场景（单双端，IO提交速率和生成速率结合的问题），体现出我们和gimbal的不同。第四步在仿真中优化我们的算法。</li></ul><h1 id="20220711-20220715"><a href="#20220711-20220715" class="headerlink" title="20220711-20220715"></a>20220711-20220715</h1><h2 id="本周工作-28"><a href="#本周工作-28" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>和张汭彬对接，带他熟悉python项目，告诉他大概ppt怎么做</li><li>和师兄修改ssd拥塞控制的方案</li><li>补充ns3的架构图中ssd拥塞控制部分</li><li>学习ns3</li></ol><h2 id="下周任务工作计划-28"><a href="#下周任务工作计划-28" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>和陈嘉良一起使用simpy先对IO提交速度控制的部分进行简单模拟</li><li>理清思路，阅读相关文章，看看如何对IO生成速度进行进一步控制，完善方案</li><li>进一步学习ns3仿真程序，尝试完成自己部分</li></ol><h1 id="20220718-20220722"><a href="#20220718-20220722" class="headerlink" title="20220718-20220722"></a>20220718-20220722</h1><h2 id="本周工作-29"><a href="#本周工作-29" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完成基于ns3框架的ssd拥塞控制模块的设计</li><li>学习SimPy</li><li>在SimPy程序中添加IO提交速度控制部分，简单能够跑起来了。</li><li>熟悉fio的参数和nvmeoF的细节</li></ol><h2 id="下周任务工作计划-29"><a href="#下周任务工作计划-29" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>构思SimPy模拟的场景，进一步区分读写操作，加入disksim。希望能生成部分数据</li><li>理清思路，阅读相关文章，看看如何对IO生成速度进行进一步控制，完善方案</li><li>学习ns3仿真程序，尝试完成自己部分</li></ol><h1 id="20220725-20220729"><a href="#20220725-20220729" class="headerlink" title="20220725-20220729"></a>20220725-20220729</h1><h2 id="本周工作-30"><a href="#本周工作-30" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>熟悉本地NVMe操作流程，将controller在流程中的作用加到了ns3框架图中</li><li>学习NVMe oF的操作流程，找到了介绍read和write操作的ppt和视频。把流程补充到ns3框架中</li><li>在64位服务器上安装DiskSim，学习了一些gcc和Makefile的相关知识之后，解决了项目无法编译的问题，但在运行的时候出现segmentation fault错误</li><li>安装32位虚拟机和DiskSim</li></ol><h2 id="下周任务工作计划-30"><a href="#下周任务工作计划-30" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>争取解决DiskSim无法在64位机器上运行的问题，如果不行，就在虚拟机进行ssd拥塞控制模块的仿真</li><li>继续熟悉NVMe oF的流程</li><li>Python作业分数修改</li><li>完成KAP的Poster材料</li></ol><h1 id="20220905-20220909"><a href="#20220905-20220909" class="headerlink" title="20220905-20220909"></a>20220905-20220909</h1><h2 id="本周工作-31"><a href="#本周工作-31" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>在64位机器上安装了DiskSim,但发现没有办法运行ssd-model模块，发现主要的问题是由于ubuntu版本太高，于是重新租用了ubuntu14.04（64位）机器，成功安装disksim和ssd-model模块。</li><li>成功进行simpy的项目移植，和嘉良沟通后能够在simpy中调用ssd-model模块。</li><li>和师兄沟通后发现gimal论文中的代码逻辑和源码有区别，正在对simpy代码进行修改。</li></ol><h2 id="下周任务工作计划-31"><a href="#下周任务工作计划-31" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>进行Gimbal算法的仿真，对数据进行统计和分析</li><li>和师兄一起构思算法：结合网络拥塞控制的知识，如何在网络环境下进行credit的分配，以及如何在服务器架构下解决credit的本地和远端分配的平衡问题。</li></ol><h1 id="20220913-20220916"><a href="#20220913-20220916" class="headerlink" title="20220913-20220916"></a>20220913-20220916</h1><h2 id="本周工作-32"><a href="#本周工作-32" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>根据gimbal论文地源码修改本地Simpy代码，能够成功运行，并收集相应数据</li><li>根据数据作图，发现gimbal的算法在Simpy代码中并没有起到作用，当submission queue的长度不为零的时候拥塞控制算法不会起到作用。之后把submission queue的长度设为一，发现也没有起作用。</li><li>对Disksim的工作原理进行简单测试，发现可以同时提交多条trace，只要第一条和最后一条trace的时间差足够执行就可以了。trace越密集，平均trace的执行时间可能越久。即可以代表ssd处于拥塞状态。</li></ol><h2 id="下周任务工作计划-32"><a href="#下周任务工作计划-32" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>从Gimbal的视频中找到测量thresh_max和min的办法，对disksim进行测试</li><li>根据c++重新写gimbal的算法，并跑通收集数据和画图</li><li>思考如何把gimbal对命令进入submission queue的控制延伸到对命令进入disksim的控制</li></ol><h2 id="面对的问题"><a href="#面对的问题" class="headerlink" title="面对的问题"></a>面对的问题</h2><ol><li>Gimbal算法主要解决的是服务延迟（在ssd中的执行时间）还是排队延迟（在submission queue中的排队时间）</li><li>如何测得thresh_max和min</li><li>如果gimbal主要解决的是服务延迟，那么SubmissionQueue偶尔为空是gimbal算法起作用的必要条件</li><li>要让submission queue为空，有两种办法：submission queue可以同时提交多个io请求；精准测得thresh的最大最小值，控制请求提交到submission queue的速度，尽量是减少token的生成。</li></ol><h1 id="20220919-20220923"><a href="#20220919-20220923" class="headerlink" title="20220919-20220923"></a>20220919-20220923</h1><h2 id="本周工作-33"><a href="#本周工作-33" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>重新看Gimbal视频，thresh_min通过记录在磁盘空闲时写一个最小io_size获得。max的测量需要在磁盘最大碎片化之后，记录磁盘用单个最大io达到最大带宽之后的单个io延迟。</li><li>和邱煜佳师兄学习gimbal源码中的IO scheduler代码，了解了大概</li><li>和邱煜佳师兄设计并实现Simpy中的虚拟槽和credit，当命令到达target端后，会先到达拥塞控制模块的deffer_list,然后会触发deffer_list中命令尽可能（<code>虚拟槽有空间</code>）进入虚拟槽，再从虚拟槽经过<code>准入函数</code>进入submission queue中。但是代码现在运行到一半就停止了。</li></ol><h2 id="下周任务工作计划-33"><a href="#下周任务工作计划-33" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>调试加入虚拟槽之后的bug，进行Gimbal算法的仿真，对数据进行统计和分析</li><li>测量thresh_max</li><li>完善场景的架构，进行多种场景的测试。</li></ol><h2 id="面对的问题-1"><a href="#面对的问题-1" class="headerlink" title="面对的问题"></a>面对的问题</h2><ol><li>如何测得thresh_max（disksim中io的执行时间是认为规定的，也就是iops基本确定，那么如何判断带宽达到最高）</li><li>调试代码的bug，让程序能生成全部的trace，并在使用gimbal和不使用gimbal进行对比。如果再有问题及时与老师沟通。</li></ol><h1 id="20220926-20220930"><a href="#20220926-20220930" class="headerlink" title="20220926-20220930"></a>20220926-20220930</h1><h2 id="本周工作-34"><a href="#本周工作-34" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>系统加入虚拟槽和credit机制，能够成功跑通</li><li>对数据进行画图，目前发现比较重要的参数有：thresh_max；thresh_min；target_rate_min；SQ长度；。</li><li>对token方案进行测试，发现当target_rate_min=40K；thresh_min=1.0ms；thresh_max=4.5ms；SQ长度试10的时候token方案会起到作用。画出iops，总延迟和服务延迟的折线图，发现使用token的方案更好一点，单效果不是很明显，还在考虑怎么设置参数</li></ol><h2 id="下周任务工作计划-34"><a href="#下周任务工作计划-34" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>写gimbal算法的C++代码，把disksim加入使用。</li><li>找到合适的参数选择方式，选择合适参数，争取调试出更明显的效果：延迟更低，相同数据量的请求更早结束，iops更大。</li><li>完善场景的架构，进行多种场景的测试。</li></ol><h1 id="20221004-20221007"><a href="#20221004-20221007" class="headerlink" title="20221004-20221007"></a>20221004-20221007</h1><h2 id="本周工作-35"><a href="#本周工作-35" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>在NS3中补全了token和credit的代码，还没有测试。</p></li><li><p>测试disksim中的thresh_max和thresh_min的值分别是0.4ms和1.5ms。</p></li><li><p>对thresh_max；thresh_min；target_rate_min设置不同的值，画图比较l延迟带宽随时间的变化。并分析：</p><p>thresh_min主要影响低利用率状态，</p><p>thresh_min调小，低利用率状态减少，在io延迟较低的时候，token增速相对减少，提交的io减少。</p><p>thresh_min调大，低利用率状态增加，在io延迟较低的时候，token增速相对增加，提交的io变多。</p><p>thresh_max主要影响过载状态，</p><p>thresh_max调小，过载状态增加，在io延迟较高的时候，会较早进入过载状态，提交的io减少。</p><p>thresh_max调大，过载状态减少，在io延迟较高的时候，会较晚进入过载状态，提交的io变多。</p><p>target_rate近似代表的是ssd的预期处理速率，当ssd的负载较高时target_rate需要减小，当ssd的负载较低时target_rate需要适当增加</p><p>target_rate_min调小，ssd过载状态之后可能需要经过比较久的时间才能生成足够的token，提交的io减少。</p><p>target_rate_min调大，生成的token的数量会一直比较多，提交的io增多。</p></li><li><p>SQ长度一般是固定的。当SQ的第一个io处于过载状态的时候，因为调速算法不涉及从SQ中出队到disksim的过程，所以SQ中剩余的io也都会处于过载状态，并且ssd的负载会越来越高。</p><p><code>只有当SQ中的io命令个数是0的时候，token调速机制才会起到作用</code>想让token调速及时，那么就需要让SQ中的io数量一直不多，即进入SQ的io减少，且SSD少处于过载状态，SSD多处于拥塞状态。</p><p>可能理想状态下就是想让SQ的长度越小越好？刚好满足每次提交的命令的个数。</p></li></ol><h2 id="下周任务工作计划-35"><a href="#下周任务工作计划-35" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>调试ns3中的拥塞管理模块，跑出使用token和不使用token的对比数据。</li><li>在ns3中补全credit方案</li><li>写中期材料</li></ol><h1 id="20221017-20221021"><a href="#20221017-20221021" class="headerlink" title="20221017-20221021"></a>20221017-20221021</h1><h2 id="本周工作-36"><a href="#本周工作-36" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>测试ns3代码，发现使用内部合成负载的disksim不能随着代码的调用反映ssd的状态</li><li>disksim可以通过两种方式模拟ssd，一个是内部合成负载，一个是外部提供io命令。内部合成负载时用户提供io命令的分布函数，disksim自动根据概率生成io命令。外部提供io命令是用户给定io命令的大小，类型，执行时间等具体信息，dsiksim再去模拟。外部提供io命令有两种方式，一种是通过trace文件集合io命令，统一输入给disksim，另一种是使用stdin，用户可以在控制台输入io命令。</li><li>对stdin方式进行测试，正向解读源码，如果在用户输入完一条io后disksim就会执行这一条io，然后生成对应的延迟，就符合我们对disksim的调用需求。如果是等用户输入完所有的io命令，再统一执行，统计完成信息并输出，就可能需要修改disksim源码，因为拥塞控制算法是需要动态调整io命令提交时间的。</li><li>根据disksim的输出文件反向寻找io命令完成的具体位置，当前已经找到了存放io完成信息的链表，之后查看该链表的建立过程就应该能找到io命令的完成过程，从而进行调用。</li><li>io命令是由多个事件共同组成的，在disksim中事件会驱动时间，还需要找到disksim事件和延迟的关系。</li></ol><h2 id="下周任务工作计划-36"><a href="#下周任务工作计划-36" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>继续从io完成信息的存放链表回溯，找到该链表的建立和增加过程。</li><li>找到disksim执行io命令的方式(统一执行还是逐一执行)</li><li>将disksim嵌入ns3</li></ol><h1 id="20221024-20221028"><a href="#20221024-20221028" class="headerlink" title="20221024-20221028"></a>20221024-20221028</h1><h2 id="本周工作-37"><a href="#本周工作-37" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>找到disksim的提供的官方调用接口<code>disksim_interface.c</code>，和官方调用接口的例子<code>syssim_driver.c</code>。<br>发现例子中的问题：每次发送请求都是等上一个请求全部完成了才发送下一个请求。当上一个请求完全完成的时候，disksim又回到了空载的状态，所以每个命令之间不会互相影响，输出的延迟都一样。</p><ol><li>每来一个IO先调用<code>disksim_interface_request_arrive()</code>用于生成IO事件，并把该事件插入进event链表中。</li><li>之后在<code>arrive</code>这个函数中调用<code>disksim_simulate_event()</code>来执行event链表(<strong>内部事件按disksim时钟排序</strong>)中的第一个事件，<code>disksim_simulate_event()</code>每处理完一个事件会生成相关的下一个事件并插入进event链表中，然后循环调用，直到当前的disksim时钟时间小于event链表中第一个事件对应的时间(代表此时的仿真时间应该被推进)，退出<code>disksim_interface_request_arrive()</code>。</li><li>然后程序通过回调函数<code>syssim_schedule_callback()</code>将自己的时间设置为event链表中第一个事件的时间，之后调用<code>disksim_interface_internal_event()</code>，把自己的时间传给disksim，推动disksim内部的时钟，该函数也是通过调用<code>disksim_simulate_event()</code>来执行event链表中剩下的事件，如果遇到disksim时钟小于event链表中第一个事件对应的时间的问题，会通过之前的回调函数推动disksim的时钟。</li><li>直至上一个IO命令全部完成（即event链表中不再有事件）会通过回调函数打印出延迟，再进行下一个IO的输入，调用<code>disksim_interface_request_arrive()</code>。</li></ol></li><li><p>对例子进行修改，现在就算上一个IO命令没有完成，请求到来依旧可以调用函数<code>disksim_interface_request_arrive()</code>，通过请求到来的时间推动disksim时钟，推动事件的执行。当命令来的更频繁的时候，ssd会发生拥塞，测出的延迟结果符合预期。</p></li></ol><h2 id="当前问题"><a href="#当前问题" class="headerlink" title="当前问题"></a>当前问题</h2><ol><li><p>每有一个IO要从NVMe SQ中取出来执行，系统会调用<code>disksim_interface_request_arrive()</code>函数，这时候disksim才有可能会返回延迟给NVMe Entrance，从而调整SSD拥塞状态。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">当1<span class="hljs-string">-10</span>号IO的时间间隔比较短，就有可能造成第10号IO提交的时候第8号和第9号都没有执行完，第11号IO隔很久才来，有可能会返回8，9，10三个IO的延迟，这三个延迟应该怎么返回给NVMe Entrance。<br>11号IO提交的时候,因为返回的延迟是8，9，10号的，所以NVMe Entrance有可能会判定SSD处于拥塞状态，不过只要11号能及时返回延迟信息，就应该没什么问题。<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>-<span class="hljs-number">10</span>号IO的时间间隔比较长，每一个IO的提交都会返回上一个延迟。<span class="hljs-number">11</span>-<span class="hljs-number">15</span>号IO的时间间隔很短，有可能在<span class="hljs-number">15</span>号提交的时候，<span class="hljs-number">11</span>号的延迟还没有返回，那么此时SSD的状态应该是什么，即当没有延迟返回的时候SSD的状态是否需要发生变化。<br></code></pre></td></tr></table></figure><p><strong>token是否能解决上面的问题？</strong></p></li></ol><h2 id="下周任务工作计划-37"><a href="#下周任务工作计划-37" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>把disksim的接口放入ns3中，主要解决回调函数的问题。</li><li>测出gimbal的数据</li></ol><h1 id="20221031-20221104"><a href="#20221031-20221104" class="headerlink" title="20221031-20221104"></a>20221031-20221104</h1><h2 id="本周工作-38"><a href="#本周工作-38" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>将gimbal从ns3代码中脱离，完成了只有gimbal和disksim的架构，并对其进行测试。发现disksim一直处于过载和拥塞避免状态</li><li>对disksim的性能进行测试，发现同时提交多个命令和分开提交多个命令来说，最后一个命令的完成时间都是一样的。gimbal调整的正是命令提交的时间间隔，所以还需要对disksim继续学习。</li></ol><h2 id="下周任务工作计划-38"><a href="#下周任务工作计划-38" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>假设disksim没有问题，看gimbal是否能正确运行</li><li>继续学习并调试disksim</li></ol><h1 id="20221114-20221118"><a href="#20221114-20221118" class="headerlink" title="20221114-20221118"></a>20221114-20221118</h1><h2 id="本周工作-39"><a href="#本周工作-39" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>初步完成io调度和gimbal算法的架构图以及代码解释。</p></li><li><p>调试gimbal+disksim，现在的disksim已经能够触发垃圾回收机制，相比于以固定时间间隔提交，使用gimbal将间隔动态化之后能够达到吞吐量更高、延迟更低的效果。但是由于disksim垃圾回收机制的触发非常频繁导致延迟逐渐累计并非常大，使gimbal在后期调速起不了很大作用。</p></li><li><p>尝试先向disksim写入数据之后再启用gimbal调度算法。由于disksim能执行的命令个数总共只有四千个，并且这个个数会随着命令提交的间隔发生变化。目前在使用了gimbal之后只能对一千到两千个命令起作用，效果不是很明显，还需要继续调gimbal的参数。</p></li><li><p>协助师兄完善io调度的代码，并调试。</p><p>由于nvme-of write和nvme-of read都会先生成rdma send/receive命令进行控制通路的通信，不同的是小数据的nvme-of write会把数据随着rdma控制通路一起传输，然后生成本地的nvme write操作。nvme-of read和大数据的nvme-of write会在initiator和target端生成rdma数据通路进行数据的传输并生成本地对应的nvme命令。</p><p>每一个nvme-of命令都会占用srq中的wqe，在这个nvme-of命令对应的target端的nvme命令没有被放入submission queue之前，srq中对应的wqe一直不会被释放。</p></li></ol><h2 id="下周任务工作计划-39"><a href="#下周任务工作计划-39" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完善架构图，将架构图中的控制通路和数据通路都描绘出来</li><li>由于gimbal的参数过多，为了方便查看参数的实时变化，将gimbal中的参数变化画出来，方便确定参数。</li><li>写第二期结束的文档</li><li>协助师兄继续完善并调试io调度算法。</li></ol><h1 id="20221121-20221125"><a href="#20221121-20221125" class="headerlink" title="20221121-20221125"></a>20221121-20221125</h1><h2 id="本周工作-40"><a href="#本周工作-40" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完善nvme操作部分的架构图，并将内容更新到ns架构图中</li><li>将srq算法部分和nvme部分整合。</li><li>调试gimbal+disksim算法的参数，目前能够达到延迟更小但iops比较低的情况。还需继续调参数使效果达到最大化。</li></ol><h2 id="下周任务工作计划-40"><a href="#下周任务工作计划-40" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完善第二期文档</li><li>调试gimbal+disksim算法的参数，希望能达到iops更大，延迟更低的效果。</li></ol><h1 id="20221205-20221209"><a href="#20221205-20221209" class="headerlink" title="20221205-20221209"></a>20221205-20221209</h1><h2 id="本周工作-41"><a href="#本周工作-41" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完成项目中的收尾阶段几个图的修改</li><li>准备组会论文</li><li>协助师兄思考gimbal能够改进的地方。</li><li>简单了解MQsim，没有提供用户级的接入仿真系统的接口，并且没有办法实时返回io的延迟。应该是需要对源码进行解析，才可以在我们的场景中使用。</li></ol><h2 id="下周任务工作计划-41"><a href="#下周任务工作计划-41" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>复习课程，准备考试</li><li>重新熟悉gimbal论文和视频。看看是否有更好的办法能够实时反馈ssd的服务能力，并进行量化。</li></ol><h1 id="20221219-20221223"><a href="#20221219-20221223" class="headerlink" title="20221219-20221223"></a>20221219-20221223</h1><h2 id="本周工作-42"><a href="#本周工作-42" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>养病</p></li><li><p>和师兄对接当前的工作，Gimbal的改进方案。</p><p>调节SSD拥塞的目标是：target端能够实时获得SSD的拥塞状态，从而知道SSD此时的服务能力（容量），并把这些能力公平分给给一个host的app。</p><ul><li><p><strong>判断SSD拥塞状态</strong>：在每一个IO完成的时候，gimbal会根据该IO的延迟判断ssd的拥塞状态。用动态阈值的方法来减小因为IO大小、读写模式不同导致的误差，从而更准确地判断此时ssd的拥塞状态。</p></li><li><p><strong>量化SSD服务能力</strong>：在每次SSD拥塞状态判断结束之后，gimbal会根据SSD此时的拥塞状态调整<code>TargetRate</code>。<code>TargetRate</code>是SSD服务能力的一个量化，每当有一个IO想要提交给SSD的时候，都会线用此时的<code>TargetRate</code>计算出令牌数目，并根据令牌桶中的令牌数目（是SSD剩余服务容量的量化）来确定是否能将此IO命令提交到Submission Queue。</p></li><li><p><strong>公平分配</strong>：通过虚拟槽实现</p></li></ul></li><li><p>当前的问题是：SSD具有并行处理IO命令的特性，也就是说存在在某一时刻SSD内部包含多个IO命令的情况。由于<code>TargetRate</code>只是在每个IO完成之后进行更新，所以在有IO提交的时候更新的服务容量并不是实时的。会导致一定的问题。</p><p>​        比如，现在有5个IO命令进入了SSD，1、2、3号命令不会导致SSD拥塞，4、5号命令会导致SSD拥塞。当SSD完成1、2、3命令之后，gimbal按照SSD处于非拥塞状态调大了<code>TargetRate</code>，认为此时SSD有较高的服务能力。但是4、5命令还没有完成，此时SSD处于拥塞状态，但由于没有命令完成gimbal无法实时感知SSD拥塞的状态。所以再有6、7、8号命令想要进入SSD的时候，gimbal按照较高的TargetRate生成了较大的Token（gimbal认为SSD的剩余服务容量还很多），这样就会加剧SSD的拥塞。</p><p><u><strong>所以gimbal应该将SSD内部正在执行但并未完成的IO考虑进来，作为判定SSD服务能力的条件。</strong></u></p></li></ol><h2 id="下周任务工作计划-42"><a href="#下周任务工作计划-42" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>周一离校返乡</li><li>协助师兄完善gimbal的改进方案。</li></ol><h1 id="20221226-20221230"><a href="#20221226-20221230" class="headerlink" title="20221226-20221230"></a>20221226-20221230</h1><h2 id="本周工作-43"><a href="#本周工作-43" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>准备高性能计算考试</li><li>在代码中实现了CMB的工作模式，可以定义每个SSD的CMB的大小。如果client端发起的是不带数据的nvme over fabric write命令，在host端向client端发起rdma read之前会先判断CMB内的空间是否足够存储相应的data，在rdma read结束之后，host会生成本地的nvme write操作把CMB中的数据存储到SSD中。</li><li>在代码中实现了io命令的切割。即大io会被分成多个小io执行。如果client端发起的是不带数据的nvme over fabric write命令，在host端执行完rdma read即该命令对应的所有数据已经存储到了host之后，host会生成多个nvme write命令(小io)，分批把数据写入到SSD中。当所有小io都完成之后，host会向client发起一个nvme over fabric write命令完成的消息。</li></ol><h2 id="下周任务工作计划-43"><a href="#下周任务工作计划-43" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>完成多对一场景</li><li>分别思考DDR场景和CMB场景下有可能出现的问题，完善ppt和问题</li><li>人工智能、算法、论文写作课的期末论文作业</li></ol><h1 id="20230103-20230106"><a href="#20230103-20230106" class="headerlink" title="20230103-20230106"></a>20230103-20230106</h1><h2 id="本周工作-44"><a href="#本周工作-44" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>实现多个client端对应一个SSD的代码</p><p>在2T1，命令全是nvme-of write的场景中复现了因为CMB空间有限而导致的大IO阻塞小IO的问题。对比两个client都发小IO的情况，两个client分别发大IO和小IO的情况中小IO从nvme-of write转换成rdma read的排队时间更长。</p></li><li><p>在跑CMB场景中，发现了有的时候命令跑不完的原因。</p><p>因为CMB有限，只有当CMB空间足够的时候才会提交命令，然后disksim需要提交命令才可以推动命令完成，命令完成后才会释放CMB中的空间。但是在disksim中未完成的命令大小等于CMB的有限空间的时候，就导致不会有新的命令被提交，然后没有命令提交也就没有命令完成，没有命令完成也就不会释放CMB中的空间给其他命令。因此CMB的使用需要和SSD拥塞控制相配合，让SSD拥塞控制模块控制命令提交进disksim的速率。</p></li><li><p>协助师兄整合CMB中出现的问题，和IO调度相关，主要有两个：由于CMB空间有限导致的大IO阻塞小IO的问题；以及由于SSD的服务速率变化引起的大IO阻塞小IO的问题。</p></li></ol><h2 id="下周任务工作计划-44"><a href="#下周任务工作计划-44" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>针对CMB场景中的问题想一下解决方案。并在代码中进行初步实现，跑一点数据。</li><li>周二有驾照考试，周一模拟。</li><li>完成人工智能、论文写作课的期末论文作业</li></ol><h1 id="2022下半年学期总结"><a href="#2022下半年学期总结" class="headerlink" title="2022下半年学期总结"></a>2022下半年学期总结</h1><h2 id="个人总体工作情况"><a href="#个人总体工作情况" class="headerlink" title="个人总体工作情况"></a>个人总体工作情况</h2><ol><li>对Gimbal有了比较清楚的理解。</li><li>参与华为项目，复现Gimbal、SSD拥塞控制部分。</li></ol><h2 id="个人后续工作目标"><a href="#个人后续工作目标" class="headerlink" title="个人后续工作目标"></a>个人后续工作目标</h2><ol><li>寒假目标：明确华为项目中CMB架构中出现的问题，并通过图像和数据体现问题。</li><li>短期目标：完成华为项目，和师兄一起完成CMB的解决方案。</li><li>长期目标：下学期找到自己研究生的一个研究点，有一个大概的研究方向和问题</li></ol><h2 id="收获、问题和建议"><a href="#收获、问题和建议" class="headerlink" title="收获、问题和建议"></a>收获、问题和建议</h2><ol><li>更多的是和师兄讨论不是特别善于和老师交流，更偏向于写代码的工作。</li><li>每次开会总是听一听，不善于做总结和计划。</li><li>和师兄师弟的磨合还不够，有时工作分工不合理，效率偏低。</li><li>缺少科研主动性，有事需要老师和师兄推动。(python平台)</li><li>科研逻辑性相较于之前好了一些，现在知道先去定义问题。</li><li>建议代码量多、多个人合作的工作可以使用github</li></ol><h1 id="20230206-20230210"><a href="#20230206-20230210" class="headerlink" title="20230206-20230210"></a>20230206-20230210</h1><h2 id="本周工作-45"><a href="#本周工作-45" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>为了反映在大小IO混合情况下CMB有限导致的问题，设置统计指标：每个client对CMB的占用情况，每个client的吞吐量变化情况，每个IO的生命周期，target的吞吐量变化。</p></li><li><p>设计流量和实验场景。首先是在混合流量场景下两个client(分别发送不同种类的IO)进行CMB占用和吞吐量变化的对比。其次是将混合流量场景和单一流量场景进行对比。并且保证发送速率相同。</p></li><li><p>讨论在CMB有限，client发送IO大小存在差异的情况下的问题</p><ol><li>公平性：如果IO到达target端之后，是按照先进先出的顺序占用CMB然后按照先进先出的顺序提交到ssd，那么ssd的服务带宽分配应该会和发送端的发送速率保持一致，就不存在公平性问题。</li><li>SSD利用率：因为CMB有限，所以会存在情况导致CMB的剩余空间可以存放小IO但不可以存放大IO，但是只要CMB不为空，SSD就会一直处于运转状态，就不存在SSD利用率降低的情况。</li><li>头阻问题：当CMB空间不足的时候，先来的大IO会阻塞住后来的小IO，小IO需要等大IO提交到CMB之后才可以进行提交。由此就会导致小IO的等待时间变长，生命周期变长。</li></ol></li></ol><h2 id="下周任务工作计划-45"><a href="#下周任务工作计划-45" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>回顾华为讨论内容，找到华为在CMB场景中需要解决的问题。</li><li>将disksim的部分转化为函数，让IO命令能够主动完成，避免命令跑不完的问题</li></ol><h1 id="20230213-20230217"><a href="#20230213-20230217" class="headerlink" title="20230213-20230217"></a>20230213-20230217</h1><h2 id="本周工作-46"><a href="#本周工作-46" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>重新思考CMB有限带来的问题，目前分为了两类：公平性(还没有定义清楚)和大IO阻塞小IO的问题。</p></li><li><p>统计代码中每个参数的物理意义和效果：</p><ol><li><ol><li><p>submitIO的间隔：每一个IO占用CMB之后，都是通过SubmitIO函数提交到disksim，如果该函数的时间间隔变长：</p></li><li><ol><li>能够防止disksim堵塞的问题。</li><li>CMB会被占用，IO更容易在RDMA CQ中等待，即容易出现大IO阻塞小IO的现象</li><li>更有利于大IO模式的服务。即容易出现混合IO场景的吞吐量大于单小IO场景的吞吐量</li></ol></li><li><p>发送速率：</p></li><li><ol><li>发送速率调大有助于IO在RDMA CQ中等待</li></ol></li><li><p>CMB大小：</p></li><li><ol><li>CMB调小容易造成disksim堵塞</li><li>CMB调大的话IO不容易在RDMA CQ中阻塞</li></ol></li><li><p>triggerRDMA的间隔：当target收到了rdma send命令之后，生成rdma cqe，之后通过triggerRDMA函数占用CMB，生成rdma RD/WR操作。</p></li><li><ol><li>该间隔调大有助于IO在RDMA CQ中等待</li></ol></li></ol></li></ol></li><li><p>根据问题设计场景，目前已经跑出来了大IO阻塞小IO的问题。通过使发送端速度不同跑出来了混合IO场景低于单小IO场景吞吐率的问题。</p></li><li><p>准备跑CMB有限和CMB无限的对比试验，以证明大IO阻塞小IO会导致host吞吐率下降，但目前还没有效果。</p></li></ol><h2 id="下周任务工作计划-46"><a href="#下周任务工作计划-46" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>准备应用统计考试</li><li>重新定义公平性，看在CMB有限的情况下是否还存在各个client的公平性问题。</li><li>重新思考每个参数的含义，跑CMB有限和CMB无限的对比试验。</li></ol><h1 id="20230220-20230224"><a href="#20230220-20230224" class="headerlink" title="20230220-20230224"></a>20230220-20230224</h1><h2 id="本周工作-47"><a href="#本周工作-47" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>准备应用统计的考试。</p></li><li><p>定义大IO阻塞小IO之后出现的SSD服务速率下降的问题。用函数代替disksim的服务时间。实现问题的复现。</p></li><li><p>定义大IO阻塞小IO之后出现的小IO等待时间变长的问题。之前的是对比了相同发送速率但是IO大小不同，实验变量控制不够严谨，需重新构思场景。</p></li><li><p>思考还是否存在公平性问题。</p></li></ol><h2 id="下周任务工作计划-47"><a href="#下周任务工作计划-47" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>把MQSim结合Gimbal，验证gimbal的准确性。</li><li>结合MQSim之后跑一下几个问题</li></ol><h1 id="20230227-20230303"><a href="#20230227-20230303" class="headerlink" title="20230227-20230303"></a>20230227-20230303</h1><h2 id="本周工作-48"><a href="#本周工作-48" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>和陈嘉良一起解决MQSim的运行问题，同时完成回调函数的部分</p></li><li><p>python论文修改格式的工作</p></li><li><p>总结python系统接下来需要解决的问题。整理之前的代码和数据库</p></li></ol><h2 id="下周任务工作计划-48"><a href="#下周任务工作计划-48" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>把MQSim结合Gimbal，验证gimbal的准确性。</li><li>python平台在14号机和阿里云都跑一下，看看哪种方案好一点</li><li>整理python平台当前的整体情况和遇到的问题(主要从开发的角度)</li></ol><h1 id="20230306-20230310"><a href="#20230306-20230310" class="headerlink" title="20230306-20230310"></a>20230306-20230310</h1><h2 id="本周工作-49"><a href="#本周工作-49" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>python平台导入这个学期的学生信息，更新python平台到云服务器和实验室的机器</p></li><li><p>把MQSim结合Gimbal，验证gimbal的准确性。发现在数据较多的时候仍没有效果。</p></li><li><p>探索当前MQSim盘的特征：</p><ol><li>同等大小的写IO的延迟要比读IO的延迟低：因为写操作有可能是随机的但是读操作通常是连续的。NVMe SSD通常也有一些高效的缓存技术</li><li>读IO的延迟基本不会随着IO提交时间间隔的变化而变化</li><li>读IO要比写IO的IOPS更高</li><li>在执行写IO命令的时候，500个大小是128KB的IO比5000个大小是128KB的IO更容易体现出<strong>IO提交间隔适当拉大，ssd的吞吐量更高</strong>的特征</li></ol></li></ol><h2 id="下周任务工作计划-49"><a href="#下周任务工作计划-49" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>优化python作业平台，题目提交和成绩计算的代码</li><li>整理ns3项目跑程序的脚本</li><li>调试MQSim+gimbal的效果</li></ol><h1 id="20230313-20230317"><a href="#20230313-20230317" class="headerlink" title="20230313-20230317"></a>20230313-20230317</h1><h2 id="本周工作-50"><a href="#本周工作-50" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>修改python平台代码，导入python第一次作业。和杨嘉睿师弟讨论平台后续发展。</p></li><li><p>完善在mqsim场景下Gimbal的两个问题。</p></li><li><p>整理ns3项目的脚本，目前gimbal的相关参数已经能用脚本实现更改，还差srq的。</p></li></ol><h2 id="下周任务工作计划-50"><a href="#下周任务工作计划-50" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>优化python作业平台，布置第二次作业</li><li>继续整理ns3项目跑程序的脚本</li><li>调试MQSim+gimbal的效果</li></ol><h1 id="20230320-20230324"><a href="#20230320-20230324" class="headerlink" title="20230320-20230324"></a>20230320-20230324</h1><h2 id="本周工作-51"><a href="#本周工作-51" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>优化Python平台，布置第二次作业</li><li>整理华为项目修改参数的脚本，目前已经实现一对一场景内的参数整体修改了。准备和田荘师兄沟通一下接入多对一和可指定地址的项目中。</li><li>调试MQSim+Gimbal场景，跑出来了吞吐量差不多，延迟下降的效果。感觉应该增加盘的理解，当SSD由于拥塞导致吞吐量下降的时候，gimbal能够起到更好的作用。</li></ol><h2 id="下周任务工作计划-51"><a href="#下周任务工作计划-51" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>测试MQSim，找到如何设定盘的大小，什么参数会影响盘的吞吐量，以及如何触发盘的垃圾清理机制</li><li>和田荘师兄沟通，完善脚本</li><li>调试MQSim+gimbal的效果</li></ol><h1 id="20230327-20230331"><a href="#20230327-20230331" class="headerlink" title="20230327-20230331"></a>20230327-20230331</h1><h2 id="本周工作-52"><a href="#本周工作-52" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>测试MQSim中影响盘大小的参数，并测量他们对盘吞吐量的影响</li><li>和田荘师兄沟通，将指定地址的代码合并，完成可调节所有参数的脚本</li><li>初步调试出来了Gimbal的效果，目前还存在的问题就是每一个IO延迟较高，SSD的吞吐量整体较低。</li></ol><h2 id="下周任务工作计划-52"><a href="#下周任务工作计划-52" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>找到合适的MQSim配置，使ssd出现拥塞状态的时候，吞吐量是从最高逐渐降低。延迟处于比较低的状态，能够被gimbal调节。</li></ol><h1 id="20230410-20230415"><a href="#20230410-20230415" class="headerlink" title="20230410-20230415"></a>20230410-20230415</h1><h2 id="本周工作-53"><a href="#本周工作-53" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>修改当前ns3中MQSim使用的代码，将事件的注册放到了上一个I/O提交之后。和MQSim本身中具体的区别就在于BREAK的地方</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\source_posts\images\周报汇总\image-20230417000658497.png" alt="image-20230417000658497"></p></li><li><p>控制住MQsim中waiting queue中的I/O个数，五万条I/O能够跑两万多个，触发了400多次GC。相比于之前的一万条命令跑九千多个之后触发10次GC效果较好。</p><ul><li><p>提出假设：在触发GC的时候如果waiting queue和SQ中有较多的I/O，容易使I/O命令不被执行完</p></li><li><p>解决方案：如果使用Gimbal控制住提交到waiting queue中的I/O个数，应该可以同时实现完成所有I/O并且提升SSD吞吐量的效果。但是不使用Gimbal的场景只能在MQsim的原程序中实现。</p></li></ul></li><li><p>发现MQsim可以不依靠外部的I/O输入来推动自己的时钟进行。如果Waiting queue只是MQsim中存放数据的一个队列，其中I/O的个数不会影响SSD的性能，那么可以限制Waiting queue的数量为一，并且通过MQSim中自己推动时钟的机制保证程序不会死锁。</p></li></ol><h2 id="下周任务工作计划-53"><a href="#下周任务工作计划-53" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><p>解决当前问题的思路：</p><ol><li>使用Gimbal的ns3程序和不使用Gimbal的MQsim进行对比。应该可以出现使用Gimbal之后吞吐量提升，延迟下降的效果。</li><li>不使用MQSim中的Waiting Queue，依旧使用现在的架构，在ns3调用Start_Simulation的时候判断SQ的长度，如果满了则不提交。在MQSim完成I/O之后需要对比MQsim的时钟和ns3的时钟，具体思路还需完善。</li><li>不使用MQSim中的Waiting Queue，不使用现在的架构，通过MQSim的事件注册机制，MQsim的时间都是通过事件的注册推动的，在每次事件注册的时候实现和ns3的时钟同步，具体思路还需完善。</li></ol><h1 id="20230504-20230506"><a href="#20230504-20230506" class="headerlink" title="20230504-20230506"></a>20230504-20230506</h1><h2 id="本周工作-54"><a href="#本周工作-54" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>协助师兄做ppt。</li></ol><h2 id="下周任务工作计划-54"><a href="#下周任务工作计划-54" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>在ppt中完善对gimbal算法的描述，用公式表达出来。方便对问题进行定义</li><li>在ppt中线画模拟图，设想对ssd特性探索的结果</li><li>用MQSim仿真，体现SSD特性</li><li>把gimbal和MQSIM结合</li></ol><h1 id="20230522-20230526"><a href="#20230522-20230526" class="headerlink" title="20230522-20230526"></a>20230522-20230526</h1><h2 id="本周工作-55"><a href="#本周工作-55" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>将gimbal算法加入进MQSim中。</p></li><li><p>准备组会论文《<strong>NVMeVirt: A Versatile Software-defined Virtual NVMe Device</strong>》</p></li><li><p>整理PPT大概内容：</p><ol><li><p>Background and Related Work</p><p>先写NVMe协议的具体内容、命令执行的流程。再介绍NVMe SSD、它的特点、触发GC的条件、GC的流程。最后介绍Gimbal，Gimbal论文的目标是什么、Gimbal的架构、对Gimbal论文进行总结优点和可能存在的缺点。</p></li><li><p>Motivation</p><p>先介绍SSD的特性：SSD的状态和负载会影响每个I/O的延迟和SSD的带宽，通过图表示。然后通过画图介绍Gimbal的效果，发现Gimbal仍然有需要提升的空间。再通过对Gimbal变量target_rate和token的变化追踪发现target_rate出现了问题。结合NVMe协议理论分析Gimbal有可能在哪几个地方出现了问题。然后通过画图追踪NVMe协议中SQ内IO个数的变化过程，发现可能是SQ导致的迟滞问题。最后通过控制SQ长度＋Gimbal证明SQ的长度确实会导致迟滞问题。</p></li><li><p>Design</p><p>先介绍Basic Idea，对整个架构继续宁画图介绍。然后介绍算法细节，如何控制outstanding I/O。</p></li><li><p>Evaluation</p><p>首先介绍实验环境，再介绍延迟的提升，再介绍带宽的提升</p></li><li><p>Conclusion</p></li></ol></li></ol><h2 id="下周任务工作计划-55"><a href="#下周任务工作计划-55" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>准备组会</li><li>细节PPT内容，开始做实验</li></ol><h1 id="20230529-20230602"><a href="#20230529-20230602" class="headerlink" title="20230529-20230602"></a>20230529-20230602</h1><h2 id="本周工作-56"><a href="#本周工作-56" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>准备组会论文《<strong>NVMeVirt: A Versatile Software-defined Virtual NVMe Device</strong>》</p></li><li><p>整理PPT motivation中描述TargetRate滞后问题的实验</p><p>在之后延迟上升之后，targetRate也降到了cpl_rate，但是由于SQ中本身有I/O，所以存在滞后性。</p></li></ol><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\source_posts\images\周报汇总\image-20230604235608459.png" alt="image-20230604235608459"></p><h2 id="下周任务工作计划-56"><a href="#下周任务工作计划-56" class="headerlink" title="下周任务工作计划"></a>下周任务工作计划</h2><ol><li>准备组会</li><li>继续做实验。</li></ol><h1 id="20230703-20230707"><a href="#20230703-20230707" class="headerlink" title="20230703-20230707"></a>20230703-20230707</h1><h2 id="本周工作-57"><a href="#本周工作-57" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>准备教学大纲</p></li><li><p>分析读写混合场景。</p></li></ol><h2 id="工作进度"><a href="#工作进度" class="headerlink" title="工作进度"></a>工作进度</h2><p>目前发现的两个问题分别是减速滞后和加速慢。且都是在没有垃圾回收的情况下。</p><h3 id="减速滞后"><a href="#减速滞后" class="headerlink" title="减速滞后"></a>减速滞后</h3><p><img src="../images/%E5%91%A8%E6%8A%A5%E6%B1%87%E6%80%BB/image-20230709150109380.png" alt="image-20230709150109380"></p><ul><li>现象：当从大IO转变为小IO的时候，SSD的吞吐量下降了但是TargetRate并没有下降。outstandingIO增加</li><li>影响：加深SSD的拥塞，导致之后IO的延迟上升。</li><li>原因：更新cpl_rate的阈值很高，小IO没有办法很快累积到这个阈值的值。所以即使SSD处于了过载状态TargetRate的值依旧很大。<strong>这个现象只存在于大IO转变为小IO的情况</strong></li><li>解决思路：<ol><li>将cpl_rate更新的阈值调小</li><li>更改cpl_rate的更新方式，采用更精准和更灵活的cpl_rate更新方式</li></ol></li></ul><h3 id="加速慢"><a href="#加速慢" class="headerlink" title="加速慢"></a>加速慢</h3><p><img src="../images/%E5%91%A8%E6%8A%A5%E6%B1%87%E6%80%BB/image-20230709152945674.png" alt="image-20230709152945674"></p><ul><li>现象：当注入流的速率从小变大的时候，TargetRate增速很慢，SSD的吞吐量也就很慢。</li><li>影响：SSD会丢吞吐率。</li><li>原因：当IO的延迟高于thresh_min，小于thresh_cur的时候，SSD会被gimbal识别为拥塞避免状态，TargetRate增加一个IO大小。加速太慢。<ul><li>低利用率状态识别的不合理(thresh_min设置的不合理)：thresh_min按论文指导设置为单个4KB读IO的延迟。但是通过降低每个IO之间的间隔增加发送速率，当SSD吞吐量最大，每个IO延迟最低的时候，不同大小的IO会有不同的延迟。所以如果按照指导值就会有即使没有被识别为低利用率状态但是SSD的吞吐量还是很低的情况。</li><li>拥塞避免状态TargetRate增速过慢。每次TargetRate增加一个IOSize，这个值太小了。</li></ul></li><li>解决思路：<ul><li>优化状态识别的算法</li><li>优化TargetRate的增速算法</li></ul></li></ul><h1 id="20230710-20230714"><a href="#20230710-20230714" class="headerlink" title="20230710-20230714"></a>20230710-20230714</h1><h2 id="本周工作-58"><a href="#本周工作-58" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>Python考试判卷</li><li>补充论文background中和gimbal相关的部分</li><li>和师兄讨论初步的方案</li><li>发现在读写转换的场景中target_rate的滞后调节不是很明显</li></ol><h2 id="下周工作计划"><a href="#下周工作计划" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>继续写论文</li><li>完善方案，补充实验</li></ol><h1 id="20230904-20230908"><a href="#20230904-20230908" class="headerlink" title="20230904-20230908"></a>20230904-20230908</h1><h2 id="本周工作-59"><a href="#本周工作-59" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>Python考试B卷</li><li>更新完PSCC论文第4章设计部分。论文剩下第五章实验结果分析和参考文献。</li><li>整理Understanding Host Interconnect Congestion论文细节。文章主要研究的是：从NIC到CPU/DRAM的速率小于网络端到NIC的速率。导致了NIC中缓冲区被填满，出现丢包和包延迟增大的问题。</li></ol><h2 id="下周工作计划-1"><a href="#下周工作计划-1" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>完成PSCC论文参考文献部分，协助师兄修改论文。</li><li>整理RS的PPT和论文。找到一个能尽快上手的地方。</li><li>整理完Understanding Host Interconnect Congestion论文细节</li></ol><h1 id="20230918-20230922"><a href="#20230918-20230922" class="headerlink" title="20230918-20230922"></a>20230918-20230922</h1><h2 id="本周工作-60"><a href="#本周工作-60" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>读<strong>Towards User-Defined SLA in Cloud Flash Storage</strong>这篇文章</li><li>读RS的研究生毕业论文</li><li>调查分布式数据库相关内容。</li></ol><h2 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h2><p>整理当前的三个方向(一个是RS，两个是舒然老师提到的)</p><ol><li><p>RS方向</p><p>RS主要由两部分组成：分布式调节 <em>TOS</em> 模块，接收端驱动发送机制。</p><p>TOS可以看作是每个服务器的服务阈值，由于服务器性能不断变化，所以TOS值需要设置为动态的。</p><p>通过服务器端返回的TOS和OSK比较大小来判断是否将键值操作调度给服务器。注意：<strong>这对于客户端来说是一个被动的过程</strong>。如果该服务器还能服务，就在客户端的公共队列中寻找对应的键值操作调度给服务器。所以这相当于是基于接收端服务器键值响应的调度。</p><ul><li>高并发突发流场景下，如果客户端时主动地选择服务器，热点服务器的操作会被集中调度给下一个服务器，所以热点转移了，并没有被解决。而RS中客户端是根据服务器的反馈信息被动发送键值操作，能解决这个问题。</li></ul><p>ceph的github里面有结合nvme-of使用的版本。</p><p>如果要用cassandra，还需要自己配置和修改cassandra的代码，实现nvme-of的效果。</p></li><li><p>SLA方向</p><p>本文提供了Regulator，用户自定义SLA，云开发商据此提供服务。Regulator将SLA转换为了SLA曲线(能反映吞吐量和延迟的需求)。并将不同用户的SLA曲线组合，提高flash利用率，同时保证用户的SLA。</p></li><li><p>流混合方向</p><p>不同类型的I/O流混合能不能达到更好的效果。比如说400MBps的带宽，如何分给不同类型的I/O(随机/顺序 读/写)能够达到更好地效果(加起来的带宽超过400MBps)。</p></li></ol><h2 id="下周工作计划-2"><a href="#下周工作计划-2" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>重新思考RS的问题定义</li><li>再理解SLA这篇文章</li></ol><h1 id="20231009-20231013"><a href="#20231009-20231013" class="headerlink" title="20231009-20231013"></a>20231009-20231013</h1><h2 id="本周工作-61"><a href="#本周工作-61" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>调研分布式存储工作，目前的优化大多数都是数据存储的优化，关于数据读取的副本选择优化不多</li><li>调研ceph工作<ol><li>ceph能够通过Crimson结合SPDK实现NVMe-oF的开发</li><li>ceph目前的读操作都是从主OSD进行的，当前开发了Read balance确保每个设备获得公平的主 OSD 份额</li><li>ceph的每个服务器使用BlueStore作为存储后端，通过RocksDB管理元数据</li></ol></li></ol><h2 id="下周工作计划-3"><a href="#下周工作计划-3" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>确定可以着手的题目<ol><li>在分布式存储系统(ceph等)中结合nvme-oF做副本选择算法(还需要调研分布式存储系统如何结合副本进行读操作的，是否和键值存储中一样，可能需要看ceph源码)</li><li>在分布式存储系统中是否存在多个客户端的公平性问题。如果结合了nvme-oF，那么nvme-oF中的公平性问题和分布式存储系统中的公平i性问题是否是同一个</li></ol></li></ol><h1 id="20231016-20231020"><a href="#20231016-20231020" class="headerlink" title="20231016-20231020"></a>20231016-20231020</h1><h2 id="本周工作-62"><a href="#本周工作-62" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>调研分布式存储和分布式键值存储工作，当前的问题有</p><ol><li>分布式存储系统(例如ceph)集成了nvme-oF的操作，但做的都是系统相关的写同步和存储分配的问题。做读操作副本选择的问题较少。<strong>预测源码应该没有对读操作进行解耦，实现副本选择算法实际操作可能会比较困难</strong></li><li>分布式键值存储数据库(Cassandra)有对副本选择算法的集成，但是并没有结合nvme-oF。</li></ol></li><li><p>LEED论文是一个分布式键值存储数据库，基于SPDK实现，集成了nvme-oF操作。主要解决的是SmartNIC的特性问题，还没有仔细看是否涉及副本选择算法。</p></li><li><p>调研nvme SSD的公平性问题</p><ol><li>部分论文是对Linux内核中的I/O调度器进行优化</li><li>部分论文是优化的块设备驱动</li></ol></li></ol><h2 id="下周工作计划-4"><a href="#下周工作计划-4" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>总结NVMe SSD的公平性问题，总结Linux文件系统的框架和分布式框架以及nvme-oF框架，每个论文的方法都是如何部署的，部署在哪一层。</li><li>读LEED论文</li></ol><h1 id="20231023-20231027"><a href="#20231023-20231027" class="headerlink" title="20231023-20231027"></a>20231023-20231027</h1><h2 id="本周工作-63"><a href="#本周工作-63" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>调研nvme SSD的公平性问题，主要有三个</p><ol><li>读写公平。写操作延迟高，会影响读操作</li><li>租户之间的公平。根据租户的权重分配带宽</li><li>垃圾回收的公平。垃圾回收发生的时候，如何在租户之间分配SSD性能</li></ol></li><li><p>调研SSD方法部署</p><ol><li>Linux内核的I/O调度器中</li><li>主机端的存储设备驱动中</li><li>用户端的软件设计</li></ol></li><li><p>初步熟悉Linux内核存储架构</p></li></ol><h2 id="下周工作计划-5"><a href="#下周工作计划-5" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>总结公平性文章。当前的公平性问题大多是只是涉及到一台机器的场景。</li><li>找到可以入手的公平性问题。感觉当前结合nvme-oF的设计很少，</li></ol><h1 id="20231030-20231103"><a href="#20231030-20231103" class="headerlink" title="20231030-20231103"></a>20231030-20231103</h1><h2 id="本周工作-64"><a href="#本周工作-64" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>调研公平性问题并汇报</li></ol><h2 id="下周工作计划-6"><a href="#下周工作计划-6" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>总结R2B，LPNS，和SLA三篇租户隔离，提供用户性能保障的文章</li><li>调研目前研究关于多租户性能保障的研究：IOPS保障，延迟保障</li></ol><h1 id="20231106-20231110"><a href="#20231106-20231110" class="headerlink" title="20231106-20231110"></a>20231106-20231110</h1><h2 id="本周工作-65"><a href="#本周工作-65" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>调研性能保障的四篇文章：LPNS、R2B、UserSLA、Justitia</p></li><li><p>对如何提供租户的性能保障有初步了解</p><ol><li>根据租户不同的需求定义SLA</li><li>根据不同需求的SLA定义I/O类型</li><li>对不同类型的I/O提供性能保障</li></ol></li><li><p>当前初步想法</p><ol><li>根据用户不同的延迟SLA需求提供不同优先级的I/O</li><li>基于spdk访问SSD的路径，在用户层进行I/O优先级调度。</li></ol></li></ol><h2 id="下周工作计划-7"><a href="#下周工作计划-7" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>调研Aequitas这篇文章，其中关于优先级升降的方法或许能借鉴</li><li>总结每篇文章是如何定义SLA的，用户需要输入的参数是什么，文章是如何对不同需求的I/O进行分类的</li><li>完善ppt，介绍每篇文章，形成可汇报内容</li></ol><h1 id="20231113-20231117"><a href="#20231113-20231117" class="headerlink" title="20231113-20231117"></a>20231113-20231117</h1><h2 id="本周工作-66"><a href="#本周工作-66" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p><strong>当前的motivation</strong>：由于当前云提供商分配SSD方式的限制，往往会根据用户的SLA过多配置SSD资源，造成资源的浪费。当前在一个SSD上进行租户隔离的方法只涉及一个方面的SLA（延迟或者带宽），如何在用户即提出延迟SLA和吞吐量SLA的时候继续宁性能隔离。</p></li><li><p><strong>用到的方法</strong>：</p><ol><li>结合租户的带宽SLA和延迟SLA，**<u>初步</u>**判断该租户能否与其他租户一起共享SSD</li><li>共享SSD之后，使用探测的方式或者直接服务，来判断该SSD是否能服务所有的租户。</li><li>根据不同用户的SLA设置优先级，使用调度算法，实现租户隔离，并根据租户移除算法(可能方案：当一个租户经常处于某种特定优先级的时候，就证明SSD服务能力不足了)，选择合适的租户移动到别的SSD，或者扩大该SSD容量</li></ol></li><li><p>目前还存在的问题</p><ol><li>租户是如何定义带宽SLA和延迟SLA的</li><li>如何初步判断该租户能够共享SSD</li><li>是否要区分读写操作的不同以及是否结合SSD中写操作很容易影响读操作的特性</li><li>如何结合SSD垃圾回收的性能</li></ol></li></ol><h2 id="下周工作计划-8"><a href="#下周工作计划-8" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>准备组会</li><li>准备开题ppt</li></ol><h1 id="20231127-20231201"><a href="#20231127-20231201" class="headerlink" title="20231127-20231201"></a>20231127-20231201</h1><h2 id="本周工作-67"><a href="#本周工作-67" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>看D2FQ和Aequitas论文方法</p><ol><li><p>D2FQ是一种利用NVMe加权轮询(WRR)仲裁的公平排队I/O调度程序。</p><p>用虚拟时间来调整每个租户的优先级，更偏重租户之间的加权公平</p></li><li><p>Aequitas一个发送方驱动的准入控制方案，通过新的QoS降级机制并使用WFQ来保证rpc级别的网络延迟slo</p><p>在RPC级别利用租户的延迟反馈信息，根据租户的SLO进行动态优先级调度</p></li></ol></li><li><p>整理ppt中的问题定义部分</p><ol><li>用数学符号表示问题</li><li>重新画架构图，完善输入输出</li></ol></li></ol><h2 id="下周工作计划-9"><a href="#下周工作计划-9" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>继续完善ppt</li><li>思考问题定义中还有哪些挑战</li><li>思考我们的优先级调度方法能否结合D2FQ或者Aequitas的思想</li></ol><h1 id="20231204-20231208"><a href="#20231204-20231208" class="headerlink" title="20231204-20231208"></a>20231204-20231208</h1><h2 id="本周工作-68"><a href="#本周工作-68" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>整理开题PPT</p><ol><li>大概整理框架，构思了初步的方案和设计</li><li>目前还差代码的具体框架</li></ol></li><li><p>12月19日早晨8:30在信息楼416 集中开题答辩</p><ol><li>排序第三，开题组长鲁鸣鸣老师，副组长覃立波老师和郁松老师</li></ol></li><li><p>12月15日之前在系统提交开题报告</p></li></ol><h2 id="下周工作计划-10"><a href="#下周工作计划-10" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>完善ppt中的代码架构</li><li>看看网络演算的部分能不能利用</li><li>写开题报告</li></ol><h1 id="20231211-20231215"><a href="#20231211-20231215" class="headerlink" title="20231211-20231215"></a>20231211-20231215</h1><h2 id="本周工作-69"><a href="#本周工作-69" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>完成开题PPT<ol><li>完善性能保障的方案，将延迟和带宽分开处理。</li></ol></li><li>完成开题报告</li></ol><h2 id="下周工作计划-11"><a href="#下周工作计划-11" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>开题汇报</li><li>完善资源分配中如何选择合适的租户进行资源再分配的方案</li><li>开始实验</li></ol><h1 id="20231218-20231222"><a href="#20231218-20231222" class="headerlink" title="20231218-20231222"></a>20231218-20231222</h1><h2 id="本周工作-70"><a href="#本周工作-70" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>开题答辩</li><li>完成开题报告</li><li>主要思考性能保障的思路<ol><li>同时满足带宽SLO和延迟SLO：先满足延迟SLO，再逐渐满足带宽SLO</li><li>通过判断在一段时间内的延迟SLO和带宽SLO的满足情况来对租户的存储资源进行粗粒度的反馈调节。</li><li>通过集中减少一个租户的存储资源(不满足SLO)来满足更多租户的SLO</li></ol></li></ol><h2 id="下周工作计划-12"><a href="#下周工作计划-12" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>开始实验或者仿真(但是MQSim又不能真正的模拟盘的性能)，在实验中验证方案。</li><li>思考如何选择合适的租户减少他的存储资源</li></ol><h1 id="20231225-20231229"><a href="#20231225-20231229" class="headerlink" title="20231225-20231229"></a>20231225-20231229</h1><h2 id="本周工作-71"><a href="#本周工作-71" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>陪家里人在长沙逛了一下</p></li><li><p>结合实例描述问题</p><ol><li>性能保障的问题1：不考虑SLO时，有限的资源会按照到达速率分配给租户，随着租户的增多，每个租户的性能都没有办法得到保障</li><li>性能保障的问题2：延迟敏感型租户和带宽敏感型租户共享SSD的时候，会出现延迟敏感型租户的延迟SLO无法满足的情况</li><li>资源分配的问题：云厂商给每一个租户配置一个盘的方法会造成存储资源浪费。Regulator静态配置的方法无法很好适应租户请求和SSD性能发生的变化</li></ol></li><li><p>性能保障的方案思路</p><ol><li>先满足延迟SLO，再满足带宽SLO</li><li>通过调整并发IO的个数平衡租户的服务延迟和SSD吞吐量</li><li>通过调整租户的优先级来给不同租户分配SSD带宽同时保障租户的排队延迟</li><li>思考能否利用网络演算描述清楚延迟SLO和服务延迟、排队延迟、租户优先级的关系</li></ol></li></ol><h2 id="下周工作计划-13"><a href="#下周工作计划-13" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li><p>开始仿真，在仿真中体现问题和验证方案。</p></li><li><p>结合问题完善方案的细节</p></li></ol><h1 id="20240102-20240105"><a href="#20240102-20240105" class="headerlink" title="20240102-20240105"></a>20240102-20240105</h1><h2 id="本周工作-72"><a href="#本周工作-72" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>性能保障的motivation：延迟敏感型租户(延迟SLO更严格，带宽SLO不严格)和带宽敏感型租户(延迟SLO不严格，带宽SLO严格)共享SSD的时候，会出现延迟敏感型租户的延迟SLO无法满足的情况。<ol><li>当前遇到的问题是理想状态无法确定。简单的问题场景，理想状态很容易达到，方案很简单。复杂的问题场景，理想状态难确定，满足延迟SLO就无法满足带宽SLO。</li></ol></li><li>可以用网络演算的方式指导方案设计中的参数变化<ol><li>网络演算主要用于计算排队延迟，服务曲线和到达曲线的水平距离，就是该请求的排队延迟。</li><li>每个队列都有自己的服务曲线和到达曲线。服务曲线斜率之和等于SSD的处理速率(和SSD的请求并发程度相关，所以也决定服务延迟)。</li><li>每个队列按照队列的权重分配SSD处理速率，得到自己队列的服务曲线。</li><li>根据队列中的租户计算该队列的到达曲线(这里有一个问题：是每个租户一个到达曲线还是一个队列一个到达曲线)</li><li>根据服务曲线和到达曲线可以预测每个租户的请求排队延迟。期望是让该值加服务延迟满足每个租户的延迟SLO</li></ol></li></ol><h2 id="下周工作计划-14"><a href="#下周工作计划-14" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>整理在延迟敏感型租户和带宽敏感型租户共享SSD情境下，理想分配存储资源遇到的问题和解决方法。</li><li>结合问题完善方案的细节</li></ol><h1 id="20240108-20240112"><a href="#20240108-20240112" class="headerlink" title="20240108-20240112"></a>20240108-20240112</h1><h2 id="本周工作-73"><a href="#本周工作-73" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>完善方案和例子</p><ol><li>使用NVMe中WRR机制提供的队列(H、M、L)进行租户的调度</li><li>先根据租户的带宽SLO来选择合适的队列：带宽SLO更高的租户进入H队列，带宽SLO低的租户进入M队列。L队列服务不需要满足SLO的租户</li><li>根据租户的延迟SLO满足情况来调整所在队列的权重：当某一个队列中所有租户的延迟SLO和带宽SLO都被满足，降低该队列的权重。如果该租户的延迟SLO没有被满足，增加权重。如果存在租户的带宽SLO没有满足但是延迟SLO满足了，权重不变。<br>未解决问题：如果一个队列中有多个租户，多个租户之间的SLO满足情况出现了冲突(有的需要权重增加，有的需要权重降低)，该队列的权重如何变化？是否要给租户换队列。</li><li>在何时以及通过什么样的方式选择合适的租户进入L队列<ol><li>对延迟SLO严格的租户分配的带宽要满足该租户的到达速率，对带宽SLO严格的租户分配的带宽需要满足该租户的带宽SLO。</li><li>何时：当延迟SLO严格的租户的到达速率之和 加 带宽SLO严格的租户的带宽SLO之和大于SSD能提供的带宽的时候，就要选择合适的租户进入L队列了</li></ol></li></ol></li><li><p>总结该研究内容和Aequitas以及D2FQ的关系</p><ol><li><p>D2FQ</p><ol><li>D2FQ在一段时间内通过给租户分配不同权重的队列，实现租户之间的吞吐量权重公平。并通过改变队列的权重在公平和低权重队列的尾延迟之间实现权衡。(为什么不给租户固定队列，然后只通过改变队列的权重实现公平呢)</li><li>我们的目标是实现SLO的公平。在存储资源足够的情况下固定了租户的权重，通过更改每个队列的权重实现租户的SLO。(如果没有满足带宽SLO，排队延迟会增加，队列的权重会增加。)</li></ol></li><li><p>Aeuqitas</p><ol><li>Aequitas在网络资源不够用的时候通过给RPC降级来实现在有限的网络资源中最大化满足RPC的延迟SLO。每个QoS类(队列)维护了一个准入概率，当一个RPC初始化的时候，需要通过它对应的QoS类的准入概率来判断该RPC是进入该队列还是直接降级。如果该队列中完成的RPC满足了其延迟SLO，就增加准入概率，否则就减少。准入概率的初始值和增加幅度与该QoS类的延迟SLO相关</li><li>我们的目标是在资源够用的时候公平使用资源，资源不够用再去选择合适的降级。Aequitas的方法只适用于RPC很多，网络资源不够用的情况。</li></ol></li></ol></li></ol><h2 id="下周工作计划-15"><a href="#下周工作计划-15" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>完善在何时以及通过什么样的方式选择合适的租户进入L队列的方案</li><li>思考多个租户的情况下应该如何分配队列以及满足SLO</li></ol><h1 id="20240115-20240119"><a href="#20240115-20240119" class="headerlink" title="20240115-20240119"></a>20240115-20240119</h1><h2 id="本周工作-74"><a href="#本周工作-74" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>结合Aequitas和D2FQ思考方案的设计原则<ol><li>D2FQ在一段时间内通过给租户分配不同权重的队列，实现租户之间的吞吐量权重公平。并通过改变队列的权重在公平和低权重队列的尾延迟之间实现权衡。</li><li>Aequitas通过在网络资源出现瓶颈的时候根据延迟SLO和延迟SLO满足情况对租户进行降级来满足更多租户的延迟SLO</li><li>方案原则<ul><li>通过控制IO并发程度来控制IO的服务延迟。保障服务延迟小于延迟SLO</li><li>根据 (到达速率-带宽SLO)/延迟SLO的计算值来预测该租户的排队延迟，给租户分类。</li><li>优先保障排队延迟严格租户的延迟SLO，然后保障租户的带宽SLO</li><li>当存储资源出现瓶颈的时候选择SLO最宽松，且SLO满足情况最少的租户进行降级</li></ul></li></ol></li><li>完善方案的细节：具体的调整公式</li><li>在MQSim中整理代码框架<ol><li>在每个流创建的时候需要在scheduler中注册。</li><li>每个流的请求不再放进waiting queue，而是放到scheduler的WFQ中。</li><li>从scheduler的WFQ中取出命令提交</li></ol></li></ol><h2 id="下周工作计划-16"><a href="#下周工作计划-16" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>完善仿真代码和方案的细节</li><li>初步完成一个仿真结果</li></ol><h1 id="20240122-20240126"><a href="#20240122-20240126" class="headerlink" title="20240122-20240126"></a>20240122-20240126</h1><h2 id="本周工作-75"><a href="#本周工作-75" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>按照论文思路重新整理ppt框架，包括Introduction、Background and Related Work、Motivation、Design部分<ol><li>Background and Related work 介绍云存储平台的存储介质(NVMe)以及租户如何使用云存储平台；SLO保障中在内核的IO调度策略、延迟SLO保障以及带宽SLO保障；网络演算定理</li><li>Motivation介绍SSD的性能是不断变化的、等待延迟和服务延迟的关系、吞吐量和服务延迟在IO并发度上是矛盾的、随着租户数目增多，租户SLO都无法满足。</li><li>Design介绍方法，先介绍overview，再介绍每个参数含义，再介绍方法细节</li></ol></li></ol><h2 id="下周工作计划-17"><a href="#下周工作计划-17" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>完善ppt的细节内容</li><li>完善仿真代码</li></ol><h1 id="20240227-20240301"><a href="#20240227-20240301" class="headerlink" title="20240227-20240301"></a>20240227-20240301</h1><h2 id="本周工作-76"><a href="#本周工作-76" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>重新整理PPT架构</p><ol><li><p>背景和相关工作部分</p><ol><li>当前云存储的计价方式，用户关心吞吐量和延迟这两个指标，但计价方式做不到。因为现在基于NVMe SSD的云存储服务器不能提供稳定的吞吐量和延迟</li><li>NVMe 存储：NVMe特征，提供高吞吐和低延迟，在不同状态下体现不同的性能。基于NVMe的Linux内核存储栈流程</li><li>相关工作是如何在Linux内核存储栈中保障延迟和吞吐量的</li></ol></li><li><p>动机</p><ol><li>由于SSD的存储资源有限，当不进行调度的时候，存储资源按照租户的流量到达速率分配，随着租户数量增加，可能会出现SLO无法满足的情况</li><li>吞吐量SLO和延迟SLO的关系(在SSD服务速率固定的情况下是否是竞争的，还没想好)。如果SSD速率固定，如果租户想增加吞吐量，就会增加发送速率，那么排队延迟就可能会增加。</li><li>租户的到达速率不会严格按照吞吐量SLO，所以如果只按照吞吐量SLO分配资源给租户会导致延迟SLO上升</li></ol></li><li><p>基本想法</p><ol><li>在租户数量增多，存储资源不够用的时候，需要选择合适的租户降级。</li><li>根据是否容易破坏延迟SLO的情况，对租户进行H和M的分类。</li><li>在租户发送速率发生变化的时候，对H和M的权重进行动态调整。调度租户的请求，满足所有租户的SLO</li></ol></li></ol></li></ol><h2 id="下周工作计划-18"><a href="#下周工作计划-18" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>完善ppt的细节内容</li><li>思考在只考虑排队延迟的情况下吞吐量SLO和延迟SLO的关系。</li><li>以及这两者和租户到达速率的关系</li><li>思考如何在方案中更好地体现对吞吐量SLO的保障</li></ol><h1 id="20240304-20240308"><a href="#20240304-20240308" class="headerlink" title="20240304-20240308"></a>20240304-20240308</h1><h2 id="本周工作-77"><a href="#本周工作-77" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>重新整理PPT架构<ol><li>动机<ol><li>由于SSD的存储资源有限，当不进行调度的时候，存储资源按照租户的流量到达速率分配，随着租户数量增加，可能会出现SLO无法满足的情况</li><li>由于SSD资源有限，当一个租户的到达速率波动，会抢占其他租户的资源，会影响其他租户的SLO满足情况。</li><li>带宽SLO满足情况只和租户的被服务速率相关。延迟SLO满足情况要看租户的被服务速率和到达速率的差值情况。（这是现象，如何体现问题）。</li></ol></li><li>基本想法<ol><li>在租户数量增多，存储资源不够用的时候，需要选择合适的租户降级。</li><li>根据是否容易破坏延迟SLO的情况，对租户进行H和M的分类。<ol><li>H中的租户尽量能够做到即来即服务</li><li>M中的租户可以容许一定的排队</li><li>L中的租户不用保障SLO</li></ol></li><li>每隔一段时间给H，M，L队列分配基础服务数据量<ol><li>H中的基础服务数据量<strong>大于等于</strong>其中租户的带宽SLO之和*时间。每轮通过网络演算定理计算该值</li><li>M中的基础服务数据量<strong>等于</strong>其中租户的带宽SLO之和*时间</li><li>L中的基础服务数据量是SSD总服务量-H和M的基础服务量之和</li></ol></li><li>H,M配置了动态的服务数据量，可以从L中抢<ol><li>当H的基础服务量用完的时候，可以抢占L基础服务量的一半，作为动态服务量(补充到基础)。</li><li>当M的基础服务量用完并且排队请求达到阈值的时候，可以抢占L基础服务量的1/4，作为动态服务量(补充到基础)。</li></ol></li></ol></li></ol></li></ol><h2 id="下周工作计划-19"><a href="#下周工作计划-19" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>完善ppt的方案细节和motivation</li><li>思考在motivation中如何体现吞吐量SLO和延迟SLO的关系。</li><li>回顾aequitas和D2FQ，定义motivation</li></ol><h1 id="20240311-20240315"><a href="#20240311-20240315" class="headerlink" title="20240311-20240315"></a>20240311-20240315</h1><h2 id="本周工作-78"><a href="#本周工作-78" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>完善PPT中细节方案和motivation。</p></li><li><p>Motivation包括两个部分</p><ol><li>多租户竞争有限存储资源：对应一个图，每个租户的SLO和到达速率都一样，随着租户数目增多，所有租户的SLO都无法满足。</li><li>延迟SLO和带宽SLO：对应两个图，每个租户的到达速率等于吞吐量SLO，增加一个租户(延迟SLO宽松)的到达速率，抢占其他租户的资源，会导致其他租户的吞吐量SLO和延迟SLO无法满足。每个租户的到达速率等于吞吐量SLO，为每个租户按照吞吐量SLO进行限速。当一个租户(延迟SLO严格)的到达速率大于吞吐量SLO的时候，延迟SLO被破坏。</li></ol></li><li><p>准备组会论文</p></li><li><p>在14号机安装了SPDK和FIO环境</p></li></ol><h2 id="下周工作计划-20"><a href="#下周工作计划-20" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>准备组会PPT</li><li>完善ppt细节</li></ol><h1 id="20240318-20240322"><a href="#20240318-20240322" class="headerlink" title="20240318-20240322"></a>20240318-20240322</h1><h2 id="本周工作-79"><a href="#本周工作-79" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>准备组会论文</p></li><li><p>在14号机安装了SPDK和FIO环境，能够用FIO测试SPDK的bdev。</p><ol><li><p>测试多租户竞争同一块SSD导致带宽SLO无法满足的情况。下图是iosize=16KB的情况。发送速率是1000MBps(每个io的间隔是16μs)</p><p><img src="../images/%E5%91%A8%E6%8A%A5%E6%B1%87%E6%80%BB/image-20240324233759857.png" alt="image-20240324233759857"></p></li><li><p>因为两条线差距过大，打算把iosize大小改为4KB的情况。但是只可以运行1个job(平均带宽是250MBps)。没有办法运行4个job(出现段错误)</p></li></ol></li></ol><h2 id="下周工作计划-21"><a href="#下周工作计划-21" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>完善ppt细节</li><li>跑出来初步的motivation</li></ol><h1 id="20240325-20240329"><a href="#20240325-20240329" class="headerlink" title="20240325-20240329"></a>20240325-20240329</h1><h2 id="本周工作-80"><a href="#本周工作-80" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li><p>验证motivation</p><ol><li><p>多租户(发送速率相同)竞争有限的资源，随着租户数目的增多，每个租户的带宽和请求的延迟都增加了。当租户的数目增加到4的时候，每个租户的吞吐量降低和延迟增加</p><img src="../images/周报汇总/image-20240331235707054.png" alt="image-20240331235707054" style="zoom: 33%;" /><img src="../images/周报汇总/image-20240331235716261.png" alt="image-20240331235716261" style="zoom: 33%;" /><ol><li><p>多租户竞争有限资源，提高单个租户的发送速率，该租户的吞吐量会变大，但是由于资源是有限的，所以请求的延迟会增加</p><img src="../images/周报汇总/image-20240401001604304.png" alt="image-20240401001604304" style="zoom: 33%;" /><img src="../images/周报汇总/image-20240401001624455.png" alt="image-20240401001624455" style="zoom: 33%;" /></li></ol></li></ol></li><li><p>体现问题：如果静态按照租户的带宽SLO需求提供存储资源，当租户的发送速率变化的时候，租户的延迟SLO会被破坏</p><ol><li>分析spdk源代码。可以在bdev层和nvme驱动层实现调度算法。目前在spdk的bdev层增加漏桶策略(根据带宽需求生成令牌)，但是结果不理想，准备看一下问题。</li></ol></li></ol><h2 id="下周工作计划-22"><a href="#下周工作计划-22" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li>按照论文的架构整理当前的ppt。思考implementation部分</li><li>在spdk中实现调度算法</li></ol><h1 id="20240408-20240412"><a href="#20240408-20240412" class="headerlink" title="20240408-20240412"></a>20240408-20240412</h1><h2 id="本周工作-81"><a href="#本周工作-81" class="headerlink" title="本周工作"></a>本周工作</h2><ol><li>重新组织ppt内容，丰富motivation的部分</li><li>调研当前spdk的使用方案。计划之后使用QEMU+vhost+SPDK的方案实现对NVMe SSD盘的虚拟化。将一个实体盘虚拟成多个虚拟盘，然后QEMU当做虚拟的客户端，访问每个虚拟盘。</li></ol><h2 id="下周工作计划-23"><a href="#下周工作计划-23" class="headerlink" title="下周工作计划"></a>下周工作计划</h2><ol><li><p>继续组织motivation，分析问题和方案对应。</p><ol><li>有限资源不能无限满足所有租户的需求。需要尽可能满足更多租户的需求。就需要调度算法来决定如何满足租户们的需求。</li><li>部分租户的发送速率是动态的。当租户的发送速率增加的时候，如果不对租户的提交速率进行限制，每个租户的请求延迟会增加，会无法满足租户的延迟SLO。    </li><li>如果只对租户的提交速率进行吞吐量SLO限制(对每个租户的吞吐量设置上限)，当租户发送速率增加的时候，请求的排队延迟会增加，会影响租户的延迟SLO满足情况。     <strong>所以需要按照延迟SLO是否容易被破坏，对租户进行分类</strong></li></ol></li><li><p>搭建QEMU+vhost+SPDK的实验环境。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>周报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自动组卷系统</title>
    <link href="/2021/10/11/%E8%87%AA%E5%8A%A8%E7%BB%84%E5%8D%B7%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/10/11/%E8%87%AA%E5%8A%A8%E7%BB%84%E5%8D%B7%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="自动组卷系统"><a href="#自动组卷系统" class="headerlink" title="自动组卷系统"></a>自动组卷系统</h1><h2 id="系统使用手册"><a href="#系统使用手册" class="headerlink" title="系统使用手册"></a>系统使用手册</h2><h3 id="数据库说明"><a href="#数据库说明" class="headerlink" title="数据库说明"></a>数据库说明</h3><p>数据库使用的是neo4j-3.3.3版本，由于服务器最开始安装的是jdk8，而高版本的neo4j需要使用的是jdk11或者jdk12，所以项目使用了低版本的neo4j数据库。</p><p>数据库对任意的ip地址都是可以访问的，数据库的访问网址是<code>http://1.15.187.75:7474/</code>访问界面如下</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\自动组卷系统\image-20211013092136019.png" alt="image-20211013092136019" style="zoom:30%;" /><p>在命令行中输入命令<code>match(n) return n;</code>可以看到当前数据库的基本图网络。</p><h4 id="图网络结构说明"><a href="#图网络结构说明" class="headerlink" title="图网络结构说明"></a>图网络结构说明</h4><p>整体框架中所有的节点分为两类，一类是层节点，一类是题目节点。分层的基本结构如下图所示。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\自动组卷系统\image-20211013102423350.png" alt="image-20211013102423350" style="zoom:50%;" /><p>可以看到层节点总共有四种类型。分别是<img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\自动组卷系统\image-20211013102404814.png" alt="image-20211013102404814" style="zoom:50%;" />。每个高层节点对低层节点的关系都是<strong>include</strong>.每类层节点的介绍如下(从高到低)。</p><ol><li><p><u>Class节点</u>：该节点只有一个，是Python课程。具体属性有：**”Title”:(课程的名称)** 和 **”Teacher”: (授课老师)**。</p></li><li><p><u>Theme节点</u>：是课程中的每一讲，是根据课程的pdf文件的名称进行命名的。具体属性有：**”Title”: (该讲的名称)、”Difficulty”: (该讲难易度)、”Importance”: (该讲应当掌握的重要程度)**。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\自动组卷系统\image-20211012140033427.png" alt="image-20211012140033427" style="zoom:50%;" /></li><li><p><u>Knowledge节点</u>：是每一讲中的每一节，根据每一讲文件中的目录进行命名的。具体属性有：**”Title”: (该知识的名称)<strong>、</strong>“Difficulty”: (该知识难易度)<strong>、</strong>“Importance”: (该知识应当掌握的重要程度)**。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\自动组卷系统\image-20211012143235855.png" alt="image-20211012143235855" style="zoom:50%;" /></li><li><p><u>Point节点</u>：是每一节中的每一个具体知识点。具体属性有：**”Title”: (该知识点的名称)<strong>、</strong>“Difficulty”: (该知识点难易度)<strong>、</strong>“Importance”: (该知识点应当掌握的重要程度)**。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\自动组卷系统\image-20211013143847081.png" alt="image-20211013143847081" style="zoom:20%;" /></li></ol><p>除了层节点还有题目节点，题目节点的类型是<strong>Test</strong>.</p><p>Test就是题目本身，一个test可以和多个Point相关，一个Point也可以和多个Test相关。具体属性有：**”Type”：（该习题的习题类型）、”Content”: (该习题的具体内容)、”Difficulty”: (该题目难易度)、”Answer”:(该题目的答案)、”Importance”: (该题目的重要程度)**。每一个Test对Point节点的关系是relate。</p><h3 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h3><h4 id="服务器说明"><a href="#服务器说明" class="headerlink" title="服务器说明"></a>服务器说明</h4><p>服务器的ip地址是：1.15.187.75，账号是root，密码是zjzty@1123@.</p><p>项目的地址是:/usr/local/python_projects/python_web/PythonClass/</p><p>nginx的地址是：/usr/local/nginx</p><p>anaconda的地址是：/root/anaconda3</p><h4 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h4><p>项目的启动方式有两种</p><ol><li>直接在项目的根目录中使用  <code>python manage.py runserver 0.0.0.0:80</code></li><li>在本机的pycharm中进行django项目的配置，之后直接启动项目，效果和1的类似</li><li>先使用命令<code>python manage.py runserver</code>，再启动nginx，再启动uwsgi，之后可以进行访问</li></ol><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\自动组卷系统\image-20211025014218913.png" alt="image-20211025014218913" style="zoom:30%;" /><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h3><ol><li>管理员可以将题库上传</li><li>题库按照知识点进行分类</li><li>系统自动根据知识点随机出题</li><li>学生端完成题目，系统自动进行判卷</li></ol><h3 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h3><ol><li>使用neo4j作为数据库</li><li>前端使用浏览器</li></ol><h2 id="平台设计"><a href="#平台设计" class="headerlink" title="平台设计"></a>平台设计</h2><p>平台主要有三个模块，分别是登录模块、教师模块、学生模块。</p><h3 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h3><p>登录模块主要是负责在登录的时候把教师和学生进行区分，即在neo4j数据库中存储有学生类型的节点和教师类型的节点，节点的属性都包含用户名和密码。通过登录模块把每个学生和老师分开，平台的UI操作也会不一样。同样当用户输入任何网址的时候都需要先登录。</p><h3 id="教师模块"><a href="#教师模块" class="headerlink" title="教师模块"></a>教师模块</h3><p>需要多个教师节点，每个教师节点对应不同的学生。</p><p>教师节点会存储教师登录的用户名和密码。所以教师节点的属性有：登陆账号和登陆密码。班级，（有的知识多个老师讲了没有）</p><p>教师模块能够实现知识图谱的构建与题库的录入。还可以进行作业和考试试卷的布置。主要就是有权限。</p><h3 id="学生模块"><a href="#学生模块" class="headerlink" title="学生模块"></a>学生模块</h3><p>学生节点的属性有：</p><ol><li>学号（登录的账号）</li><li>登录密码</li><li>姓名</li><li>班级</li><li>性别</li></ol><p>每一个学生节点和Test类型的节点都是有一条边（LEARN）联系的，属性有：</p><ol><li>该生做这个题目做了多少次</li><li>该生做对了这个题目多少次</li></ol><h3 id="学生模块和教师模块的结合"><a href="#学生模块和教师模块的结合" class="headerlink" title="学生模块和教师模块的结合"></a>学生模块和教师模块的结合</h3><h4 id="作业模块"><a href="#作业模块" class="headerlink" title="作业模块"></a>作业模块</h4><p>教师可以通过教师端布置作业。选择想要考察的知识点和其对应的题目数目。平台进行记录，保存到一个json文件中，包含知识点名称和其对应的出题数目。学生端在完成本次作业的时候，平台会对此json文件进行读取，再随机出题。</p><p>本次作业的结果会以csv文件的格式保存表格的属性有：题目名称、题目内容、出题次数、答错次数。同样本次的结果也会对题目节点的属性进行更新。</p><p>每个学生都会维护一个表格（名称是：“姓名_学号_班级”），用来记录自己的学习情况，每一行是一个题目。每当有一个题目节点被添加进来了，该表格就会多一行。属性有：完成次数、答对次数、答错次数、第几次作业答对、第几次作业答错。</p><p>方便教师对每个学生单独的学习信息进行统计分析。</p><h2 id="中期推进"><a href="#中期推进" class="headerlink" title="中期推进"></a>中期推进</h2><h3 id="安装neo4j"><a href="#安装neo4j" class="headerlink" title="安装neo4j"></a>安装neo4j</h3><p>按照<a href="https://www.cnblogs.com/Hackerman/p/12555365.html">centos 安装neo4j图形数据库 - Hackerman - 博客园 (cnblogs.com)</a>这篇文章进行安装，可以最终得到如下结果。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\自动组卷系统\image-20211011155000074.png" alt="image-20211011155000074"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><code class="hljs ssh">#*****************************************************************<br># Neo4j configuration<br>#<br># For more details and a complete list of settings, please see<br># https:&#x2F;&#x2F;neo4j.com&#x2F;docs&#x2F;operations-manual&#x2F;current&#x2F;reference&#x2F;configuration-settings&#x2F;<br>#*****************************************************************<br><br># The name of the database to mount<br>#要装载的数据库的名称，默认就是graph.db<br>dbms.active_database&#x3D;graph.db<br><br># Paths of directories in the installation.<br>#安装中目录的路径，默认使用当前安装Neo4j的目录<br>#dbms.directories.data&#x3D;data<br>#dbms.directories.plugins&#x3D;plugins<br>#dbms.directories.certificates&#x3D;certificates<br>#dbms.directories.logs&#x3D;logs<br>#dbms.directories.lib&#x3D;lib<br>#dbms.directories.run&#x3D;run<br><br># This setting constrains all &#96;LOAD CSV&#96; import files to be under the &#96;import&#96; directory. Remove or comment it out to<br># allow files to be loaded from anywhere in the filesystem; this introduces possible security problems. See the<br># &#96;LOAD CSV&#96; section of the manual for details.<br>#导入数据的CSV数据文件的默认存放目录<br>dbms.directories.import&#x3D;import<br><br># Whether requests to Neo4j are authenticated.<br># To disable authentication, uncomment this line<br>#对Neo4j的请求是否经过身份验证。<br>dbms.security.auth_enabled&#x3D;true<br><br># Enable this to be able to upgrade a store from an older version.<br># 是否能够从旧版本升级存储<br>#dbms.allow_upgrade&#x3D;true<br><br># Java Heap Size: by default the Java heap size is dynamically<br># calculated based on available system resources.<br># Uncomment these lines to set specific initial and maximum<br># heap size.<br>#Java堆大小：默认情况下，Java堆大小是基于可用系统资源动态计算的。<br>#未注释这些行以设置特定的初始和最大堆大小。<br>#可自己设置初始堆大小和最大堆大小值，具体值需要根据自己系统及数据量大小而定<br>#dbms.memory.heap.initial_size&#x3D;512m<br>#dbms.memory.heap.max_size&#x3D;512m<br><br># The amount of memory to use for mapping the store files, in bytes (or<br># kilobytes with the &#39;k&#39; suffix, megabytes with &#39;m&#39; and gigabytes with &#39;g&#39;).<br># If Neo4j is running on a dedicated server, then it is generally recommended<br># to leave about 2-4 gigabytes for the operating system, give the JVM enough<br># heap to hold all your transaction state and query context, and then leave the<br># rest for the page cache.<br># The default page cache memory assumes the machine is dedicated to running<br># Neo4j, and is heuristically set to 50% of RAM minus the max Java heap size.<br>#用于映射存储文件的内存量，也就是缓存，单位可以是k&#x2F;m&#x2F;g。<br>#如果Neo4j运行在专用服务器上，则通常建议为了给操作系统留下大约2-4gb的空间，<br>#给JVM足够的空间堆以保存所有事务状态和查询上下文，然后在页面缓存中休息。<br>#建议设置为RAM的50%减去最大Java堆大小。<br>#dbms.memory.pagecache.size&#x3D;10g<br><br>#*****************************************************************<br># Network connector configuration<br>#*****************************************************************<br><br># With default configuration Neo4j only accepts local connections.<br># To accept non-local connections, uncomment this line:<br># 默认配置下，Neo4j只接受本地连接。要接受非本地连接，请取消注释此行：<br>dbms.connectors.default_listen_address&#x3D;0.0.0.0<br><br># You can also choose a specific network interface, and configure a non-default<br># port for each connector, by setting their individual listen_address.<br><br># The address at which this server can be reached by its clients. This may be the server&#39;s IP address or DNS name, or<br># it may be the address of a reverse proxy which sits in front of the server. This setting may be overridden for<br># individual connectors below.<br>#您还可以选择一个特定的网络接口，并为每个连接器配置一个非默认端口，方法是设置它们各自的侦听地址。<br>#客户端可以访问此服务器的地址。这可能是服务器的IP地址或DNS名称，也可能是位于服务器前面的反向代理的地址。<br>#对于下面的单独连接器，此设置可能被重写<br>#默认是本地地址<br>dbms.connectors.default_advertised_address&#x3D;localhost<br><br># You can also choose a specific advertised hostname or IP address, and<br># configure an advertised port for each connector, by setting their<br># individual advertised_address.<br><br># Bolt connector<br># Bolt 连接开启<br>dbms.connector.bolt.enabled&#x3D;true<br>#dbms.connector.bolt.tls_level&#x3D;OPTIONAL<br>#Bolt端口号<br>dbms.connector.bolt.listen_address&#x3D;:7687<br><br># HTTP Connector. There must be exactly one HTTP connector.<br>#HTTP连接<br>dbms.connector.http.enabled&#x3D;true<br>#HTTP连接端口号<br>dbms.connector.http.listen_address&#x3D;:7474<br><br># HTTPS Connector. There can be zero or one HTTPS connectors.<br>#HTTPs连接<br>dbms.connector.https.enabled&#x3D;true<br>#HTTPS端口<br>dbms.connector.https.listen_address&#x3D;:7473<br><br># Number of Neo4j worker threads.<br>#运行线程数<br>#dbms.threads.worker_count&#x3D;<br><br>#*****************************************************************<br># SSL system configuration<br>#*****************************************************************<br><br># Names of the SSL policies to be used for the respective components.<br><br># The legacy policy is a special policy which is not defined in<br># the policy configuration section, but rather derives from<br># dbms.directories.certificates and associated files<br># (by default: neo4j.key and neo4j.cert). Its use will be deprecated.<br><br># The policies to be used for connectors.<br>#<br># N.B: Note that a connector must be configured to support&#x2F;require<br>#      SSL&#x2F;TLS for the policy to actually be utilized.<br>#<br># see: dbms.connector.*.tls_level<br><br>#bolt.ssl_policy&#x3D;legacy<br>#https.ssl_policy&#x3D;legacy<br><br>#*****************************************************************<br># SSL policy configuration SSL策略配置<br>#*****************************************************************<br><br># Each policy is configured under a separate namespace, e.g.<br>#    dbms.ssl.policy.&lt;policyname&gt;.*<br>#<br># The example settings below are for a new policy named &#39;default&#39;.<br><br># The base directory for cryptographic objects. Each policy will by<br># default look for its associated objects (keys, certificates, ...)<br># under the base directory.<br>#<br># Every such setting can be overriden using a full path to<br># the respective object, but every policy will by default look<br># for cryptographic objects in its base location.<br>#<br># Mandatory setting 强制设置<br><br>#dbms.ssl.policy.default.base_directory&#x3D;certificates&#x2F;default<br><br># Allows the generation of a fresh private key and a self-signed<br># certificate if none are found in the expected locations. It is<br># recommended to turn this off again after keys have been generated.<br>#<br># Keys should in general be generated and distributed offline<br># by a trusted certificate authority (CA) and not by utilizing<br># this mode.<br>#密钥通常应该由受信任的证书颁发机构（CA）脱机生成和分发，而不是使用此模式。<br>#是否允许生成秘钥<br><br>#dbms.ssl.policy.default.allow_key_generation&#x3D;false<br><br># Enabling this makes it so that this policy ignores the contents<br># of the trusted_dir and simply resorts to trusting everything.<br>#<br># Use of this mode is discouraged. It would offer encryption but no security.<br># 不鼓励使用此模式。它将提供加密，但没有安全性。<br># 是否信任所有<br><br>#dbms.ssl.policy.default.trust_all&#x3D;false<br><br># The private key for the default SSL policy. By default a file<br># named private.key is expected under the base directory of the policy.<br># It is mandatory that a key can be found or generated.<br><br>#dbms.ssl.policy.default.private_key&#x3D;<br><br># The private key for the default SSL policy. By default a file<br># named public.crt is expected under the base directory of the policy.<br># It is mandatory that a certificate can be found or generated.<br><br>#dbms.ssl.policy.default.public_certificate&#x3D;<br><br># The certificates of trusted parties. By default a directory named<br># &#39;trusted&#39; is expected under the base directory of the policy. It is<br># mandatory to create the directory so that it exists, because it cannot<br># be auto-created (for security purposes).<br>#<br># To enforce client authentication client_auth must be set to &#39;require&#39;!<br><br>#dbms.ssl.policy.default.trusted_dir&#x3D;<br><br># Client authentication setting. Values: none, optional, require<br># The default is to require client authentication.<br>#<br># Servers are always authenticated unless explicitly overridden<br># using the trust_all setting. In a mutual authentication setup this<br># should be kept at the default of require and trusted certificates<br># must be installed in the trusted_dir.<br><br>#dbms.ssl.policy.default.client_auth&#x3D;require<br><br># A comma-separated list of allowed TLS versions.<br># By default TLSv1, TLSv1.1 and TLSv1.2 are allowed.<br><br>#dbms.ssl.policy.default.tls_versions&#x3D;<br><br># A comma-separated list of allowed ciphers.<br># The default ciphers are the defaults of the JVM platform.<br><br>#dbms.ssl.policy.default.ciphers&#x3D;<br><br>#*****************************************************************<br># Logging configuration 日志配置<br>#*****************************************************************<br><br># To enable HTTP logging, uncomment this line<br>#是否启用HTTP日志记录<br>#dbms.logs.http.enabled&#x3D;true<br><br># Number of HTTP logs to keep.<br>#保留日志文件数<br>#dbms.logs.http.rotation.keep_number&#x3D;5<br><br># Size of each HTTP log that is kept.<br>#日志文件大小<br>#dbms.logs.http.rotation.size&#x3D;20m<br><br># To enable GC Logging, uncomment this line<br># 启用GC日志记录<br>#dbms.logs.gc.enabled&#x3D;true<br><br># GC Logging Options<br>#日志记录选项，详情见下地址<br># see http:&#x2F;&#x2F;docs.oracle.com&#x2F;cd&#x2F;E19957-01&#x2F;819-0084-10&#x2F;pt_tuningjava.html#wp57013 for more information.<br>#dbms.logs.gc.options&#x3D;-XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintPromotionFailure -XX:+PrintTenuringDistribution<br><br># Number of GC logs to keep.<br>#GC日志保留数<br>#dbms.logs.gc.rotation.keep_number&#x3D;5<br><br># Size of each GC log that is kept.<br>#GC日志文件大小<br>#dbms.logs.gc.rotation.size&#x3D;20m<br><br># Size threshold for rotation of the debug log. If set to zero then no rotation will occur. Accepts a binary suffix &quot;k&quot;,<br># &quot;m&quot; or &quot;g&quot;.<br>#调试日志阈值大小<br>#dbms.logs.debug.rotation.size&#x3D;20m<br><br># Maximum number of history files for the internal log.<br>#最多保留日志文件数<br>#dbms.logs.debug.rotation.keep_number&#x3D;7<br><br>#*****************************************************************<br># Miscellaneous configuration 其他配置<br>#*****************************************************************<br><br># Enable this to specify a parser other than the default one.<br>#cypher 版本<br>#cypher.default_language_version&#x3D;3.0<br><br># Determines if Cypher will allow using file URLs when loading data using<br># &#96;LOAD CSV&#96;. Setting this value to &#96;false&#96; will cause Neo4j to fail &#96;LOAD CSV&#96;<br># clauses that load data from the file system.<br>#是否允许Cypher在Load CSV时引用互联网上的地址<br>#dbms.security.allow_csv_import_from_file_urls&#x3D;true<br><br># Retention policy for transaction logs needed to perform recovery and backups.<br>#执行恢复和备份所需的事务日志的保留策略<br>dbms.tx_log.rotation.retention_policy&#x3D;1 days<br><br># Enable a remote shell server which Neo4j Shell clients can log in to.<br>#是否允许shell远程连接<br>dbms.shell.enabled&#x3D;true<br># The network interface IP the shell will listen on (use 0.0.0.0 for all interfaces).<br>#shell连接地址（用 0.0.0.0 表示所有地址都可连接）<br>#127.0.0.1<br>dbms.shell.host&#x3D;0.0.0.0<br># The port the shell will listen on, default is 1337.<br>#Shell连接端口号<br>dbms.shell.port&#x3D;1337<br><br># Only allow read operations from this Neo4j instance. This mode still requires<br># write access to the directory for lock purposes.<br>#dbms.read_only&#x3D;false<br><br># Comma separated list of JAX-RS packages containing JAX-RS resources, one<br># package name for each mountpoint. The listed package names will be loaded<br># under the mountpoints specified. Uncomment this line to mount the<br># org.neo4j.examples.server.unmanaged.HelloWorldResource.java from<br># neo4j-server-examples under &#x2F;examples&#x2F;unmanaged, resulting in a final URL of<br># http:&#x2F;&#x2F;localhost:7474&#x2F;examples&#x2F;unmanaged&#x2F;helloworld&#x2F;&#123;nodeId&#125;<br>#dbms.unmanaged_extension_classes&#x3D;org.neo4j.examples.server.unmanaged&#x3D;&#x2F;examples&#x2F;unmanaged<br><br>#********************************************************************<br># JVM Parameters JVM参数配置<br>#********************************************************************<br><br># G1GC generally strikes a good balance between throughput and tail<br># latency, without too much tuning.<br>dbms.jvm.additional&#x3D;-XX:+UseG1GC<br><br># Have common exceptions keep producing stack traces, so they can be<br># debugged regardless of how often logs are rotated.<br>dbms.jvm.additional&#x3D;-XX:-OmitStackTraceInFastThrow<br><br># Make sure that &#96;initmemory&#96; is not only allocated, but committed to<br># the process, before starting the database. This reduces memory<br># fragmentation, increasing the effectiveness of transparent huge<br># pages. It also reduces the possibility of seeing performance drop<br># due to heap-growing GC events, where a decrease in available page<br># cache leads to an increase in mean IO response time.<br># Try reducing the heap memory, if this flag degrades performance.<br>dbms.jvm.additional&#x3D;-XX:+AlwaysPreTouch<br><br># Trust that non-static final fields are really final.<br># This allows more optimizations and improves overall performance.<br># NOTE: Disable this if you use embedded mode, or have extensions or dependencies that may use reflection or<br># serialization to change the value of final fields!<br>dbms.jvm.additional&#x3D;-XX:+UnlockExperimentalVMOptions<br>dbms.jvm.additional&#x3D;-XX:+TrustFinalNonStaticFields<br><br># Disable explicit garbage collection, which is occasionally invoked by the JDK itself.<br>dbms.jvm.additional&#x3D;-XX:+DisableExplicitGC<br><br># Remote JMX monitoring, uncomment and adjust the following lines as needed. Absolute paths to jmx.access and<br># jmx.password files are required.<br># Also make sure to update the jmx.access and jmx.password files with appropriate permission roles and passwords,<br># the shipped configuration contains only a read only role called &#39;monitor&#39; with password &#39;Neo4j&#39;.<br># For more details, see: http:&#x2F;&#x2F;download.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;technotes&#x2F;guides&#x2F;management&#x2F;agent.html<br># On Unix based systems the jmx.password file needs to be owned by the user that will run the server,<br># and have permissions set to 0600.<br># For details on setting these file permissions on Windows see:<br>#     http:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;technotes&#x2F;guides&#x2F;management&#x2F;security-windows.html<br>#dbms.jvm.additional&#x3D;-Dcom.sun.management.jmxremote.port&#x3D;3637<br>#dbms.jvm.additional&#x3D;-Dcom.sun.management.jmxremote.authenticate&#x3D;true<br>#dbms.jvm.additional&#x3D;-Dcom.sun.management.jmxremote.ssl&#x3D;false<br>#dbms.jvm.additional&#x3D;-Dcom.sun.management.jmxremote.password.file&#x3D;&#x2F;absolute&#x2F;path&#x2F;to&#x2F;conf&#x2F;jmx.password<br>#dbms.jvm.additional&#x3D;-Dcom.sun.management.jmxremote.access.file&#x3D;&#x2F;absolute&#x2F;path&#x2F;to&#x2F;conf&#x2F;jmx.access<br><br># Some systems cannot discover host name automatically, and need this line configured:<br>#dbms.jvm.additional&#x3D;-Djava.rmi.server.hostname&#x3D;$THE_NEO4J_SERVER_HOSTNAME<br><br># Expand Diffie Hellman (DH) key size from default 1024 to 2048 for DH-RSA cipher suites used in server TLS handshakes.<br># This is to protect the server from any potential passive eavesdropping.<br>dbms.jvm.additional&#x3D;-Djdk.tls.ephemeralDHKeySize&#x3D;2048<br><br># This mitigates a DDoS vector.<br>dbms.jvm.additional&#x3D;-Djdk.tls.rejectClientInitiatedRenegotiation&#x3D;true<br><br>#********************************************************************<br># Wrapper Windows NT&#x2F;2000&#x2F;XP Service Properties<br>#********************************************************************<br># WARNING - Do not modify any of these properties when an application<br>#  using this configuration file has been installed as a service.<br>#  Please uninstall the service before modifying this section.  The<br>#  service can then be reinstalled.<br><br># Name of the service<br>dbms.windows_service_name&#x3D;neo4j<br><br>#********************************************************************<br># Other Neo4j system properties<br>#********************************************************************<br>dbms.jvm.additional&#x3D;-Dunsupported.dbms.udc.source&#x3D;tarball<br></code></pre></td></tr></table></figure><p>neo4j的配置文件的具体详情，可能之后会用到。</p><h3 id="使用java连接neo4j"><a href="#使用java连接neo4j" class="headerlink" title="使用java连接neo4j"></a>使用java连接neo4j</h3><p>首先做的是一个小的java的程序，在idea中，使用了maven添加依赖。在<code>pom.xml</code>文件中加入如下语句。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.neo4j.driver<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>neo4j-java-driver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>因为安装的neo4j的版本是3.3.3.1，所以使用的是1.5.0版本的api。之后在java中完成了一个简单连接数据库并写入节点的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.neo4j.driver.v1.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.neo4j.driver.v1.Values.parameters;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldExample</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AutoCloseable</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Driver driver;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HelloWorldExample</span><span class="hljs-params">( String uri, String user, String password )</span></span><br><span class="hljs-function">    </span>&#123;<br>        driver = GraphDatabase.driver( uri, AuthTokens.basic( user, password ) );<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span><br><span class="hljs-function">    </span>&#123;<br>        driver.close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printGreeting</span><span class="hljs-params">( <span class="hljs-keyword">final</span> String message )</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">try</span> ( Session session = driver.session() )<br>        &#123;<br>            String greeting = session.writeTransaction( <span class="hljs-keyword">new</span> TransactionWork&lt;String&gt;()<br>            &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span><span class="hljs-params">( Transaction tx )</span></span><br><span class="hljs-function">                </span>&#123;<br>                    StatementResult result = tx.run( <span class="hljs-string">&quot;CREATE (a:Greeting) &quot;</span> +<br>                                    <span class="hljs-string">&quot;SET a.message = $message &quot;</span> +<br>                                    <span class="hljs-string">&quot;RETURN a.message + &#x27;, from node &#x27; + id(a)&quot;</span>,<br>                            parameters( <span class="hljs-string">&quot;message&quot;</span>, message ) );<br>                    <span class="hljs-keyword">return</span> result.single().get( <span class="hljs-number">0</span> ).asString();<br>                &#125;<br>            &#125; );<br>            System.out.println( greeting );<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String... args )</span> <span class="hljs-keyword">throws</span> Exception</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">try</span> ( HelloWorldExample greeter = <span class="hljs-keyword">new</span> HelloWorldExample( <span class="hljs-string">&quot;bolt://1.15.187.75:7687&quot;</span>, <span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;szb123123&quot;</span> ) )<br>        &#123;<br>            greeter.printGreeting( <span class="hljs-string">&quot;hello, world&quot;</span> );<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>找到了Neo4j的开发者文档<a href="https://neo4j.com/docs/developer-manual/current/index.html">The Neo4j Developer Manual v3.4</a>可以学习和查阅。</p><p>如下显示一个连接的生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DriverLifecycleExample</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AutoCloseable</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Driver driver;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DriverLifecycleExample</span><span class="hljs-params">( String uri, String user, String password )</span></span><br><span class="hljs-function">    </span>&#123;<br>        driver = GraphDatabase.driver( uri, AuthTokens.basic( user, password ) );<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span><br><span class="hljs-function">    </span>&#123;<br>        driver.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建图网络"><a href="#创建图网络" class="headerlink" title="创建图网络"></a>创建图网络</h3><p>由于是最开始的基础部分，所以只是手动添加试题。按照老师的课件将所有python的知识分成21讲。如下所示。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\自动组卷系统\image-20211012140033427.png" alt="image-20211012140033427"></p><p>因为只是一个初步的程序，所以只对第一讲的内容做具体分析。</p><p>因为是图数据库，所以对每个节点进行不同的定义。将课程名称<strong>Python数据处理编程</strong>设置为第一个节点。该节点只有一个，节点属性如下（当前比较简单，之后可以再加）。节点的类型是Class，该节点叫做Python。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;properties&quot;</span>:<br>&#123;<br>    <span class="hljs-string">&quot;Title&quot;</span>:(课程的名称)<br>    <span class="hljs-string">&quot;Teacher&quot;</span>: (授课老师)<br>&#125;<br></code></pre></td></tr></table></figure><p>Python节点的子节点的类型都是Theme，代表的是每一讲。第一讲的名字叫做Grammar。每个theme节点都有统一的节点属性，属性内容如下。其中Difficulty,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;properties&quot;</span>:<br>&#123;<br>    <span class="hljs-string">&quot;Title&quot;</span>: (该讲的名称)<br>    <span class="hljs-string">&quot;Difficulty&quot;</span>: (该讲难易度)<br>    <span class="hljs-string">&quot;Importance&quot;</span>: (该讲应当掌握的重要程度)<br>    <span class="hljs-string">&quot;Mastery&quot;</span>:(学生的掌握程度)<br>    <span class="hljs-string">&quot;Weights&quot;</span>:(培养计划中所占的权重)<br>    <span class="hljs-string">&quot;Teached&quot;</span>:(是否已经讲解)<br>&#125;<br></code></pre></td></tr></table></figure><p>Theme类型的子节点的类型都是Knowledge，也就是知识类型。第一讲所包含的知识点如下图。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\自动组卷系统\image-20211012143235855.png" alt="image-20211012143235855"></p><p>Knowledge节点的属性内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;properties&quot;</span>:<br>&#123;<br>    <span class="hljs-string">&quot;Title&quot;</span>: (该讲的名称)<br>    <span class="hljs-string">&quot;Difficulty&quot;</span>: (该讲难易度)<br>    <span class="hljs-string">&quot;Importance&quot;</span>: (该讲应当掌握的重要程度)<br>    <span class="hljs-string">&quot;Mastery&quot;</span>:(学生的掌握程度)<br>    <span class="hljs-string">&quot;Weights&quot;</span>:(培养计划中所占的权重)<br>    <span class="hljs-string">&quot;Teached&quot;</span>:(是否已经讲解)<br>&#125;<br></code></pre></td></tr></table></figure><p>Knowledge类型节点的子节点的类型都是Point，就是小的知识点了。例如<code>Python内置函数</code>的知识点就包括<code>类型转换与类型判断</code>等。</p><p>Point节点的属性内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;properties&quot;</span>:<br>&#123;<br>    <span class="hljs-string">&quot;Title&quot;</span>: (该讲的名称)<br>    <span class="hljs-string">&quot;Difficulty&quot;</span>: (该讲难易度)<br>    <span class="hljs-string">&quot;Importance&quot;</span>: (该讲应当掌握的重要程度)<br>    <span class="hljs-string">&quot;Mastery&quot;</span>:(学生的掌握程度)<br>    <span class="hljs-string">&quot;Weights&quot;</span>:(培养计划中所占的权重)<br>    <span class="hljs-string">&quot;Teached&quot;</span>:(是否已经讲解)<br>&#125;<br></code></pre></td></tr></table></figure><p>Point节点的子节点的类型都是Test，代表练习题。</p><p>Test节点的属性内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;properties&quot;</span>:<br>&#123;<br><span class="hljs-string">&quot;Type&quot;</span>：（该习题的习题类型）<br>    <span class="hljs-string">&quot;Difficulty&quot;</span>: (该题目难易度)<br>    <span class="hljs-string">&quot;Importance&quot;</span>: (该题目的重要程度)<br>    <span class="hljs-string">&quot;HomeworkTimes&quot;</span>:(在作业中出现过几次)<br>    <span class="hljs-string">&quot;WrongTimes&quot;</span>:(在作业中被做错的次数)<br>    <span class="hljs-string">&quot;ExamTimes&quot;</span>:(在前几年的考试中总共出现的次数)<br>    <span class="hljs-string">&quot;Teached&quot;</span>:(是否已经讲解)<br>    <span class="hljs-string">&quot;Content&quot;</span>: (该习题的具体内容)<br>    <span class="hljs-string">&quot;Answer&quot;</span>:(该题目的答案)<br>&#125;<br></code></pre></td></tr></table></figure><p>创建各个节点的代码如下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">Create (Python:Class &#123;title:&#x27;Python数据处理编程&#x27;, Teacher:&#x27;蒋万春&#x27;&#125;)<br>CREATE (Grammar:Theme &#123;title:&#x27;Python语法基础&#x27;,Difficulty:2,importance:5&#125;)<br>Create (InFunction:Knowledge &#123;title:&#x27;Python内置函数&#x27;,Difficulty:2,importance:5&#125;)<br>Create (TypeChangeJudge:Point &#123;title:&#x27;类型转换与判断&#x27;,Difficulty:2,importance:5&#125;)<br>Create (Test1:Test &#123;title:&#x27;test1&#x27;,type:1,Dificulty:2,Content:&#x27;bin(555)的答案是\nA.0b1000101011\tB.100101011\tC.0b1000101010\tD.1000101010&#x27;&#125;)<br><span class="hljs-keyword">Create</span> (Python)<span class="hljs-operator">-</span>[:include]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(Grammar)<span class="hljs-operator">-</span>[:include]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(InFunction)<span class="hljs-operator">-</span>[:include]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(TypeChangeJudge)<br>Create (n:Knowledge &#123;title:&#x27;运算符与表达式&#x27;,Difficulty:3,importance:4&#125;)<br>Create (p:Point &#123;title:&#x27;算数运算符&#x27;,Difficulty:3,importance:4&#125;)<br>Create (t:Test &#123;title:&#x27;test2&#x27;,type:2,Dificulty:2,Content:&#x27;3**2的答案是&#x27;&#125;);<br><br></code></pre></td></tr></table></figure><p>之后创建各个节点之间的连接</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">match (k:Knowledge&#123;title:&quot;运算符与表达式&quot;&#125;),(t:Theme&#123;title:&quot;Python语法基础&quot;&#125;) create (t)-[:include]-&gt;(k)<br>match (t:Test&#123;title:&quot;test2&quot;&#125;),(p:Point&#123;title:&quot;算数运算符&quot;&#125;),(k:Knowledge&#123;title:&quot;运算符与表达式&quot;&#125;) create (k)-[:include]-&gt;(p)-[:include]-&gt;(t);<br></code></pre></td></tr></table></figure><p>搭建的基本的图结构如下图所示。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\自动组卷系统\image-20211012154800153.png" alt="image-20211012154800153" style="zoom:50%;" /><h3 id="使用python连接neo4j数据库"><a href="#使用python连接neo4j数据库" class="headerlink" title="使用python连接neo4j数据库"></a>使用python连接neo4j数据库</h3><p>首先是搭建环境，使用的neo4j的版本是3.3.3所以需要使用较低版本的各种python的库。</p><p>安装的python的版本是3.7.经过多次调试，使用如下命令安装neo4j的相关包是可以成功的。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install py<span class="hljs-number">2</span>neo==<span class="hljs-number">4</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">pip</span> install neo<span class="hljs-number">4</span>j-driver==<span class="hljs-number">1</span>.<span class="hljs-number">5</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>重点使用py2neo包对图数据库的内容进行查找和操作。测试代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> py2neo <span class="hljs-keyword">import</span> Graph,Node,Relationship<br>graph = Graph(<span class="hljs-string">&quot;http://localhost:7474&quot;</span>,auth=(<span class="hljs-string">&quot;neo4j&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>))<br>a = Node(<span class="hljs-string">&quot;Person&quot;</span>, name=<span class="hljs-string">&quot;Alice&quot;</span>)<br>b = Node(<span class="hljs-string">&quot;Person&quot;</span>, name=<span class="hljs-string">&quot;Bob&quot;</span>)<br>ab = Relationship(a, <span class="hljs-string">&quot;KNOWS&quot;</span>, b)<br>graph.create(ab)<br></code></pre></td></tr></table></figure><p>出现如下结果则证明环境已经安装完成。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\自动组卷系统\image-20211013130646335.png" alt="image-20211013130646335" style="zoom:50%;" /><h3 id="python进行控制台系统设计"><a href="#python进行控制台系统设计" class="headerlink" title="python进行控制台系统设计"></a>python进行控制台系统设计</h3><h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><ol><li>插入层节点</li><li>插入题目</li><li>出卷</li><li>退出</li></ol><h4 id="插入层节点设计"><a href="#插入层节点设计" class="headerlink" title="插入层节点设计"></a>插入层节点设计</h4><p>因为Class节点只有一个，所以就手动创建了，之后系统只需要创建Theme、Knowledge、Point这三种层节点。在创建层节点的同时需要同时创建该层节点和上一个层节点的连接。</p><h3 id="Django的相关知识"><a href="#Django的相关知识" class="headerlink" title="Django的相关知识"></a>Django的相关知识</h3><h4 id="项目的urls-py和app内的urls-py的区别"><a href="#项目的urls-py和app内的urls-py的区别" class="headerlink" title="项目的urls.py和app内的urls.py的区别"></a>项目的urls.py和app内的urls.py的区别</h4><p>在一个项目中，通常不会只有一个app，如果把所有的 app 的 views 中的视图都放在 urls.py 中进行映射，会让代码显得非常乱。因此 django 给我们提供了一个方法，可以在 app 内部包含自己的 url 匹配规则，而在项目的 urls.py 中再统一包含这个 app 的 urls 。使用这个技术需要借助 include 函数。</p><p><strong>应用中的urls.py文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br> <br><span class="hljs-keyword">from</span> demo <span class="hljs-keyword">import</span> views<br> <br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^receive/&#x27;</span>, views.receive),<br> <br>]<br></code></pre></td></tr></table></figure><p><strong>项目中的urls.py文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br> <br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^admin/&#x27;</span>, admin.site.urls),<br>    <span class="hljs-comment"># 自动同步的demo</span><br>    url(<span class="hljs-string">r&#x27;^demo/&#x27;</span>, include(<span class="hljs-string">&#x27;demo.urls&#x27;</span>)),<br>]<br><br></code></pre></td></tr></table></figure><h4 id="django的url匹配问题"><a href="#django的url匹配问题" class="headerlink" title="django的url匹配问题"></a>django的url匹配问题</h4><p><a href="https://www.cnblogs.com/JiangLe/p/9197874.html">https://www.cnblogs.com/JiangLe/p/9197874.html</a> 和<a href="https://blog.csdn.net/J_wb49/article/details/103055521%E8%BF%99%E4%B8%A4%E7%AF%87%E6%96%87%E7%AB%A0%E4%BB%8B%E7%BB%8D%E4%BA%86%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2%E5%9C%A8%E5%A4%9A%E4%B8%AAapp%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9B%B8%E5%90%8C%E5%91%BD%E5%90%8D%E7%9A%84html%E6%96%87%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82">https://blog.csdn.net/J_wb49/article/details/103055521这两篇文章介绍了如何防止在多个app中出现相同命名的html文件的问题。</a></p><h4 id="如何设置django的日志系统进行调试"><a href="#如何设置django的日志系统进行调试" class="headerlink" title="如何设置django的日志系统进行调试"></a>如何设置django的日志系统进行调试</h4><p>在<code>settings.py</code>文件中加入如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> django.utils.log<br><span class="hljs-keyword">import</span> logging.handlers<br><span class="hljs-comment"># 添加日志的打印项</span><br>log_path = os.path.join(BASE_DIR, <span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(log_path):<br>    os.makedirs(<span class="hljs-string">&quot;logs&quot;</span>)<br><br>LOGGING = &#123;<br>    <span class="hljs-string">&#x27;version&#x27;</span>: <span class="hljs-number">1</span>,  <span class="hljs-comment"># 保留字</span><br>    <span class="hljs-string">&#x27;disable_existing_loggers&#x27;</span>: <span class="hljs-literal">False</span>,  <span class="hljs-comment"># 禁用已经存在的logger实例</span><br>    <span class="hljs-comment"># 日志文件的格式</span><br>    <span class="hljs-string">&#x27;formatters&#x27;</span>: &#123;<br>        <span class="hljs-comment"># 详细的日志格式</span><br>        <span class="hljs-string">&#x27;standard&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&#x27;</span><br>                      <span class="hljs-string">&#x27;[%(levelname)s][%(message)s]&#x27;</span><br>        &#125;,<br>        <span class="hljs-comment"># 简单的日志格式</span><br>        <span class="hljs-string">&#x27;simple&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&#x27;</span><br>        &#125;,<br>        <span class="hljs-comment"># 定义一个特殊的日志格式</span><br>        <span class="hljs-string">&#x27;collect&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;%(message)s&#x27;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment"># 过滤器</span><br>    <span class="hljs-string">&#x27;filters&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;require_debug_true&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;()&#x27;</span>: <span class="hljs-string">&#x27;django.utils.log.RequireDebugTrue&#x27;</span>,<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-comment"># 处理器</span><br>    <span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;console&#x27;</span>: &#123;     <span class="hljs-comment"># 在终端打印</span><br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>            <span class="hljs-string">&#x27;filters&#x27;</span>: [<span class="hljs-string">&#x27;require_debug_true&#x27;</span>],  <span class="hljs-comment"># 只有在Django debug为True时才在屏幕打印日志</span><br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.StreamHandler&#x27;</span>,  <span class="hljs-comment">#</span><br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;simple&#x27;</span><br>        &#125;,<br>        <span class="hljs-string">&#x27;default&#x27;</span>: &#123;    <span class="hljs-comment"># 默认的</span><br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="hljs-comment"># 保存到文件，自动切</span><br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(BASE_DIR+<span class="hljs-string">&#x27;/logs/&#x27;</span>, <span class="hljs-string">&quot;all.log&quot;</span>),  <span class="hljs-comment"># 日志文件</span><br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>,                    <span class="hljs-comment"># 日志大小 50M</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">3</span>,                                <span class="hljs-comment"># 最多备份几个</span><br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,<br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;error&#x27;</span>: &#123;   <span class="hljs-comment"># 专门用来记错误日志</span><br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="hljs-comment"># 保存到文件，自动切</span><br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(BASE_DIR+<span class="hljs-string">&#x27;/logs/&#x27;</span>, <span class="hljs-string">&quot;error.log&quot;</span>),  <span class="hljs-comment"># 日志文件</span><br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>,  <span class="hljs-comment"># 日志大小 50M</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,<br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;collect&#x27;</span>: &#123;   <span class="hljs-comment"># 专门定义一个收集特定信息的日志</span><br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="hljs-comment"># 保存到文件，自动切</span><br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(BASE_DIR+<span class="hljs-string">&#x27;/logs/&#x27;</span>, <span class="hljs-string">&quot;collect.log&quot;</span>),<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>,  <span class="hljs-comment"># 日志大小 50M</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;collect&#x27;</span>,<br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&quot;utf-8&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&#x27;scprits_handler&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>:<span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(BASE_DIR+<span class="hljs-string">&#x27;/logs/&#x27;</span>, <span class="hljs-string">&quot;script.log&quot;</span>),<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">5</span>,<br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>:<span class="hljs-string">&#x27;standard&#x27;</span>,<br>        &#125;<br>    &#125;,<br>    <span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;django&#x27;</span>: &#123;             <span class="hljs-comment"># 默认的logger应用如下配置</span><br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;default&#x27;</span>, <span class="hljs-string">&#x27;console&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>],  <span class="hljs-comment"># 上线之后可以把&#x27;console&#x27;移除</span><br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span>,  <span class="hljs-comment"># 向不向更高级别的logger传递</span><br>        &#125;,<br>        <span class="hljs-string">&#x27;collect&#x27;</span>: &#123;      <span class="hljs-comment"># 名为 &#x27;collect&#x27;的logger还单独处理</span><br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;console&#x27;</span>, <span class="hljs-string">&#x27;collect&#x27;</span>],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;scripts&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;scprits_handler&#x27;</span>],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">False</span><br>        &#125;,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>之后再在需要使用的地方加入如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br>logger = logging.getLogger(<span class="hljs-string">&#x27;django&#x27;</span>)<br>logger.info(xxxx)<br></code></pre></td></tr></table></figure><p>就可以在文件中看到你想要看到的调试结果了。</p><h3 id="如何在pycharm中远程调试服务器的django项目"><a href="#如何在pycharm中远程调试服务器的django项目" class="headerlink" title="如何在pycharm中远程调试服务器的django项目"></a>如何在pycharm中远程调试服务器的django项目</h3><h3 id="使用Django-Uwsgi-nginx搭建前后端平台"><a href="#使用Django-Uwsgi-nginx搭建前后端平台" class="headerlink" title="使用Django+Uwsgi+nginx搭建前后端平台"></a>使用Django+Uwsgi+nginx搭建前后端平台</h3><p><a href="https://github.com/jiangnanboy/movie_knowledge_graph_app">jiangnanboy/movie_knowledge_graph_app: 电影知识图谱，主要包括实体识别、实体查询、关系查询以及智能问答等。movie knowledge graph(Entity identification, graph display, and intelligent question and answer) (github.com)</a>作为主要前端参考的github项目。</p><p><a href="https://neo4j-examples.github.io/paradise-papers-django/%E6%98%AF%E6%95%B4%E4%BD%93%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%8F%82%E8%80%83">https://neo4j-examples.github.io/paradise-papers-django/是整体项目的参考</a></p><h4 id="在django项目中连接到服务器的neo4j数据库"><a href="#在django项目中连接到服务器的neo4j数据库" class="headerlink" title="在django项目中连接到服务器的neo4j数据库"></a>在django项目中连接到服务器的neo4j数据库</h4><p>在<code>settings.py</code>文件中引入了<code>neomodel</code>文件，用于直接在django中连接neo4j数据库。在文件中加入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">config.DATABASE_URL = <span class="hljs-string">&#x27;bolt://neo4j:neo4j@1.15.187.75:7687&#x27;</span><br></code></pre></td></tr></table></figure><p>关于neomodel包的使用见<a href="https://juejin.cn/post/6844904005060165646%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0">https://juejin.cn/post/6844904005060165646这篇文章</a></p><h4 id="配置django的static文件"><a href="#配置django的static文件" class="headerlink" title="配置django的static文件"></a>配置django的static文件</h4><p>首先就遇到了一个问题，如何在nginx+django中搭建管理静态文件的环境。这个问题整整调了三个小时。</p><p>问题描述：在django中用 <code>python manage.py runserver 0.0.0.0:80</code>命令可以成功显示静态文件，但是使用nginx之后就不可以了。</p><p>解决办法：</p><ol><li><p>配置nginx的配置文件：这里需要注意这是django项目目录下的static文件，最后要加上一个“/”</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\自动组卷系统\image-20211020165009512.png" alt="image-20211020165009512"></p></li><li><p>在项目中的<code>urls.py</code>中添加如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib.staticfiles.views <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> re_path<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">return_static</span>(<span class="hljs-params">request, path, insecure=<span class="hljs-literal">True</span>, **kwargs</span>):</span><br>  <span class="hljs-keyword">return</span> serve(request, path, insecure, **kwargs)<br> <br>urlpatterns = [<br>  ...<br>  re_path(<span class="hljs-string">r&#x27;^static/(?P&lt;path&gt;.*)$&#x27;</span>, return_static, name=<span class="hljs-string">&#x27;static&#x27;</span>), <span class="hljs-comment"># 添加这行</span><br>]<br></code></pre></td></tr></table></figure></li><li><p>修改setting.py中的有关static_url中的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">STATIC_URL = <span class="hljs-string">&#x27;/static/&#x27;</span><br><br>STATICFILES_DIRS = [<br>    os.path.join(BASE_DIR, <span class="hljs-string">&quot;static&quot;</span>),<br>]<br><br>STATIC_ROOT = os.path.join(BASE_DIR, <span class="hljs-string">&#x27;collect_static/&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><h4 id="设置models"><a href="#设置models" class="headerlink" title="设置models"></a>设置models</h4><p>首先在app中新建一个models的文件夹，然后在models中创建所需要的类。</p><p>models是django所用到的数据类型，需要对每个节点的类型都设置一个单独的model。models文件夹的内容如下。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\自动组卷系统\image-20211026220958331.png" alt="image-20211026220958331" style="zoom:50%;" /><p>里面把neo4j数据库中的所有类型的节点都变成以python类的形式存在，方便直接进行节点的调用。为了在首页进行显示的时候区分Class节点和其他类型的知识节点，所以每个节点内都设置了<code>attributes</code>属性，用于区分两者的区别<code>Point.py</code>的具体内容如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> neomodel <span class="hljs-keyword">import</span> (<br>    StringProperty,<br>    StructuredNode,<br>    RelationshipFrom,<br>    IntegerProperty,<br>    RelationshipTo,<br>)<br><br><span class="hljs-keyword">from</span> .nodeutils <span class="hljs-keyword">import</span> NodeUtils<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>(<span class="hljs-params">StructuredNode, NodeUtils</span>):</span><br>    <span class="hljs-built_in">type</span> = <span class="hljs-string">&#x27;Point&#x27;</span><br>    title = StringProperty()<br>    Difficulty = IntegerProperty()<br>    Importance = IntegerProperty()<br>    <span class="hljs-built_in">id</span>= IntegerProperty(index=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 下面这两个属性用于生成关系</span><br>    <span class="hljs-comment"># knowledges = RelationshipFrom(&#x27;.Knowledge.Knowledge&#x27;, &#x27;include&#x27;)</span><br>    tests = RelationshipTo(<span class="hljs-string">&#x27;.Test.Test&#x27;</span>, <span class="hljs-string">&#x27;relate&#x27;</span>)<br><br>    <span class="hljs-comment"># serialize可以以字典的形式返回数据</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">serialize</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">&#x27;node_properties&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;type&#x27;</span> : self.<span class="hljs-built_in">type</span>,<br>                <span class="hljs-string">&#x27;title&#x27;</span>: self.title,<br>                <span class="hljs-string">&#x27;id&#x27;</span>: self.<span class="hljs-built_in">id</span>,<br>                <span class="hljs-string">&#x27;attributes&#x27;</span>:&#123;<br>                    <span class="hljs-string">&#x27;Difficulty&#x27;</span>: self.Difficulty,<br>                    <span class="hljs-string">&#x27;Importance&#x27;</span>: self.Importance,<br>                &#125;<br>            &#125;,<br>        &#125;<br>    <span class="hljs-comment">#以字典的形式返回所有和该节点连接的节点</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">serialize_connections</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> [<br>            &#123;<br>                <span class="hljs-string">&#x27;nodes_type&#x27;</span>: <span class="hljs-string">&#x27;Test&#x27;</span>,<br>                <span class="hljs-string">&#x27;nodes_related&#x27;</span>: self.serialize_relationships(self.tests.<span class="hljs-built_in">all</span>()),<br>            &#125;,<br>    ]<br></code></pre></td></tr></table></figure><p>在djano的项目中，setting设置连接了neo4j数据库之后，在代码中直接调用这个类就可以直接连接neo4j数据库了。</p><h2 id="真实使用中的问题"><a href="#真实使用中的问题" class="headerlink" title="真实使用中的问题"></a>真实使用中的问题</h2><h3 id="常用命令集合"><a href="#常用命令集合" class="headerlink" title="常用命令集合"></a>常用命令集合</h3><ol><li><p>部分学生由于选课的问题并没有被导入教务系统的名单，需要手动导入</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">CREATE(<span class="hljs-params">n</span>:Student &#123;<span class="hljs-params">name</span>:&#x27;虞昊泽&#x27;, <span class="hljs-params">gender</span>:1,<span class="hljs-params">username</span>:&#x27;8204201928&#x27;,<span class="hljs-params">password</span>:&#x27;8204201928&#x27;,<span class="hljs-params">study_class</span>:<span class="hljs-string">&quot;计算机2002&quot;</span>,<span class="hljs-params">test_num</span>:0,<span class="hljs-params">test_right_num</span>:0&#125;)</span><br></code></pre></td></tr></table></figure></li><li><p>删除某个学生的相关的边</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">match</span> (n)-[r]-&gt;(m)<br><span class="hljs-keyword">where</span> n.name=<span class="hljs-string">&quot;李扬&quot;</span><br>delete r<br><span class="hljs-keyword">return</span> n<br></code></pre></td></tr></table></figure></li><li></li></ol><h3 id="部分题目的答案录入出错"><a href="#部分题目的答案录入出错" class="headerlink" title="部分题目的答案录入出错"></a>部分题目的答案录入出错</h3><p>在第一次作业中，有三道题的答案录入出错</p><h3 id="编程题没有办法分开编译错误和程序错误（能不能跑起来和跑起来之后答案对不对）"><a href="#编程题没有办法分开编译错误和程序错误（能不能跑起来和跑起来之后答案对不对）" class="headerlink" title="编程题没有办法分开编译错误和程序错误（能不能跑起来和跑起来之后答案对不对）"></a>编程题没有办法分开编译错误和程序错误（能不能跑起来和跑起来之后答案对不对）</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>算法笔记</title>
    <link href="/2021/05/20/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/05/20/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>本人目前大三在读，为了对考研的机试做好准备，特此写博客对算法进行总结。本博客主要是根据《算法笔记》这本书进行复习。并且作者已经有了C语言的一定基础。</p><h1 id="算法笔记-第一章"><a href="#算法笔记-第一章" class="headerlink" title="算法笔记-第一章"></a>算法笔记-第一章</h1><p>算法笔记第一章主要就是介绍了本书使用的题目来源分别是<a href="https://www.patest.cn/">PAT 计算机程序设计能力考试 (patest.cn)</a>和<a href="https://www.codeup.cn/">酷哒学习平台 (codeup.cn)</a>并介绍了主要使用的语言是C和C++。</p><p>好像目前codeup没有办法使用了，所以找到了<a href="http://codeup.hustoj.com/">华中科技大学的题目备份网站</a>在里面可以进行算法笔记相关题目的练习。</p><p>由于本人有一定的C语言基础，所以对第二章就不做过多的介绍了</p><h1 id="算法笔记-第三章：入门模拟"><a href="#算法笔记-第三章：入门模拟" class="headerlink" title="算法笔记-第三章：入门模拟"></a>算法笔记-第三章：入门模拟</h1><p>入门模拟主要用来熟悉一下编辑环境还有两个网站的风格，所以还是决定试一试。</p><h2 id="简单模拟"><a href="#简单模拟" class="headerlink" title="简单模拟"></a>简单模拟</h2><p>两个简单的模拟熟悉一下风格</p><blockquote><p><strong><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528">1001 害死人不偿命的(3n+1)猜想</a></strong></p><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>=1？</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></blockquote><p>首先就Visual Studio的环境就配置了挺久的，重点是记得一定要在项目的源文件里创建cpp文件，不要乱搞。</p><p><img src="/images/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20210520104750931.png" alt="image-20210520104750931"></p><p>并且在Visual Studio2019中，使用scanf可能回出现问题，所以需要在文件首行加上<code>#define _CRT_SECURE_NO_WARNINGS</code></p><p>具体代码如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;cstdio&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">//读入输入的数据</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="comment">//轮次记录</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; n != <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">n = n / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032">1032 挖掘机技术哪家强</a>*</p><p>为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第 1 行给出不超过 105 的正整数 <em>N</em>，即参赛人数。随后 <em>N</em> 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 65</span><br><span class="line">2 80</span><br><span class="line">1 100</span><br><span class="line">2 70</span><br><span class="line">3 40</span><br><span class="line">3 0</span><br></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 150</span><br></pre></td></tr></table></figure></blockquote><p>解决代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">//记录所有得分的数组</span></span><br><span class="line"><span class="keyword">int</span> S[<span class="number">100010</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//记录最高得分</span></span><br><span class="line"><span class="keyword">int</span> max_score = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//记录最高的单位</span></span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//输入的行数</span></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="comment">//记录目前输入</span></span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> t_score = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"><span class="keyword">while</span> (N != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;t, &amp;t_score);</span><br><span class="line">S[t] = S[t] + t_score;</span><br><span class="line"><span class="keyword">if</span> (S[t] &gt; max_score)</span><br><span class="line">&#123;</span><br><span class="line">max = t;</span><br><span class="line">max_score = S[t];</span><br><span class="line">&#125;</span><br><span class="line">N--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,max, S[max]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>通常查找较多元素的时候使用二分法，下面例题用于训练二分法查找。由于书中的例子是遍历查找的，所以将下面的例子换成了PAT中的二分查找的例子</p><blockquote><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805432256675840"><strong>1048 Find Coins</strong></a><br>Eva loves to collect coins from all over the universe, including some other planets like Mars. One day she visited a universal shopping mall which could accept all kinds of coins as payments. However, there was a special requirement of the payment: for each bill, she could only use exactly two coins to pay the exact amount. Since she has as many as 105 coins with her, she definitely needs your help. You are supposed to tell her, for any given amount of money, whether or not she can find two coins to pay for it.</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>Each input file contains one test case. For each case, the first line contains 2 positive numbers: <em>N</em> (≤$10^5$, the total number of coins) and <em>M</em> (≤$10^3$, the amount of money Eva has to pay). The second line contains <em>N</em> face values of the coins, which are all positive numbers no more than 500. All the numbers in a line are separated by a space.</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>For each test case, print in one line the two face values $V_1$ and $V_2$ (separated by a space) such that  $V_1$ + $V_2$ =M and  $V_1$ ≤$V_2$. If such a solution is not unique, output the one with the smallest  $V_1$ . If there is no solution, output <code>No Solution</code> instead.</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 15</span><br><span class="line">1 2 8 7 2 4 11 15</span><br></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 11</span><br></pre></td></tr></table></figure></blockquote><p>此题目就是给出n个硬币面额，还有一个目标金额m，如果n个硬币面额中存在两个n1 + n2 = m，则输出n1最小的n1、n2组合。如果不存在则输出No Solution。</p><blockquote><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>先将所有硬币从小到大排序，然后逐个选择作为第一个硬币x，令第二个硬币y=m-x，如果y比500大说明这种情况不可以，如果y比500小则在当前硬币之后的所有硬币中二分查找是否存在数值为y的硬币，如果存在则输出并退出循环，如果不存在则输出No solution。</p></blockquote><p>解决代码如下,其中，二分查找的方法是经常用的，这里使用的是递归的方法进行二分查找。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//递归实现二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bi_find</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> coins[],<span class="keyword">int</span> right,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (coins[mid] == x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (coins[mid] &gt; x) &#123; <span class="keyword">return</span>(<span class="built_in">bi_find</span>(left, coins, mid - <span class="number">1</span>, x)); &#125;</span><br><span class="line"><span class="keyword">if</span> (coins[mid] &lt; x) &#123; <span class="keyword">return</span>(<span class="built_in">bi_find</span>(mid + <span class="number">1</span>, coins, right, x)); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">//n是需要输入的所有硬币的个数，m是需要组成的钱</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">//硬币数组</span></span><br><span class="line"><span class="keyword">int</span> coins[MAX_NUM];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;coins[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从小到大，对coins进行排序</span></span><br><span class="line"><span class="built_in">sort</span>(coins, coins + n);</span><br><span class="line"><span class="comment">//输出结果 v1,v2</span></span><br><span class="line"><span class="keyword">int</span> v1 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> v2 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">v1 = coins[i];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bi_find</span>(i+<span class="number">1</span>, coins,n<span class="number">-1</span>,m-v1)) &#123;</span><br><span class="line">v2 = m - v1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (v2 != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, v1, v2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (v2 == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No Solution&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图形输出"><a href="#图形输出" class="headerlink" title="图形输出"></a>图形输出</h2><p>在有些题目中，题目会给定一些规则，需要考生根据规则来进行画图。所谓图形，其实是由若干字符组成的，因此只需要弄清楚规则就能编写代码。这种题目的做法–般有两种:</p><ol><li>通过规律直接输出</li><li>通过二维字符数组输出</li></ol><p>下面是PAT中的一个例子。</p><blockquote><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805285812551680"><strong>1036 跟奥巴马一起编程</strong></a> </p><p>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</p><h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出正方形边长 <em>N</em>（3≤<em>N</em>≤20）和组成正方形边的某种字符 C，间隔一个空格。</p><h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。</p><h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 a</span><br></pre></td></tr></table></figure><h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure></blockquote><p>就是一个简单的输出正方形的题，这里我感觉比较重要的是需要学会用c++，来进行四舍五入的判断。首先需要导入的是<code>math.h</code>包，之后使用<code>round(n / 2.0)</code>运算对值进行四舍五入，其中最重要一点是除数需要是<strong>2.0</strong>，即一个小数，这样n是整型的话才可以。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">//输入正方形边长</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">//输入字符c</span></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>, &amp;n,&amp;c);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//这里用于对行数进行四舍五入取整</span></span><br><span class="line"><span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">row = <span class="built_in">round</span>(n / <span class="number">2.0</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span> || i==row<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span> || j== n<span class="number">-1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c); &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>); &#125;</span><br><span class="line"><span class="keyword">if</span> (j == n - <span class="number">1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日期问题"><a href="#日期问题" class="headerlink" title="日期问题"></a>日期问题</h2><p>日期问题主要还是需要对闰年进行判断。</p><blockquote><p><a href="http://codeup.hustoj.com/problem.php?cid=100000578&pid=0">日期差值</a></p><p>有两个日期，求两个日期之间的天数，如果两个日期是连续的我们规定他们之间的天数为两天。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>有多组数据，每组数据有两行，分别表示两个日期，形式为YYYYMMDD</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>每组数据输出一行，即日期差值</p><h3 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20130101</span><br><span class="line">20130105</span><br></pre></td></tr></table></figure><h3 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></blockquote><p>这种求日期之间相差天数的题目有一一个很直接的思路，即令日期不断加1天，直到第一个日期等于第二个日期为止，即可统计出答案。具体处理时，如果当加了一天之后天数d 等于当前月份m所拥有的天数加1，那么就令月份m加1、同时置天数d为1号(即把日期变于当前月份m所拥有的天数加1，那么就令月份m加1、同时置天数d为1号(即把日期变为下一个月的1号);如果此时月份m变为了13，那么就令年份y加1、同时置月份m为1月(即把日期变为下一年的1月)。<br>为了方便直接取出每个月的天数，不妨给定一个二维数组<code>int month[13][2]</code>, 用来存放每个月的天数，其中第二维为0时表示平年，为1时表示闰年。<br>注意:如果想要加快速度，只需要先把第-一个 日期的年份不断加1，直到与第二个日期的年份相差1为止(想一想为什么不能直接加到等于第二个日期的年份时才停止? )， 期间根据平年或是闰年来累加365天或者366天即可。之后再进行不断令天数加1的操作。</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">0</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">28</span>, <span class="number">29</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span>((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//编号是1的存储更大的日期</span></span><br><span class="line"><span class="keyword">int</span> time1, time2;</span><br><span class="line"><span class="keyword">int</span> year1, year2, month1, month2, day1, day2;</span><br><span class="line"><span class="comment">//对输入进行取值</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;time1, &amp;time2);</span><br><span class="line"><span class="keyword">if</span> (time1 &lt; time2) &#123;</span><br><span class="line"><span class="keyword">int</span> time = time1;</span><br><span class="line">time1 = time2;</span><br><span class="line">time2 = time;</span><br><span class="line">&#125;</span><br><span class="line">year1 = time1 / <span class="number">10000</span>;</span><br><span class="line">year2 = time2 / <span class="number">10000</span>;</span><br><span class="line">month1 = time1 % <span class="number">10000</span> / <span class="number">100</span>;</span><br><span class="line">month2 = time2 % <span class="number">10000</span> / <span class="number">100</span>;</span><br><span class="line">day1 = time1 % <span class="number">100</span>;</span><br><span class="line">day2 = time2 % <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> day = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> isleap = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (year2 != year1 || month2 != month1 || day2 != day1) &#123;</span><br><span class="line"><span class="keyword">if</span> (day2 == month[month2][<span class="built_in">isLeap</span>(year2)]) &#123;</span><br><span class="line">day2 = <span class="number">0</span>;</span><br><span class="line">month2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (month2 == <span class="number">13</span>) &#123;</span><br><span class="line">year2++;</span><br><span class="line">month2 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">day2++;</span><br><span class="line">day++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, day);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="算法笔记-第四章：算法初步"><a href="#算法笔记-第四章：算法初步" class="headerlink" title="算法笔记-第四章：算法初步"></a>算法笔记-第四章：算法初步</h1><p>第三章的内容作为入手所以基本每一个题目都上手敲了一遍，第四章的内容就只会捡着重点敲一下了。</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><strong>算法逻辑</strong>：总共需要进行$n(1\le i \le n)$趟操作,每趟操作选出待排序部分$[i,n]$中最小的元素，令其与$A[i]$交换。复杂度是$O(n^2)$.</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>关于插入排序的内容，看下面的几个图就可以了。</p><p><img src="/images/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20210526192254889.png" alt="image-20210526192254889"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20210526192324752.png" alt="image-20210526192324752"></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>介绍一下书中没有提到的快速排序的问题。</p><p>快速排序算法是一种基于交换的高效的排序算法，它采用了<strong>分治法</strong>的思想：</p><ol><li>从数列中取出一个数作为基准数（枢轴，pivot）。 </li><li>将数组进行划分(partition)，将比基准数大的元素都移至枢轴右边，将小于等于基准数的元素都移至枢轴左边。</li><li>再对左右的子区间重复第二步的划分操作，直至每个子区间只有一个元素。</li></ol><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span>  <span class="comment">//找基准数 划分</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = left + <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">int</span> j = right;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[left];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[i] &lt; temp)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (arr[j] &gt; temp )</span><br><span class="line">        &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">            <span class="built_in">swap</span>(arr[i++], arr[j--]);</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(arr[j], arr[left]);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="built_in">partition</span>(arr, left, right);</span><br><span class="line">    <span class="built_in">quick_sort</span>(arr, left, j - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">quick_sort</span>(arr, j + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序题与sort函数的应用"><a href="#排序题与sort函数的应用" class="headerlink" title="排序题与sort函数的应用"></a>排序题与sort函数的应用</h3><p>在笔试的过程中常常会涉及到对各种不同的结构体进行排序的情况，这个时候就需要自己完成sort函数的排序规则即<strong>自己完成cmp函数</strong>的定义。sort函数是C++中的一个库，可以很方便的进行调用。下面看一个PAT的例子。</p><blockquote><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805474338127872"><strong>1025 PAT Ranking</strong></a></p><p>Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is supposed to run simultaneously in several places, and the ranklists will be merged immediately after the test. Now it is your job to write a program to correctly merge all the ranklists and generate the final rank.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive number <em>N</em> (≤100), the number of test locations. Then <em>N</em> ranklists follow, each starts with a line containing a positive integer <em>K</em> (≤300), the number of testees, and then <em>K</em> lines containing the registration number (a 13-digit number) and the total score of each testee. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in one line the total number of testees. Then print the final ranklist in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registration_number final_rank location_number local_rank</span><br></pre></td></tr></table></figure><p>The locations are numbered from 1 to <em>N</em>. The output must be sorted in nondecreasing order of the final ranks. The testees with the same score must have the same rank, and the output must be sorted in nondecreasing order of their registration numbers.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">1234567890001 95</span><br><span class="line">1234567890005 100</span><br><span class="line">1234567890003 95</span><br><span class="line">1234567890002 77</span><br><span class="line">1234567890004 85</span><br><span class="line">4</span><br><span class="line">1234567890013 65</span><br><span class="line">1234567890011 25</span><br><span class="line">1234567890014 100</span><br><span class="line">1234567890012 85</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">1234567890005 1 1 1</span><br><span class="line">1234567890014 1 2 1</span><br><span class="line">1234567890001 3 1 2</span><br><span class="line">1234567890003 3 1 2</span><br><span class="line">1234567890004 5 1 4</span><br><span class="line">1234567890012 5 2 2</span><br><span class="line">1234567890002 7 1 5</span><br><span class="line">1234567890013 8 2 3</span><br><span class="line">1234567890011 9 2 4</span><br></pre></td></tr></table></figure></blockquote><p>该题目需要注意的点如下：</p><ol><li>自己创建结构类型，熟悉结构类型的操作</li><li>c++中的sort函数以及自定义比较大小的方法</li><li>由于用户id是13位的，所以使用<code>long long int</code>的类型</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 30010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll <span class="keyword">int</span> registration_number;</span><br><span class="line"><span class="keyword">int</span> final_rank;</span><br><span class="line"><span class="keyword">int</span> location_number;</span><br><span class="line"><span class="keyword">int</span> local_rank;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//自定义比较大小</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.score != b.score) &#123; <span class="keyword">return</span> a.score &gt; b.score; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a.registration_number &lt; b.registration_number;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Student stu[MAX_NUM];</span><br><span class="line"><span class="comment">//输入地址个数</span></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//记录学生总数</span></span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> s1 = s;</span><br><span class="line"><span class="keyword">int</span> K = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;K);</span><br><span class="line"><span class="comment">//读入学生信息</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; K; j++) &#123;</span><br><span class="line">stu[s].location_number = i+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld %d&quot;</span>, &amp;stu[s].registration_number, &amp;stu[s].score);</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s2 = s;</span><br><span class="line"><span class="comment">//对这一个地区的进行排序</span></span><br><span class="line"><span class="built_in">sort</span>(stu + s1, stu + s2,cmp);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; K; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j!=<span class="number">0</span> &amp;&amp; stu[s1 + j].score == stu[s1 + j - <span class="number">1</span>].score) &#123; stu[s1 + j].local_rank = stu[s1 + j - <span class="number">1</span>].local_rank; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; stu[s1 + j].local_rank = j + <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对所有学生总排序，然后记录排名</span></span><br><span class="line"><span class="built_in">sort</span>(stu, stu + s, cmp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; stu[i].score == stu[i<span class="number">-1</span>].score) &#123; stu[i].final_rank = stu[i - <span class="number">1</span>].final_rank; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; stu[i].final_rank = i + <span class="number">1</span>; &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %d %d %d\n&quot;</span>,stu[i].registration_number,stu[i].final_rank,stu[i].location_number,stu[i].local_rank);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用以上代码进行提交的时候，发现最后一个例子总是过不去，所以将用户id的类型改写成了字符串的类型，重点记得要修改字符串比较大小的方式。最后成功通过。</p><h2 id="散列——Hash"><a href="#散列——Hash" class="headerlink" title="散列——Hash"></a>散列——Hash</h2><h3 id="hash的定义与整数散列"><a href="#hash的定义与整数散列" class="headerlink" title="hash的定义与整数散列"></a>hash的定义与整数散列</h3><p><strong>思路</strong>：<u>创建hashTable用空间换取时间，那就是直接把输入的数作为数组的下标来对这个数的性质进行统计</u>。散列：“将元素通过一个函数转换为整数，使得该整数可以尽量唯一 地代表这个元素”。</p><p>常用的散列函数有：</p><ol><li>直接定址法。</li><li>平方取中法。</li><li>除留余数法。</li></ol><p>如何解决散列的地址冲突问题：</p><ul><li>线性探查法</li><li>平方探查法</li><li>链地址法</li></ul><h3 id="字符串hash初步"><a href="#字符串hash初步" class="headerlink" title="字符串hash初步"></a>字符串hash初步</h3><p>hash中的key不是整数，而是字符串的时候。</p><p><img src="/images/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20210527201122751.png" alt="image-20210527201122751"></p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h3><p>分治法的三个步骤：</p><ol><li>分解：将原问题分解为若干和原问题拥有相同或相似结构的子问题。</li><li>解决：递归求解所有子问题。如果存在子问题的规模小到可以直接解决，就直接解决它。</li><li>合并：将子问题的解合并为原问题的解。</li></ol><p>需要指出的是，分治法分解出的子问题应当是相互独立、没有交叉的。如果存在两个子问题有相交部分，那么不应当使用分治法解决。</p><h3 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h3><p>递归逻辑中有两个重要的概念：</p><ol><li>递归边界</li><li>递归式</li></ol><p>递归的经典问题：</p><ol><li>全排列</li><li>八皇后</li></ol><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><h3 id="简单贪心"><a href="#简单贪心" class="headerlink" title="简单贪心"></a>简单贪心</h3><p>贪心法是求解一类最优化问题的方法， 它总是考虑在当前状态下局部最优（或较优）的策略，来使全局的结果达到最优(或较优)。显然，如果采取较优而非最优的策略（最优策略）。</p><p>下面是贪心算法的例题。</p><blockquote><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560"><strong>1023 组个最小数</strong></a></p><p>给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。</p><p>现给定数字，请编写程序输出能够组成的最小的数。</p><h3 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。</p><h3 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出能够组成的最小的数。</p><h3 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 2 0 0 0 3 0 0 1 0</span><br></pre></td></tr></table></figure><h3 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10015558</span><br></pre></td></tr></table></figure></blockquote><p>不是很难，所以直接贴代码了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 60</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> nums[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ans[MAX_NUM] = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] != <span class="number">0</span>) &#123;</span><br><span class="line">ans[j] = i + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">j++;</span><br><span class="line">nums[i]--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(nums[i] != <span class="number">0</span>) &#123;</span><br><span class="line">ans[j] = i + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">j++;</span><br><span class="line">nums[i]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间贪心"><a href="#区间贪心" class="headerlink" title="区间贪心"></a>区间贪心</h3><p>书中的描述蛮有意思的。</p><p><img src="/images/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20210527210523447.png" alt="image-20210527210523447"></p><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>关于二分查找的知识点在上文提到过了，所以不再赘述。</p><p><img src="/images/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20210527211947169.png" alt="image-20210527211947169"></p><h3 id="二分法拓展"><a href="#二分法拓展" class="headerlink" title="二分法拓展"></a>二分法拓展</h3><blockquote><p>求多条边组成的凸边形的外接圆的最大半径</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定 N 个线段的长度，试将它们头尾相接（顺序任意）地组合成一个凸多边形，使得凸多边形的外接圆的半径最大，求该最大半径。其中 N 不超过 105 ，线段长度均不超过 100 ，要求算法中不涉及坐标的计算。</p><h3 id="考查内容"><a href="#考查内容" class="headerlink" title="考查内容"></a>考查内容</h3><p>二分算法的本质就是通过不断迭代使left 和 right 在固定条件下逐渐靠近真实值，符合一定误差，所以实际上把该题放在二分扩展里面，这个所谓的最大半径的“最大”是不在求解中的，最大应该算题干，先组成一个有外接圆的凸多边形，然后求其半径即可。不要误入歧途在“最大”上绞尽脑汁。</p></blockquote><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><h1 id="算法笔记-第五章：数学问题"><a href="#算法笔记-第五章：数学问题" class="headerlink" title="算法笔记-第五章：数学问题"></a>算法笔记-第五章：数学问题</h1><h2 id="简单数学"><a href="#简单数学" class="headerlink" title="简单数学"></a>简单数学</h2><h1 id="算法笔记-第七章：提高篇-1-–数据结构专题（1）"><a href="#算法笔记-第七章：提高篇-1-–数据结构专题（1）" class="headerlink" title="算法笔记-第七章：提高篇(1)–数据结构专题（1）"></a>算法笔记-第七章：提高篇(1)–数据结构专题（1）</h1><h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2>]]></content>
    
    
    
    <tags>
      
      <tag>算法 复习 算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo更换主题</title>
    <link href="/2021/05/13/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/"/>
    <url>/2021/05/13/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo设置插图"><a href="#Hexo设置插图" class="headerlink" title="Hexo设置插图"></a>Hexo设置插图</h1><p>hexo可以很好的结合Typora进行博客文章的插图处理，就只需要两步操作</p><h2 id="设置图片根目录"><a href="#设置图片根目录" class="headerlink" title="设置图片根目录"></a>设置图片根目录</h2><p>打开<code>格式(O)-图像-设置图片根目录</code>，选择<code>source</code>文件夹（就是<code>_posts</code>上一级），确定，这时候回到文件中，可以看到在文章头部出现了这么一行字：<img src="./images/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/image-20210513163932292.png" alt="设置图片根目录"></p><h2 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h2><p>在Typora中设置图像粘贴位置</p><p>打开<code>格式(O)-图像-全局图像设置</code>，在“插入图片时…”选择<strong>复制到指定路径</strong>，然后在下面写入<code>../images/$&#123;filename&#125;</code>（<code>$</code>中的参数是以文件名命名的文件夹），并勾选“优先使用相对路径”。</p><p><img src="./images/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/image-20210513164424278.png" alt="typora更改路径"></p><p>完成上面这两个步骤就可以在自己hexo的主页中看到自己上传的图片了。</p><h1 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h1><p>首先去hexo的主题官网<a href="https://hexo.io/themes/">Themes | Hexo</a>选一个主题，这里就介绍最简单的NEXT主题叭。</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>进入hexo对应的目录，使用git运行以下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/iissnan/</span>hexo-theme-<span class="hljs-keyword">next</span> themes/<span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>git结果如下图</p><p><img src="./images/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/image-20210513184904009.png" alt="下载主题"></p><h2 id="设置主题-1"><a href="#设置主题-1" class="headerlink" title="设置主题"></a>设置主题</h2><p>修改当前目录下的<code>_config.yml</code>文件，找到 theme 字段，并将其值更改为 next。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">theme:</span> <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>然后使用git重新部署网站</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d -g</span><br></code></pre></td></tr></table></figure><p>但是出现了如下错误 <code>&#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro/post.swig‘ as post_template %&#125;</code></p><p><img src="./images/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/image-20210513192500960.png" alt="next出错"></p><p>之后在网上找到该问题的答案，用npm安装swig。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>hexo-renderer-<span class="hljs-keyword">swig </span>--save<br></code></pre></td></tr></table></figure><p>之后就可以看到next的主题风格了。</p><p><img src="./images/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/image-20210513194508921.png" alt="next主页"></p><h2 id="修改网站中的配置文件"><a href="#修改网站中的配置文件" class="headerlink" title="修改网站中的配置文件"></a>修改网站中的配置文件</h2><p>在当前目录下进入对<code>_config.yml</code>文件内容进行修改。</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo插图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为网卡项目1</title>
    <link href="/2021/05/13/%E5%8D%8E%E4%B8%BA%E7%BD%91%E5%8D%A1%E9%A1%B9%E7%9B%AE1/"/>
    <url>/2021/05/13/%E5%8D%8E%E4%B8%BA%E7%BD%91%E5%8D%A1%E9%A1%B9%E7%9B%AE1/</url>
    
    <content type="html"><![CDATA[<h2 id="NVMe-oF概述"><a href="#NVMe-oF概述" class="headerlink" title="NVMe-oF概述"></a>NVMe-oF概述</h2><p>NVMe-oF全称是：Non-Volatile Memory Express over Fabrics。中文的意思是：基于Fabrics的非易失性存储标准。我将Fabric理解为网络架构，RDMA Fabric就有Infiniband，iWARP，RoCEv1，RoCEv2等多种传输协议。</p><h3 id="NVMe-oF和NVMe的关系"><a href="#NVMe-oF和NVMe的关系" class="headerlink" title="NVMe-oF和NVMe的关系"></a>NVMe-oF和NVMe的关系</h3><p>NVMe是什么：NVMe传输是一种抽象协议层，旨在提供可靠的NVMe命令和数据传输，是有关访问非易失性储存（通常是 SSD 磁盘）的接口标准。本质是上建立了多个计算机与存储设备的通路，提高搬运数据的速度。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211230163244922.png" alt="image-20211230163244922"></p><p>当前数据中心中的存储网络架构通常使用的是存储区域网络 (Storage Area Network, SAN) ，SAN 是一种基于块的存储，利用高速架构将服务器与其逻辑磁盘单元 (Logical Disk Unit, LUN) 相连。当前的SAN通常使用采用FC（Fibre Channel）光纤通道或者Ethernet进行远距离传输。其中SAN网络环境中，因采用存储设备类型的不同又可以分为FC-SAN(采用光纤通道存储产品)和IP-SAN(采用ISCSI存储设备)。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230170745869.png" alt="image-20211230170745869" style="zoom:50%;" /><p><strong>NVMe-oF的目的就是利用现有成熟的Fabric来跑NVMe，实现NVMe标准在PCIe总线上的扩展也就是把本地高速访问的优势暴露给远端应用。</strong>NVMe-oF可以实现ISCISI的功能，甚至可以更好。在长时间内，NVMe-oF和iSCSI还是长期并存的局面。iSCSI目前已经非常成熟，而NVMe-oF则刚刚开始发展，需要不断地完善，并且借鉴iSCSI协议的一些功能，以支持更多的功能。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230170818645.png" alt="image-20211230170818645" style="zoom:50%;" /><h3 id="NVMe-oF"><a href="#NVMe-oF" class="headerlink" title="NVMe-oF"></a>NVMe-oF</h3><p>2016年发布的 NVMe-oF 1.0 规范描述了两种Fabric，光纤通道(Fibre Channel)和远程直接内存访问 (RDMA) 。下图是NVME和各种Fabric的关系。可以看到NVMe-oF是在Fabric之上的。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230171628666.png" alt="image-20211230171628666" style="zoom:50%;" /><p>上图可以更好的展示为，左侧三个灰色框架代表的是NVMe在一个机器内的操作，右边是通过NVMe-oF把NVMe扩展到数据中心中。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230172937194.png" alt="image-20211230172937194" style="zoom:50%;" /><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230193645449.png" alt="image-20211230193645449" style="zoom:67%;" /><p>NVMe-oF的协议栈如下</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230195604296.png" alt="image-20211230195604296" style="zoom:50%;" /><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source\_posts\images\华为网卡项目\image-20211230201734587.png" alt="image-20211230201734587" style="zoom:50%;" /><p>NVMeoF协议栈访问流程：NVMe控制器端CSCCX，转换成NVMe命令，写完数据后，数据怎么返回去的。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20220725111730264.png" alt="image-20220725111730264"></p><h3 id="NVMe-Transport-Mapping（NVME传输映射）"><a href="#NVMe-Transport-Mapping（NVME传输映射）" class="headerlink" title="NVMe Transport Mapping（NVME传输映射）"></a>NVMe Transport Mapping（NVME传输映射）</h3><p><strong>NVMe over Fabrics 需要底层 NVMe 传输来提供可靠的 NVMe 命令和数据传输。</strong></p><p>在本地 NVMe 实现中，NVMe 命令和响应通过 PCIe 接口映射到主机中的共享内存。然而，fabric 是建立在发送和接收消息的概念之上的，在端之间没有共享内存。NVMe fabric消息传输旨在通过使用包含一个或多个 NVMe 命令或响应的“capsules”将 NVMe 命令和响应封装到基于消息的系统中。 capsules或capsules与数据的组合独立于特定的fabric，并通过所需fabric发送和接收。就是说<strong>NVMe和Fabric之间没有指定的关系，是松耦合的</strong>。 <strong>NVMe 传输是独立于任何物理互连属性的抽象协议层。</strong></p><p> 在NVMe over Fabrics中，整个 NVMe 多队列模型得到维护，使用普通的 NVMe 提交队列(submission queues)和完成队列(completion queues)，但封装在基于消息的传输上。 NVMe I/O 队列对(submission and completion)是为多核 CPU 设计的，这种低延迟的高效设计在 NVMe over Fabrics 中得到维护。</p><p> 下图显示了 NVMe 传输的分类和示例。 NVMe 传输包含内存模型、消息模型或两者的组合。 内存模型是一种通过执行显式内存读写操作在结构节点之间传输命令、响应和数据的模型，而消息模型是一种仅在结构节点之间发送包含命令capsules、响应capsules和数据的消息。 消息/内存模型使用消息和显式内存读写操作的组合在结构节点之间传输命令包、响应包和数据。 数据可以选择性地包含在命令包和响应包中。</p><img src="D:\Sun1999\MyHexoBlogs\myblogs\source\_posts\Bruce-sun-data.github.io\images\华为网卡项目\image-20211230192640428.png" alt="image-20211230192640428" style="zoom:40%;" /><img src="D:\Sun1999\MyHexoBlogs\myblogs\source\_posts\Bruce-sun-data.github.io\images\华为网卡项目\image-20211230185100624.png" alt="image-20211230185100624" style="zoom:50%;" /><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl">上面这两个图一个来自<span class="hljs-variable">OverView</span>（第二个图），一个来自<span class="hljs-function"><span class="hljs-title">specification</span>(第一个图)，感觉有点冲突。</span><br></code></pre></td></tr></table></figure><p>在向 NVMe over Fabrics 设备发送复杂消息时，capsules允许将多条小消息作为一条消息发送，从而提高传输效率并减少延迟。 capsules是一个提交队列条目(submission queue entry)或一个完成队列条目(completion queue entry)，结合了一定数量的数据、元数据或 Scatter-Gather Lists (SGLs)。 元素的内容与本地 NVMe 协议相同，但capsules是一种将它们打包在一起以提高效率的方式。下图是capsules的具体架构。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20211230190840475.png" alt="image-20211230190840475"></p><h3 id="NVMe"><a href="#NVMe" class="headerlink" title="NVMe"></a>NVMe</h3><p>NVMe是什么：NVMe是一种Host与SSD之间通讯的协议，它在协议栈中隶属高层。</p><p><img src="https://img-blog.csdn.net/20180417100139590" alt="img"></p><p>NVMe制定了Host与SSD之间通讯的命令，以及命令如何执行的。</p><p>NVMe有两种命令，一种叫Admin Command，用以Host管理和控制SSD；另外一种就是I/O Command，用以Host和SSD之间数据的传输。</p><p>NVMe有三种队列：Submission Queue （SQ），Completion Queue（CQ）和Doorbell Register （DB）。 SQ和CQ位于Host的内存中，DB则位于SSD的控制器内部。如下图所示：</p><p><img src="https://img-blog.csdn.net/20180417100922685" alt="img"></p><p>SQ位于Host内存中，Host要发送命令时，先把准备好的命令放在SQ中，然后通知SSD来取；CQ也是位于Host内存中，一个命令执行完成，成功或失败，SSD总会往CQ中写入命令完成状态。DB则是在Host发送命令时，不是直接往SSD中发送命令的，而是把命令准备好放在自己的内存中，Host就是通过写SSD端的DB寄存器来告知SSD命令已经处理完毕，可以前来检阅。流程如下图所示：</p><p><img src="https://img-blog.csdn.net/20180417101200769" alt="img"></p><ol><li>Host写命令到SQ，此时的命令在host的内存中；</li><li>Host写DB，通知NVMe Controller取命令。通过更新在Controller内部的寄存器SQ Tail Doorbell来完成。</li><li>Controller收到通知，于是从SQ中取命令。取走命令之后，需要在Controller内部的SQ Head Pointer寄存器中更新Head所在的位置。NVMe没有规定Command存入队列的执行顺序，Controller可以一次取出多个Command进行批量处理。</li><li>Controller执行命令。执行Read/Wirte Command时，这个过程也会与Host Memory进行数据传递。</li><li>命令执行完成，Controller往CQ中写指令执行结果。此时，Controller需要更新内部的CQ Tail Pointer寄存器。</li><li>Controller发短信通知Host指令完成。Controller通过发送一个中断信息告知Host。</li><li>收到短信，Host处理CQ，查看命令完成状态；</li><li>Host处理完CQ中的命令需要告知controller。Host更新Controller内部的CQ Head Doorbell。</li></ol><p>四个寄存器全部放在Controller内存中。也就是说Controller知道这SQ Tail/Head和CQ Tail/Head的全部信息。</p><p>而Host仅仅知道自己更新的两个信息SQ Tail和CQ Head。Controller把SQ Head和CQ Tail的信息写入Completion报文中，通知给host。</p><p>NVMe 访存路径</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\source_posts\images\华为网卡项目\image-20220725111306065.png" alt="image-20220725111306065"></p><h3 id="NVMe-over-ROCE"><a href="#NVMe-over-ROCE" class="headerlink" title="NVMe over ROCE"></a>NVMe over ROCE</h3><p>NVMe over RoCE 调用关系如下图所示，内核 nvme_rdma 模块相当于胶水层，连接 rdma stack 和 nvme core接口，即 NVMe 队列接口可以对接 RDMA 队列接口，进而调用下层 rdma stack 中 verbs 传输接口。</p><img src="https://pic4.zhimg.com/v2-adaad1b3a14e2fa115fe0472c8b0955f_r.jpg" alt="preview" style="zoom:50%;" /><h4 id="NVMeoF队列结构"><a href="#NVMeoF队列结构" class="headerlink" title="NVMeoF队列结构"></a>NVMeoF队列结构</h4><p>NVMeoF将NVMe队列映射到RDMA队列上。</p><p><img src="D:\Sun1999\MyHexoBlogs\myblogs\Bruce-sun-data.github.io\source_posts\images\华为网卡项目\image-20220725112852892.png" alt="image-20220725112852892"></p><p>Host端RNIC将NVMe SQE封装成网络命令包，作为RDMA报文内容（payload），通过RDMA传输到target端，Target端的RNIC解包之后，将SQE和数据放入target端主机的内存中，随后Target处理NVMe命令和数据；处理完之后，将NVMe CQE封装成RDMA响应包(Response)，放入RDMA完成队列中，返回给Host。</p><h2 id="FIO工具介绍"><a href="#FIO工具介绍" class="headerlink" title="FIO工具介绍"></a>FIO工具介绍</h2><p>FIO 工具是一款用于测试硬件存储性能的辅助工具，兼具灵活性、可靠性从而从众多性能测试工具中脱颖而出。磁盘的 I/O 是衡量硬件性能的最重要的指标之一，而 FIO 工具通过模拟 I/O负载对存储介质进行压力测试，并将存储介质的 I/O 数据直观的呈现出来。</p><p>f关于io介绍的网站：<a href="https://fio.readthedocs.io/en/latest/fio_doc.html#how-fio-works">https://fio.readthedocs.io/en/latest/fio_doc.html#how-fio-works</a></p><h3 id="fio操作"><a href="#fio操作" class="headerlink" title="fio操作"></a>fio操作</h3><p>让 fio 模拟所需的 I/O 工作负载的第一步是编写一个描述该特定设置的作业文件(job file)。 作业文件中可以定义要模拟的线程或者文件，通过共享参数定义全局部分，也可以定义每一线程的单独参数。运行时，fio 会解析此文件并按照描述设置所有内容。</p><h3 id="fio文件配置介绍"><a href="#fio文件配置介绍" class="headerlink" title="fio文件配置介绍"></a>fio文件配置介绍</h3><ol><li><p>I/O type</p><p>定义发布给文件的I/O模式，读、写、顺序、随机或者是否使用buffer.</p><ul><li><p>direct=bool</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><span class="hljs-keyword">If</span> value <span class="hljs-keyword">is</span> <span class="hljs-literal">true</span>, <span class="hljs-keyword">use</span> non-buffered I/O. <span class="hljs-keyword">Default</span>: <span class="hljs-literal">false</span>.<br></code></pre></td></tr></table></figure><p>这个值决定是否使用non-buffered I/O。</p><p>buffered IO指的是在内核和用户程序之间设置了一层缓冲区，用来提高IO读写的效率；</p><p>读取：硬盘—&gt;内核缓冲区—&gt;<strong>用户缓冲区</strong>—&gt;用户程序</p><p>写回：用户程序—&gt;<strong>用户缓冲区</strong>—&gt;内核缓冲区—&gt;硬盘</p></li><li><p>atomic=bool</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">If</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">true</span>, attempt <span class="hljs-keyword">to</span> use atomic direct I/O. Atomic writes are guaranteed <span class="hljs-keyword">to</span> be <span class="hljs-keyword">stable</span> once acknowledged <span class="hljs-keyword">by</span> the operating <span class="hljs-keyword">system</span>. <br></code></pre></td></tr></table></figure><p>如果值为 true，则尝试使用原子 I/O。原子I/O的写入是稳定的</p></li><li><p>readwrite=str，rw=str</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Type</span> of I/O pattern.<br>read;<span class="hljs-built_in">write</span>;<span class="hljs-built_in">trim</span>;randread;randwrite;<span class="hljs-keyword">readwrite</span>;randrw;trimwrite<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Block size</p><p>发出I/O的块大小，可以是单个值，也可以是个范围</p><ul><li><p>blocksize=int[,int][,int]</p><p>单个值适用于read、write和trim。 可以为read、write和trim指定逗号分隔的值。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The block size <span class="hljs-keyword">in</span> <span class="hljs-keyword">bytes</span> used <span class="hljs-keyword">for</span> I/O units. Default: <span class="hljs-number">4096.</span> A single <span class="hljs-built_in">value</span> applies <span class="hljs-built_in">to</span> reads, writes, <span class="hljs-keyword">and</span> trims. Comma-separated values may be specified <span class="hljs-keyword">for</span> reads, writes, <span class="hljs-keyword">and</span> trims. A <span class="hljs-built_in">value</span> <span class="hljs-keyword">not</span> terminated <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> <span class="hljs-literal">comma</span> applies <span class="hljs-built_in">to</span> subsequent types.<br></code></pre></td></tr></table></figure></li><li><p>blocksize_range=irange[,irange][,irange], bsrange=irange[,irange][,irange]</p><p>I/O 单元的一系列块大小（以字节为单位）。 除非设置了 blocksize_unaligned，否则发出的 I/O 单元将始终是最小大小的倍数。<strong>bsrange=1k-4k,2k-8k.</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">A range <span class="hljs-keyword">of</span> block sizes <span class="hljs-keyword">in</span> bytes <span class="hljs-keyword">for</span> I/O units. The issued I/O unit will <span class="hljs-keyword">always</span> be a multiple <span class="hljs-keyword">of</span> the minimum size, unless blocksize_unaligned <span class="hljs-keyword">is</span> <span class="hljs-keyword">set</span>.<br><br>Comma-separated ranges may be specified <span class="hljs-keyword">for</span> reads, writes, <span class="hljs-keyword">and</span> trims <span class="hljs-keyword">as</span> described <span class="hljs-keyword">in</span> blocksize.<br></code></pre></td></tr></table></figure></li></ul></li><li><p>I/O size</p><p>要读写的数据总量</p><ul><li><p>size=int</p><p>此作业的每个线程的文件 I/O 的总大小。 Fio 将一直运行直到传输了这么多字节，除非运行时受到其他选项的限制（例如runtime，或由 io_size 增加/减少）。</p></li></ul></li><li><p>I/O depth</p><p>如果 I/O 引擎是异步的，希望保持多大的队列深度</p><ul><li><p>iodepth=int</p><p>队列深度，要针对文件保持运行的 I/O 单元数。存储控制器可以处理的未完成I / O请求的数量。即对存储控制器的限制，该存储控制器可以处理I / O请求并将命令发送到磁盘（r / w），并且如果存在超出其处理能力的请求，则丢弃请求。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-built_in">Number</span> <span class="hljs-keyword">of</span> I/O units <span class="hljs-keyword">to</span> keep <span class="hljs-keyword">in</span> flight against the file.<br>Note <span class="hljs-literal">that</span> increasing iodepth beyond <span class="hljs-number">1</span> will <span class="hljs-keyword">not</span> affect synchronous ioengines (except <span class="hljs-keyword">for</span> small degrees <span class="hljs-keyword">when</span> verify_async <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> use). Even <span class="hljs-keyword">async</span> engines may impose OS restrictions causing the desired depth <span class="hljs-keyword">not</span> <span class="hljs-keyword">to</span> be achieved. This may happen <span class="hljs-literal">on</span> Linux <span class="hljs-keyword">when</span> using libaio <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> setting direct=<span class="hljs-number">1</span>, since buffered I/O <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">async</span> <span class="hljs-literal">on</span> <span class="hljs-literal">that</span> OS. Keep an eye <span class="hljs-literal">on</span> the I/O depth distribution <span class="hljs-keyword">in</span> the fio output <span class="hljs-keyword">to</span> verify <span class="hljs-literal">that</span> the achieved depth <span class="hljs-keyword">is</span> <span class="hljs-keyword">as</span> expected. Default: <span class="hljs-number">1.</span><br></code></pre></td></tr></table></figure></li><li><p>iodepth_batch_submit=int, iodepth_batch=int</p><p>一次提交多少I/O</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">This defines how many pieces <span class="hljs-keyword">of</span> I/O <span class="hljs-keyword">to</span> submit <span class="hljs-keyword">at</span> once. It defaults <span class="hljs-keyword">to</span> <span class="hljs-number">1</span> which means <span class="hljs-keyword">that</span> we submit each I/O <span class="hljs-keyword">as</span> soon <span class="hljs-keyword">as</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">is</span> available, <span class="hljs-keyword">but</span> can be raised <span class="hljs-keyword">to</span> submit bigger batches <span class="hljs-keyword">of</span> I/O <span class="hljs-keyword">at</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">time</span>. If <span class="hljs-keyword">it</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> <span class="hljs-number">0</span> <span class="hljs-keyword">the</span> iodepth value will be used.<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Job description</p><ul><li><p>numjobs=int</p><p>创建此作业的指定数量的克隆。 每个作业克隆都作为一个独立的线程或进程产生。 可用于设置更多执行相同操作的线程/进程。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Create <span class="hljs-keyword">the</span> specified <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> clones <span class="hljs-keyword">of</span> this job. Each clone <span class="hljs-keyword">of</span> job is spawned <span class="hljs-keyword">as</span> <span class="hljs-keyword">an</span> independent thread <span class="hljs-keyword">or</span> <span class="hljs-built_in">process</span>. May be used <span class="hljs-built_in">to</span> setup <span class="hljs-keyword">a</span> larger <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> threads/processes doing <span class="hljs-keyword">the</span> same thing. Each thread is reported separately; <span class="hljs-built_in">to</span> see statistics <span class="hljs-keyword">for</span> all clones <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">whole</span>, use group_reporting <span class="hljs-keyword">in</span> conjunction <span class="hljs-keyword">with</span> new_group. See <span class="hljs-comment">--max-jobs. Default: 1.</span><br></code></pre></td></tr></table></figure><p>​    </p></li></ul></li></ol><h2 id="问题和解决方案"><a href="#问题和解决方案" class="headerlink" title="问题和解决方案"></a>问题和解决方案</h2><h3 id="RDMA"><a href="#RDMA" class="headerlink" title="RDMA"></a>RDMA</h3><ol><li><p>如果host端的一个qp中有多个请求在排队，网卡可以同时发出多个请求吗，还是只能一个一个发？</p></li><li><p>如果target端srq中一个wqe所指向的空间为4k，一个包大小为1k，那么target端来一个包应该先取一个wqe，然后接下来的3个包都用这个wqe？</p></li><li><p>如果2正确：host端有一个qp，网卡从该qp中同时取了两个命令发出，接收端先后收到了两个来自同一条qp的不同命令，这两个不同命令可以共用同一个wqe吗？</p></li><li><p>QP的一个IO会占用多少WQE，RDMA网卡不解析请求如何获知要多少WQE？</p></li><li><p>SRQ处会出现大IO堵塞小IO的情况</p></li><li><p>单个RDMA单端操作的数据量是否有上界？如果该操作数据量过大（100G），实际情况中是如何处理的？</p><p>MTU：The maximum size of a packet payload (not including headers) that can be sent / received from a port</p><p>A single request packet will result in multiple read response packets if the read length is greater than the PMTU.</p><p>Inbound RDMA Read Queue Depth (IRD)：The maximum number of incoming outstanding RDMA Read Requests that the RDMA-Capable Controller can handle on a particular RDMA-Capable Protocol Stream at the Data Source. For InfiniBand, the equivalent<br>for IRD is the Responder Resources.</p></li><li><p>target端触发RNR之后收到的包应该丢弃还是暂存？如果丢弃的话是后面来的包全部丢弃，还是只丢部分，也就是碰到SRQ空闲时就不丢，只有碰到SRQ满才丢</p></li><li><p>单个命令，I/O单元和packets的关系</p></li></ol><h3 id="NVMe-1"><a href="#NVMe-1" class="headerlink" title="NVMe"></a>NVMe</h3><h3 id="NVMeoF"><a href="#NVMeoF" class="headerlink" title="NVMeoF"></a>NVMeoF</h3><ol><li>Target端收到NVMe Read命令，应用轮询NVMe Submission queue后，是否可以同时进行这两种操作：（1）通知SSD准备数据到buffer中  2）下发RDMA Write命令，让网卡从SSD的Buffer中拖数据</li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>华为项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大数据编程第一天</title>
    <link href="/2021/05/11/%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/"/>
    <url>/2021/05/11/%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<p>因为本科专业是大数据的，但是三年下来好像对大数据没有特别深的了解，所以最近打算跟着B站上的教程学一手大数据的项目。是<a href="https://www.bilibili.com/video/BV1Mp4y1x7y7?t=332">黑马程序员_大数据实战之用户画像企业级项目,快速进入500强企业的捷径_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>用到了spark的相关知识。</p><h1 id="什么是用户画像"><a href="#什么是用户画像" class="headerlink" title="什么是用户画像"></a>什么是用户画像</h1><p>用户画像通常应用于营销推广和个性化推荐。</p><ol><li>数据仓库<ul><li>离线数据仓库，例如点击流日志数据</li><li>实时数据仓库</li></ul></li><li>用户画像<ul><li>以用户为主题，将用户数据进行标签化，给用户打上标签，获取用户群体和画像</li></ul></li><li>推广营销和个性化推荐<ul><li>使用用户画像的标签数据</li></ul></li></ol><p><a href="">用户画像：将用户数据标签化，给用户打上标签。</a></p><blockquote><p>用户数据有哪些</p><ul><li>基本信息数据<ul><li>基于基本信息数据构建标签，称为<code>User Personal</code></li></ul></li><li>使用APP或网站产生数据<ul><li>流量日志数据、订单数据、购物车数据、收藏数据</li><li>构建标签，称为<code>User Profile</code></li></ul></li></ul></blockquote><p><strong>重点来了</strong>：经过我几天的观察以及搜索，发现没有办法获取这个教程相关的资料。所以又只能自己一步步学习了。😔，太难了。目前就是一边快速看视频一边努力找适合自己的项目。所以接下来记录的都是我自己的学习过程。</p><h1 id="搭建大数据环境"><a href="#搭建大数据环境" class="headerlink" title="搭建大数据环境"></a>搭建大数据环境</h1><p>第一次知道可以使用ClouderaManager或者Ambari直接对大数据平台进行搭建。本文使用CM安装CDH从而对大数据平台进行安装以及管理。</p><p>首先使用VMware搭建了三个Centos系统的主机，并配置了公网ip地址。其中废了好大的劲用来配置，主要参考了下面的文章<a href="https://blog.csdn.net/chsong888/article/details/79358959"> 一、Vmware虚拟机设置固定IP地址_半个西瓜-CSDN博客</a></p><p>之后根据<a href="https://blog.csdn.net/m0_38017084/article/details/82218559?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control">cloudera环境搭建_扣脚小生-CSDN博客_cloudera</a>安装Cloudera环境。</p><h2 id="集群同步脚本"><a href="#集群同步脚本" class="headerlink" title="集群同步脚本"></a>集群同步脚本</h2><p>根据网上的其他资料，补充一下博客中没有的，如何设置集群同步脚本。不过在设置集群同步脚本之前，最好先进行<strong>SSH免密登录</strong>。</p><p>这是需要自己完成一个脚本的，从而之后方便调用。</p><p>具体代码即运行结果如下</p><h3 id="编写集群同步自行命令的脚本"><a href="#编写集群同步自行命令的脚本" class="headerlink" title="编写集群同步自行命令的脚本"></a>编写集群同步自行命令的脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@node101 ~]# vi &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xcall.sh</span><br><span class="line">[root@node101 ~]# </span><br><span class="line">[root@node101 ~]# chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xcall.sh</span><br><span class="line">[root@node101 ~]# </span><br><span class="line">[root@node101 ~]# more &#96;which xcall.sh&#96;</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#@author :yinzhengjie</span><br><span class="line">#blog:http:&#x2F;&#x2F;www.cnblogs.com&#x2F;yinzhengjie</span><br><span class="line">#EMAIL:y1053419035@qq.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#判断用户是否传参</span><br><span class="line">if [ $# -lt 1 ];then</span><br><span class="line">        echo &quot;请输入参数&quot;</span><br><span class="line">        exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#获取用户输入的命令</span><br><span class="line">cmd&#x3D;$@</span><br><span class="line"></span><br><span class="line">for (( i&#x3D;101;i&lt;&#x3D;103;i++ ))</span><br><span class="line">do</span><br><span class="line">        #使终端变绿色 </span><br><span class="line">        tput setaf 2</span><br><span class="line">        echo &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; node$&#123;i&#125;.yinzhengjie.org.cn : $cmd &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">        #使终端变回原来的颜色，即白灰色</span><br><span class="line">        tput setaf 7</span><br><span class="line">        #远程执行命令</span><br><span class="line">        ssh node$&#123;i&#125;.yinzhengjie.org.cn  $cmd</span><br><span class="line">        #判断命令是否执行成功</span><br><span class="line">        if [ $? &#x3D;&#x3D; 0 ];then</span><br><span class="line">                echo &quot;命令执行成功&quot;</span><br><span class="line">        fi</span><br><span class="line">done</span><br><span class="line">[root@node101 ~]# </span><br><span class="line">[root@node101 ~]# xcall.sh ls -d &#x2F;home&#x2F;yinzhengjie&#x2F;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; node101.yinzhengjie.org.cn : ls -d &#x2F;home&#x2F;yinzhengjie&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;home&#x2F;yinzhengjie&#x2F;</span><br><span class="line">命令执行成功</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; node102.yinzhengjie.org.cn : ls -d &#x2F;home&#x2F;yinzhengjie&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;home&#x2F;yinzhengjie&#x2F;</span><br><span class="line">命令执行成功</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; node103.yinzhengjie.org.cn : ls -d &#x2F;home&#x2F;yinzhengjie&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;home&#x2F;yinzhengjie&#x2F;</span><br><span class="line">命令执行成功</span><br><span class="line">[root@node101 ~]# </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编写集群同步配置文件的脚本"><a href="#编写集群同步配置文件的脚本" class="headerlink" title="编写集群同步配置文件的脚本"></a>编写集群同步配置文件的脚本</h3><p>这个脚本与之前的脚本的区别就在于脚本中只对后面两个从节点进行了配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@node101 ~]# vi &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xrsync.sh</span><br><span class="line">[root@node101 ~]# </span><br><span class="line">[root@node101 ~]# </span><br><span class="line">[root@node101 ~]# chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xrsync.sh</span><br><span class="line">[root@node101 ~]# </span><br><span class="line">[root@node101 ~]# </span><br><span class="line">[root@node101 ~]# more &#96;which xrsync.sh&#96;</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#@author :yinzhengjie</span><br><span class="line">#blog:http:&#x2F;&#x2F;www.cnblogs.com&#x2F;yinzhengjie</span><br><span class="line">#EMAIL:y1053419035@qq.com</span><br><span class="line"></span><br><span class="line">#判断用户是否传参</span><br><span class="line">if [ $# -lt 1 ];then</span><br><span class="line">    echo &quot;请输入参数&quot;;</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#获取文件路径</span><br><span class="line">file&#x3D;$@</span><br><span class="line"></span><br><span class="line">#获取子路径</span><br><span class="line">filename&#x3D;&#96;basename $file&#96;</span><br><span class="line"></span><br><span class="line">#获取父路径</span><br><span class="line">dirpath&#x3D;&#96;dirname $file&#96;</span><br><span class="line"></span><br><span class="line">#获取完整路径</span><br><span class="line">cd $dirpath</span><br><span class="line">fullpath&#x3D;&#96;pwd -P&#96;</span><br><span class="line"></span><br><span class="line">#同步文件到DataNode</span><br><span class="line">for (( i&#x3D;102;i&lt;&#x3D;103;i++ ))</span><br><span class="line">do</span><br><span class="line">    #使终端变绿色 </span><br><span class="line">    tput setaf 2</span><br><span class="line">    echo &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; node$&#123;i&#125;.yinzhengjie.org.cn : $file &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">    #使终端变回原来的颜色，即白灰色</span><br><span class="line">    tput setaf 7</span><br><span class="line">    #远程执行命令</span><br><span class="line">    rsync -lr $filename &#96;whoami&#96;@node$&#123;i&#125;.yinzhengjie.org.cn:$fullpath</span><br><span class="line">    #判断命令是否执行成功</span><br><span class="line">    if [ $? &#x3D;&#x3D; 0 ];then</span><br><span class="line">        echo &quot;命令执行成功&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h2><p>三个机子都需要配置java环境。关于如何下载老版本的java链接如下<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">Java Archive Downloads - Java SE 8 (oracle.com)</a></p><p>但是安装的过程中出现了报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java: error while loading shared libraries: libjli.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>原因应该是在解压<code>jdk-8u181-linux-x64.tar.gz</code>的时候，由于jdk文件过大，直接拖入虚拟机的时候造成了文件的损坏，所以解决方案见<a href="https://blog.csdn.net/liangliang233/article/details/105968513/?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">(linux解压出错 归档文件中异常的 EOF 文件不完整_liangliang233的博客-CSDN博客</a>之后就可以了。重新安装一下就可以了。</p><h2 id="安装CM"><a href="#安装CM" class="headerlink" title="安装CM"></a>安装CM</h2><p>由于最近CM的官网要求下载相关文件需要购买，所以特此找了一个有百度网盘的下载教程<a href="https://cloud.tencent.com/developer/article/1185607">Centos7离线安装Cloudera Manager 5.14.1 - 云+社区 - 腾讯云 (tencent.com)</a>但主要的流程还是跟着之前的来的，只是中间换了一些步骤。</p><p>主要记录一下rpm的安装方式。</p><p>按照<a href="https://blog.csdn.net/u010452388/article/details/102822956?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242"> CDH5.16.1采用rpm+http方式离线部署（图解详细流程）_阿顾的博客-CSDN博客</a>这篇博客进行的。其中数据库的配置部分其中综合了两篇文章的共同部分。</p><h2 id="分区扩容"><a href="#分区扩容" class="headerlink" title="分区扩容"></a>分区扩容</h2><p>linux的分区如何扩容可以参考这一篇<a href="https://zhuanlan.zhihu.com/p/83340525">博客</a>。在操作的过程中需要对部分的分区进行扩容。</p><p>最后成功搭建了Cloudera-Manager环境，但是由于虚拟机的内存不够，怎么运行都很卡。所以至此，切换了研究的思路。打算自己搭建大数据环境了。</p><h1 id="Spark电商实战项目"><a href="#Spark电商实战项目" class="headerlink" title="Spark电商实战项目"></a>Spark电商实战项目</h1><p>这一部分的内容是根据<a href="https://blog.csdn.net/u012318074/category_6744423.html">Spark大型电商项目实战_Erik_ly的博客-CSDN博客</a>进行的。</p><h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><p>在这之前先记录常用的命令</p><blockquote><ul><li>启动mysql</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">service mysql status   #验证</span><br></pre></td></tr></table></figure><ul><li>启动zookeeper</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start    #每个节点都要执行</span><br></pre></td></tr></table></figure><ul><li>启动hdfs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh   #在主机上运行</span><br><span class="line">jps   #在三台机子上使用jps查看</span><br></pre></td></tr></table></figure><ul><li>启动yarn集群</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-yarn.sh    #hadoop01启动start-yarn.sh</span><br><span class="line">yarn-daemon.sh start resourceManager   #hadoop02、3手动启动ResourceManager</span><br></pre></td></tr></table></figure><ul><li>更改hdfs中的文件的所属用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u hdfs hdfs dfs -chown root &#x2F;user&#x2F;root</span><br></pre></td></tr></table></figure><ul><li>获取hdfs的正确端口号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs getconf -confKey fs.default.name</span><br></pre></td></tr></table></figure></blockquote><h2 id="在使用过程中常见的问题"><a href="#在使用过程中常见的问题" class="headerlink" title="在使用过程中常见的问题"></a>在使用过程中常见的问题</h2><p>这一部分介绍项目在进行和使用的过程中遇到的一些问题。</p><h3 id="启动hadoop集群的时候没有namenode"><a href="#启动hadoop集群的时候没有namenode" class="headerlink" title="启动hadoop集群的时候没有namenode"></a>启动hadoop集群的时候没有namenode</h3><p>在主机的终端使用<code>start-all.sh</code>之后，使用jps查看，发现结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@sun sun]# jps</span><br><span class="line">3270 QuorumPeerMain</span><br><span class="line">7159 SecondaryNameNode</span><br><span class="line">2295 Main</span><br><span class="line">7310 ResourceManager</span><br><span class="line">7582 Jps</span><br><span class="line">3215 AlertPublisher</span><br><span class="line">3311 DataNode</span><br></pre></td></tr></table></figure><p>主要根据这篇文章进行修改<a href="https://blog.csdn.net/weixin_44318830/article/details/104339471">完美解决Hadoop集群无法正常关闭的问题!_Alice菌的博客-CSDN博客</a>和<a href="https://blog.csdn.net/hlx20080808/article/details/56670886">hadoop 关闭datanode节点时发生异常：no datanode to stop_分享我的点点滴滴，在成长路上与你同行！-CSDN博客</a></p><h3 id="hadoop没有办法正常关闭"><a href="#hadoop没有办法正常关闭" class="headerlink" title="hadoop没有办法正常关闭"></a>hadoop没有办法正常关闭</h3><p>在进行<code>stop-all.sh</code>的时候，显示的是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# stop-dfs.sh</span><br><span class="line">Stopping namenodes on [master]</span><br><span class="line">master: no namenode to stop</span><br><span class="line">slave2: no datanode to stop</span><br><span class="line">slave1: no datanode to stop</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>这个问题的出现是由于hadoop集群关闭的时候，Namenode或者DataNode的pid文件找不着。所以就需要强制关闭hadoop，即使用<code>kill -9 pid</code>.但是在使用这个命令关闭datanode的时候总是会有新的datanode进程被创建，所以需要使用命令<code>cd /proc/pid</code>和<code>cat status</code>对这个进行的父进程进行查看，kill掉父进程，但是发现一会又创建出来了datanode。</p><p>所以需要先使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name dfs</span><br></pre></td></tr></table></figure><p>，找到所有的dfs文件，之后将除了eclipse后面的那个都删除，之后再删除<code>/tmp</code>目录中的一些文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@sun2 tmp]# rm -rf hsperfdata*</span><br><span class="line">[root@sun2 tmp]# rm -rf hadoop*</span><br><span class="line">[root@sun2 tmp]# rm -rf yarn*</span><br></pre></td></tr></table></figure><p>之后再使用<code>jps</code>进行查看，就发现都没有了。</p><p>之后需要修改pid文件的目录，在配置文件中$HADOOP_HOME/conf/hadoop-env.sh中添加如下，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_PID_DIR=$&#123;HADOOP_HOME&#125;/pids</span><br></pre></td></tr></table></figure><h3 id="hadoop配置文件"><a href="#hadoop配置文件" class="headerlink" title="hadoop配置文件"></a>hadoop配置文件</h3><p>修改master主机修改Hadoop如下配置文件，这些配置文件都位于/usr/local/hadoop/etc/hadoop目录下。<br>修改slaves：<br>这里把DataNode的主机名写入该文件，每行一个。这里让master节点主机仅作为NameNode使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sun2</span><br><span class="line">sun3</span><br></pre></td></tr></table></figure><p>修改core-site.xml，其中<code>hadoop.tmp.dir</code>不是一个临时文件，是存放所有hadoop中数据的文件，其目录地址为：<code>file:/usr/local/hadoop/tmp</code>。<code>fs.default.name</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/data/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/data/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">value</span>&gt;</span>192.168.220.101:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>dfs.name.dir</code>这个参数用于确定将HDFS文件系统的<strong>元信息保存</strong>在什么目录下。</p><p><code>dfs.data.dir</code>这个参数用于确定将<strong>HDFS文件系统的数据保存</strong>在什么目录下。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>因为在之前配置过了虚拟机的IP地址，所以这里直接就进行hadoop等环境的配置了。具体细节见原博客，我只说明其中出问题的部分。</p><blockquote><p>在原博客中的对path环境变量进行设置的时候都缺少对原始path的引用，一定要注意。</p></blockquote><p>在linux中运行mysql的命令是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h3 id="hive安装"><a href="#hive安装" class="headerlink" title="hive安装"></a>hive安装</h3><p>在hive的安装过程中，配置<code>hive-site.xml</code>之后启动hive，出现报错，所以将百度网盘中的<code>hive-site.xml</code>复制进虚拟机中 ，进行替换。</p><blockquote><h4 id="Linux中使用vim进行单词查找的操作"><a href="#Linux中使用vim进行单词查找的操作" class="headerlink" title="Linux中使用vim进行单词查找的操作"></a>Linux中使用vim进行单词查找的操作</h4><p>从开头搜索</p><p>在命令模式下，输入/你要查找的字符</p><p>按下回车，可以看到vim把光标移动到该字符处</p><p>再按n（小写）查看下一个匹配</p><p>按N(大写）查看上一个匹配（capslock切换大小写，也可以在小写状态下按shift+n）</p><p>从结尾处搜索</p><p>？要搜索的字符串或字符</p></blockquote><p>之后在使用hive创建表格的时候出现了报错</p><blockquote><p>FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask. MetaException(message:Got exception: java.io.IOException Failed on local exception: com.google.protobuf.InvalidProtocolBufferException: Protocol message end-group tag did not match expected tag.; Host Details : local host is: “sun/192.168.220.101”; destination host is: “sun”:9000; )</p></blockquote><p>这里需要先修改一下之前的<code>hive-site.xml</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;jdbc:mysql:&#x2F;&#x2F;192.168.220.101:3306&#x2F;hive_metadata?serverTimezone&#x3D;GMT&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;description&gt;JDBC connect string for a JDBC metastore&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p>数据库连接的部分如上修改。之后在<code>hive</code>的<code>bin</code>目录下运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure><p>成功之后即可进行下一步。</p><p>但是在创建表格的时候继续报错。于是使用命令 <code>hive -hiveconf hive.root.logger=DEBUG,console\</code>对hive内的内容进行打印。报错如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR ql.Driver: FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask. MetaException(message:Got exception: org.apache.hadoop.security.AccessControlException Permission denied: user&#x3D;root, access&#x3D;WRITE, inode&#x3D;&quot;&#x2F;user&quot;:hdfs:supergroup:drwxr-xr-x</span><br></pre></td></tr></table></figure><p>这个样子应该是在hadoop中没有给root用户配置权限。定睛一看。发现在hdfs中的user目录下都没有root用户。执行以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -u hdfs hadoop fs -mkdir &#x2F;user&#x2F;root     #在hdfs中创建root用户</span><br><span class="line">hadoop fs -chmod 777 &#x2F;user&#x2F;root              #给root用户配置权限</span><br></pre></td></tr></table></figure><p>之后就可以在hive中创建表格了。之后上传<code>users.txt</code>文件到<code>/usr/local</code>的过程中不知道为什么显示的users表中的内容都是null。但是经过其他的教程来看问题应该不大，所以先不管他。</p><h3 id="zookeeper集群安装"><a href="#zookeeper集群安装" class="headerlink" title="zookeeper集群安装"></a>zookeeper集群安装</h3><p>按照文章的步骤进行，没有出现问题。</p><h3 id="kafka安装"><a href="#kafka安装" class="headerlink" title="kafka安装"></a>kafka安装</h3><p>按照文章的步骤进行，没有出现问题</p><h3 id="flume安装"><a href="#flume安装" class="headerlink" title="flume安装"></a>flume安装</h3><p>在flume的安装过程中出现了问题，其中需要把9000的端口号改成8020</p><h3 id="Spark安装"><a href="#Spark安装" class="headerlink" title="Spark安装"></a>Spark安装</h3><p>按照文章的步骤可以进行安装，但是在进行spark作业提交的时候会出现报错，报错如下</p><blockquote><p>java.lang.OutOfMemoryError: Java heap space</p><p>spark处理数据的时候遇到内存不足的报错</p></blockquote><h3 id="MySQL及客户端安装"><a href="#MySQL及客户端安装" class="headerlink" title="MySQL及客户端安装"></a>MySQL及客户端安装</h3><p>这里都是在自己的windows环境中进行配置的，由于这一部分比较占用内存，所以先不进行操作</p><h3 id="环境搭建-Maven安装及配置idea"><a href="#环境搭建-Maven安装及配置idea" class="headerlink" title="环境搭建-Maven安装及配置idea"></a>环境搭建-Maven安装及配置idea</h3><p>现在大部分的开发都是使用idea了，所以这里的开发环境也选择idea了。参考的博客是<a href="https://blog.csdn.net/qq_32588349/article/details/51461182">使用IntelliJ IDEA 配置Maven（入门）_记事本-CSDN博客_idea配置maven</a></p><h4 id="下载maven级配置"><a href="#下载maven级配置" class="headerlink" title="下载maven级配置"></a>下载maven级配置</h4><p>现在的地址在<a href="https://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/">Index of /dist/maven/maven-3/3.3.9/binaries (apache.org)</a>，</p>]]></content>
    
    
    
    <tags>
      
      <tag>python spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在echarts中利用百度地图api绘制国外地图</title>
    <link href="/2021/04/29/%E5%9C%A8echarts%E4%B8%AD%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%BB%98%E5%88%B6%E5%9B%BD%E5%A4%96%E5%9C%B0%E5%9B%BE/"/>
    <url>/2021/04/29/%E5%9C%A8echarts%E4%B8%AD%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%BB%98%E5%88%B6%E5%9B%BD%E5%A4%96%E5%9C%B0%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>由于我最近要利用High-D数据集做一个数据可视化的大屏，所以下面来看看如何利用echarts+百度地图api对国外地图进行简单的绘制。本文利用了jQuery，不会的同学可以先简单了解一下。</p><h2 id="申请百度地图的JavaScript-API"><a href="#申请百度地图的JavaScript-API" class="headerlink" title="申请百度地图的JavaScript API"></a>申请百度地图的JavaScript API</h2><p><a href="http://lbsyun.baidu.com/index.php?title=jspopular3.0">百度地图JavaScript API</a>是一套由JavaScript语言编写的应用程序接口，可帮助您在网站中构建功能丰富、交互性强的地图应用，支持PC端和移动端基于浏览器的地图应用开发，且支持HTML5特性的地图开发。本项目使用的是v3.0版本。</p><p>申请API的具体流程如下图</p><img src="/images/在echarts中利用百度地图绘制国外地图/image-20210429214642909.png" alt="image-20210429214642909" style="zoom:50%;" /><p>其中，需要注意的是在第三步获取服务密钥的时候，应用类型选择浏览器端，申请之后就可以在控制台看到了。</p><img src="/images/在echarts中利用百度地图绘制国外地图/image-20210429215213204.png" alt="image-20210429215213204" style="zoom:50%;" /><h2 id="Echarts相关资源下载"><a href="#Echarts相关资源下载" class="headerlink" title="Echarts相关资源下载"></a>Echarts相关资源下载</h2><p>之后是在echarts的<a href="https://github.com/apache/echarts/tree/master/dist">官方github</a>中下载相应的js文件，在html中引入的js文件从打包后的<code>dist</code>文件夹中拿：<code>dist/echarts.js</code>和<code>dist/extension/bmap.js</code>，之后再把jquery文件导入到对应的html文件中。</p><h2 id="Echarts官方实例的应用"><a href="#Echarts官方实例的应用" class="headerlink" title="Echarts官方实例的应用"></a>Echarts官方实例的应用</h2><p>其中，echarts官网中的<a href="https://echarts.apache.org/examples/zh/editor.html?c=effectScatter-bmap">全国主要城市空气质量图</a>是利用bmap实现的。html文件的代码如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        #main &#123;</span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height:800px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/echarts.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/bmap.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://api.map.baidu.com/api?v=3.0&amp;ak=yourapk&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/mymap.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>mymap.js</code>文件是自己的新建文件，也就是将上面链接中的完整代码复制过来的。去掉<code>import * as echarts from &#39;echarts&#39;;</code>这一行。之后就可以在本地运行，进行查看。如下图所示。</p><img src="/images/在echarts中利用百度地图绘制国外地图/image-20210430000527340.png" alt="image-20210430000527340" style="zoom:40%;" /><h2 id="带入到实际实例中"><a href="#带入到实际实例中" class="headerlink" title="带入到实际实例中"></a>带入到实际实例中</h2><p>本次项目使用的是德国的地图。</p><p>其实百度地图api还是很友善的，因为不管你的需求是国内还是国外它都画的挺详细的（至少在我需求的领域是这个样子）。所以当你想要定位到别的国家的时候，直接修改bmap的center属性就好了，不需要再加载其他国家的地图包之类的了。但是通常其他国家会比中国小，所以有的时候也需要修改地图的缩放程度。自己想要的的经纬度可以使用<a href="http://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图的坐标拾取器 </a>获得。在自己代码中找到下面的地方进行修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">center: [<span class="number">9.967067</span>, <span class="number">53.578978</span>],</span><br><span class="line">zoom: <span class="number">7</span>,</span><br></pre></td></tr></table></figure><p>可以看到德国的轮廓被白实线勾勒出来。如下图所示</p><p><img src="/images/%E5%9C%A8echarts%E4%B8%AD%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%BB%98%E5%88%B6%E5%9B%BD%E5%A4%96%E5%9C%B0%E5%9B%BE/image-20210511163319564.png" alt="image-20210511163319564"></p><p>如何去除左下角的百度logo和上面居中的题目。左下角的logo需要添加css内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.BMap_cpyCtrl</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-class">.anchorBL</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>标题就删除option中的title，即删掉如下代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">        text: &#39;全国主要城市空气质量 - 百度地图&#39;,</span><br><span class="line">        subtext: &#39;data from PM25.in&#39;,</span><br><span class="line">        sublink: &#39;http:&#x2F;&#x2F;www.pm25.in&#39;,</span><br><span class="line">        left: &#39;center&#39;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>地图的样式并不是我们想要的，所以需要对地图的具体样式进行修改，可以使用百度提供的<a href="https://lbsyun.baidu.com/customv2/editor/37ac49dc514ca193f95359ab99c72aee">百度地图个性化编辑器 (baidu.com)</a>对地图进行个性化定制。根据自己的需求定制后点击编辑json，可以获得此地图样式对应的代码。之后把代码复制到<code>mymap.js</code>中的<code>styleJson</code>就可以看到内容发生了改变。下面是我的样式对应的代码和结果。并且为了显示具体的城市和街道名称，需要将zoom调至15。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br></pre></td><td class="code"><pre><span class="line">mapStyle: &#123;</span><br><span class="line">            styleJson: [&#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#fa0404ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;land&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#091220ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;water&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#113549ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;green&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#0e1b30ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;building&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;building&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffb3&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;building&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#dadadab3&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subwaystation&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#b15454B2&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;education&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#e4f1f1ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;medical&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#f0dedeff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;scenicspots&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#e2efe5ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;weight&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#f7c54dff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#fed669ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#8f5a33ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.icon&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;weight&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#d8d8d8ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffeebbff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#525355ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;weight&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#d8d8d8ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#979c9aff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;railway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;weight&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;railway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#123c52ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;railway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#12223dff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;weight&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#d8d8d8ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffff00&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#979c9aff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;continent&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;continent&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.icon&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;continent&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#333333ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;continent&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;city&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.icon&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;city&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;city&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#454d50ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;city&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;town&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.icon&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;town&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;town&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#454d50ff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;town&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;road&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#12223dff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;poilabel&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;districtlabel&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;road&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;road&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;road&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffff00&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;district&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;poilabel&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.icon&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;poilabel&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#2dc4bbff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;poilabel&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffff00&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;manmade&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#12223dff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;districtlabel&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;entertainment&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">                <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#12223dff&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%9C%A8echarts%E4%B8%AD%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%BB%98%E5%88%B6%E5%9B%BD%E5%A4%96%E5%9C%B0%E5%9B%BE/image-20210511170026972.png" alt="image-20210511170026972"></p><h2 id="自定义绘制层"><a href="#自定义绘制层" class="headerlink" title="自定义绘制层"></a>自定义绘制层</h2><p>在地图中做出类似百度地图那种路线中有绿有黄有红的感觉。代表路段不同的拥堵程度，就需要使用百度地图api中的<a href="https://lbsyun.baidu.com/index.php?title=jspopular3.0/guide/drawlayer">JavaScript API - 自定义绘制层 | 百度地图API SDK (baidu.com)</a>介绍挺详细的，但是还是会有一些问题。所以在这里还是进行简单的介绍一下。</p><p>首先为了确定公路，需要获得公路的坐标。本项目打算画六段路，所以获取了七个坐标。再mymap.js中创建变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> allpoints = &#123;</span><br><span class="line">    <span class="string">&#x27;汉堡&#x27;</span>:[</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.959032</span>, <span class="number">53.574087</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.961734</span>, <span class="number">53.577172</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.962316</span>, <span class="number">53.578091</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.964544</span>, <span class="number">53.580444</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.966556</span>, <span class="number">53.582198</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.968137</span>, <span class="number">53.583753</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.970868</span>, <span class="number">53.584396</span>),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>BMap.Point</code>是一个地理坐标点 ，具体的操作可以看百度api对应的文档，<a href="https://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a1b0">百度地图JSAPI 2.0类参考 (baidu.com)</a>下面是通过一段线将这七个点连起来。</p><p>由于本项目是在echarts中使用的百度地图api，所以需要通过echarts调用。具体代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state_name=<span class="string">&#x27;汉堡&#x27;</span></span><br><span class="line"><span class="comment">//获得bmap</span></span><br><span class="line"><span class="keyword">var</span> bmap = myChart.getModel().getComponent(<span class="string">&#x27;bmap&#x27;</span>).getBMap();</span><br><span class="line"><span class="comment">//    首先清空覆盖物</span></span><br><span class="line"><span class="keyword">var</span> allOverlay = bmap.getOverlays();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allOverlay.length -<span class="number">1</span>; i++)&#123;</span><br><span class="line">    bmap.removeOverlay(allOverlay[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加折线,并进行位置的修改</span></span><br><span class="line"><span class="comment">//    绿色的折线</span></span><br><span class="line"><span class="keyword">var</span> curve = <span class="keyword">new</span> BMap.Polyline(allPoints[state_name], &#123;<span class="attr">strokeColor</span>:<span class="string">&quot;#1aff00&quot;</span>,<span class="attr">strokeWeight</span>:<span class="number">8</span>, <span class="attr">strokeOpacity</span>:<span class="number">1</span>&#125;);</span><br><span class="line">bmap.addOverlay(curve);</span><br><span class="line"><span class="keyword">var</span> curve_red = <span class="keyword">new</span> BMap.Polyline([allPoints[state_name][<span class="number">3</span>], allPoints[state_name][<span class="number">4</span>]], &#123;<span class="attr">strokeColor</span>:<span class="string">&quot;#ff0000&quot;</span>,<span class="attr">strokeWeight</span>:<span class="number">8</span>, <span class="attr">strokeOpacity</span>:<span class="number">1</span>&#125;);</span><br><span class="line">bmap.addOverlay(curve_red);</span><br><span class="line"><span class="comment">//黄色的折线</span></span><br><span class="line"><span class="keyword">var</span> curve_yellow = <span class="keyword">new</span> BMap.Polyline([ allPoints[state_name][<span class="number">1</span>],allPoints[state_name][<span class="number">2</span>]], &#123;<span class="attr">strokeColor</span>:<span class="string">&quot;#ffb700&quot;</span>,<span class="attr">strokeWeight</span>:<span class="number">8</span>, <span class="attr">strokeOpacity</span>:<span class="number">1</span>&#125;);</span><br><span class="line">bmap.addOverlay(curve_yellow);</span><br><span class="line"><span class="comment">// 绘制中心点</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> BMap.Marker(centers[state_name]);</span><br><span class="line">bmap.addOverlay(p);</span><br></pre></td></tr></table></figure><p>由于主要是对图层进行添加，所以还应<strong>删除bmap中的series的内容</strong>。最后的结果如下图所示。</p><p><img src="/images/%E5%9C%A8echarts%E4%B8%AD%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%BB%98%E5%88%B6%E5%9B%BD%E5%A4%96%E5%9C%B0%E5%9B%BE/image-20210511202950352.png" alt="image-20210511202950352"></p><p><code>mymap.js</code>的源码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chartDom = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(chartDom);</span><br><span class="line"><span class="keyword">var</span> option;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> allPoints = &#123;</span><br><span class="line">    <span class="string">&#x27;汉堡&#x27;</span>:[</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.959032</span>, <span class="number">53.574087</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.961734</span>, <span class="number">53.577172</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.962316</span>, <span class="number">53.578091</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.964544</span>, <span class="number">53.580444</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.966556</span>, <span class="number">53.582198</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.968137</span>, <span class="number">53.583753</span>),</span><br><span class="line">        <span class="keyword">new</span> BMap.Point(<span class="number">9.970868</span>, <span class="number">53.584396</span>),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">option = &#123;</span><br><span class="line">    tooltip : &#123;</span><br><span class="line">        trigger: <span class="string">&#x27;item&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    bmap: &#123;</span><br><span class="line">        center: [<span class="number">9.967067</span>, <span class="number">53.578978</span>],</span><br><span class="line">        zoom: <span class="number">15</span>,</span><br><span class="line">        roam: <span class="literal">true</span>,</span><br><span class="line">        mapStyle: &#123;</span><br><span class="line">            styleJson: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;land&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#091220ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;water&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#113549ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;green&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#0e1b30ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;building&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;building&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffb3&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;building&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#dadadab3&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subwaystation&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#b15454B2&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;education&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#e4f1f1ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;medical&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#f0dedeff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;scenicspots&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#e2efe5ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;weight&quot;</span>: <span class="number">4</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#f7c54dff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#fed669ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#8f5a33ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;highway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.icon&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;weight&quot;</span>: <span class="number">2</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#d8d8d8ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffeebbff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#525355ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;arterial&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;weight&quot;</span>: <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#d8d8d8ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#979c9aff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;railway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;weight&quot;</span>: <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;railway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#123c52ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;railway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#12223dff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;weight&quot;</span>: <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#d8d8d8ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffff00&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#979c9aff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;subway&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;continent&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;continent&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.icon&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;continent&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#333333ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;continent&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;city&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.icon&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;city&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;city&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#454d50ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;city&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;town&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.icon&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;town&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;town&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#454d50ff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;town&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;road&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#12223dff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;poilabel&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;districtlabel&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;road&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;road&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;road&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffff00&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;district&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;poilabel&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.icon&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;visibility&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;poilabel&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.fill&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#2dc4bbff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;poilabel&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffff00&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;manmade&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#12223dff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;districtlabel&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;labels.text.stroke&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;entertainment&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ffffffff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    <span class="string">&quot;featureType&quot;</span>: <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;elementType&quot;</span>: <span class="string">&quot;geometry&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stylers&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#12223dff&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    series :[],</span><br><span class="line">&#125;;</span><br><span class="line">option &amp;&amp; myChart.setOption(option);</span><br><span class="line"><span class="keyword">let</span> state_name=<span class="string">&#x27;汉堡&#x27;</span></span><br><span class="line"><span class="comment">//获得bmap</span></span><br><span class="line"><span class="keyword">var</span> bmap = myChart.getModel().getComponent(<span class="string">&#x27;bmap&#x27;</span>).getBMap();</span><br><span class="line"><span class="comment">//    首先清空覆盖物</span></span><br><span class="line"><span class="keyword">var</span> allOverlay = bmap.getOverlays();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allOverlay.length -<span class="number">1</span>; i++)&#123;</span><br><span class="line">    bmap.removeOverlay(allOverlay[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加折线,并进行位置的修改</span></span><br><span class="line"><span class="comment">//    绿色的折线</span></span><br><span class="line"><span class="keyword">var</span> curve = <span class="keyword">new</span> BMap.Polyline(allPoints[state_name], &#123;<span class="attr">strokeColor</span>:<span class="string">&quot;#1aff00&quot;</span>,<span class="attr">strokeWeight</span>:<span class="number">8</span>, <span class="attr">strokeOpacity</span>:<span class="number">1</span>&#125;);</span><br><span class="line">bmap.addOverlay(curve);</span><br><span class="line"><span class="keyword">var</span> curve_red = <span class="keyword">new</span> BMap.Polyline([allPoints[state_name][<span class="number">3</span>], allPoints[state_name][<span class="number">4</span>]], &#123;<span class="attr">strokeColor</span>:<span class="string">&quot;#ff0000&quot;</span>,<span class="attr">strokeWeight</span>:<span class="number">8</span>, <span class="attr">strokeOpacity</span>:<span class="number">1</span>&#125;);</span><br><span class="line">bmap.addOverlay(curve_red);</span><br><span class="line"><span class="comment">//黄色的折线</span></span><br><span class="line"><span class="keyword">var</span> curve_yellow = <span class="keyword">new</span> BMap.Polyline([ allPoints[state_name][<span class="number">1</span>],allPoints[state_name][<span class="number">2</span>]], &#123;<span class="attr">strokeColor</span>:<span class="string">&quot;#ffb700&quot;</span>,<span class="attr">strokeWeight</span>:<span class="number">8</span>, <span class="attr">strokeOpacity</span>:<span class="number">1</span>&#125;);</span><br><span class="line">bmap.addOverlay(curve_yellow);</span><br><span class="line"><span class="comment">// 绘制中心点</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> BMap.Marker(centers[state_name]);</span><br><span class="line">bmap.addOverlay(p);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端,echarts,百度地图，添加图层</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/28/hello-world/"/>
    <url>/2021/04/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
